apiVersion: v1
kind: ConfigMap
metadata:
  name: setup-scripts-neutron-1
  labels:
    starship.io/name: starship-e2e-tests
    app.kubernetes.io/version: 4.0.0-alpha.1
    app.kubernetes.io/managed-by: starship
    app.kubernetes.io/component: chain
    app.kubernetes.io/name: setup-scripts-neutron-1
    app.kubernetes.io/part-of: neutron-1
    app.kubernetes.io/role: setup-scripts
    starship.io/chain-name: neutron
    starship.io/chain-id: neutron-1
data:
  createGenesis.sh: >
    #!/bin/bash


    DENOM="${DENOM:=untrn}"

    STAKEDENOM=${DENOM:-untrn}

    COINS="${COINS:=100000000000000000untrn}"

    CHAIN_ID="${CHAIN_ID:=neutron-1}"

    BINARY="${CHAIN_BIN:=neutrond}"

    CHAIN_DIR="${CHAIN_DIR:=$HOME/.neutrond}"

    KEYS_CONFIG="${KEYS_CONFIG:=configs/keys.json}"


    BRANCH="${BRANCH:=v3.0.5}"


    FAUCET_ENABLED="${FAUCET_ENABLED:=true}"

    NUM_VALIDATORS="${NUM_VALIDATORS:=1}"

    NUM_RELAYERS="${NUM_RELAYERS:=0}"


    GENESIS_PATH="$CHAIN_DIR/config/genesis.json"


    CONTRACTS_BINARIES_DIR=${CONTRACTS_BINARIES_DIR:-./contracts}

    THIRD_PARTY_CONTRACTS_DIR=${THIRD_PARTY_CONTRACTS_DIR:-./contracts_thirdparty}


    set -euxo pipefail


    mkdir -p $CONTRACTS_BINARIES_DIR $THIRD_PARTY_CONTRACTS_DIR


    function download_contract() {
        CONTRACT_NAME="$1"  # <type of contract>/<contract name>
        CONTRACT_URI=${CONTRACT_NAME#"./"}
        curl https://github.com/neutron-org/neutron/raw/$BRANCH/$CONTRACT_URI -L -o $CONTRACT_NAME
    }


    $BINARY init $CHAIN_ID --chain-id $CHAIN_ID


    # Add genesis keys to the keyring and self delegate initial coins

    echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)

    jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $BINARY keys add $(jq -r
    ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"

    $BINARY add-genesis-account $($BINARY keys show -a $(jq -r .genesis[0].name
    $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"


    # Add faucet key to the keyring and self delegate initial coins

    echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)

    jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $BINARY keys add $(jq -r
    ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"

    $BINARY add-genesis-account $($BINARY keys show -a $(jq -r .faucet[0].name
    $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"


    if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];

    then
      ## Add relayers keys and delegate tokens
      for i in $(seq 0 $NUM_RELAYERS);
      do
        # Add relayer key and delegate tokens
        RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
        echo "Adding relayer key.... $RELAYER_KEY_NAME"
        jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $BINARY keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
        $BINARY add-genesis-account $($BINARY keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
      done
    fi


    # Add test addresses, admin address

    echo "Adding key.... demowallet1"

    jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $BINARY keys add demowallet1
    --index 1 --recover --keyring-backend="test"

    $BINARY add-genesis-account $($BINARY keys show -a demowallet1
    --keyring-backend="test") $COINS --keyring-backend="test"

    # Add test addresses, second multisig address

    echo "Adding key.... demowallet2"

    jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $BINARY keys add demowallet2
    --index 2 --recover --keyring-backend="test"

    $BINARY add-genesis-account $($BINARY keys show -a demowallet2
    --keyring-backend="test") $COINS --keyring-backend="test"

    # Add test addresses, second multisig address

    echo "Adding key.... demowallet2"

    jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $BINARY keys add demowallet3
    --index 3 --recover --keyring-backend="test"

    $BINARY add-genesis-account $($BINARY keys show -a demowallet3
    --keyring-backend="test") $COINS --keyring-backend="test"


    echo "Update genesis.json file with updated local params"

    sed -i "s/\"time_iota_ms\": \".*\"/\"time_iota_ms\": \"$TIME_IOTA_MS\"/"
    $CHAIN_DIR/config/genesis.json


    sed -i -e "s/\"denom\": \"stake\",/\"denom\": \"$DENOM\",/g" "$GENESIS_PATH"

    sed -i -e "s/\"mint_denom\": \"stake\",/\"mint_denom\": \"$DENOM\",/g"
    "$GENESIS_PATH"

    sed -i -e "s/\"bond_denom\": \"stake\"/\"bond_denom\": \"$DENOM\"/g"
    "$GENESIS_PATH"


    # IMPORTANT! minimum_gas_prices should always contain at least one record,
    otherwise the chain will not start or halt

    MIN_GAS_PRICES_DEFAULT='[{"denom":"untrn","amount":"0"}]'

    MIN_GAS_PRICES=${MIN_GAS_PRICES:-"$MIN_GAS_PRICES_DEFAULT"}


    BYPASS_MIN_FEE_MSG_TYPES_DEFAULT='["/ibc.core.channel.v1.Msg/RecvPacket",
    "/ibc.core.channel.v1.Msg/Acknowledgement",
    "/ibc.core.client.v1.Msg/UpdateClient"]'

    BYPASS_MIN_FEE_MSG_TYPES=${BYPASS_MIN_FEE_MSG_TYPES:-"$BYPASS_MIN_FEE_MSG_TYPES_DEFAULT"}


    MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE_DEFAULT=1000000

    MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE=${MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE:-"$MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE_DEFAULT"}


    ADMIN_ADDRESS=$($BINARY keys show demowallet1 -a --keyring-backend="test")

    SECOND_MULTISIG_ADDRESS=$($BINARY keys show demowallet2 -a
    --keyring-backend="test")


    ls $CHAIN_DIR/config


    # MAIN_DAO

    DAO_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_core.wasm

    download_contract $DAO_CONTRACT

    PRE_PROPOSAL_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_pre_propose_single.wasm

    download_contract $PRE_PROPOSAL_CONTRACT

    PRE_PROPOSAL_MULTIPLE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_pre_propose_multiple.wasm

    download_contract $PRE_PROPOSAL_MULTIPLE_CONTRACT

    PRE_PROPOSAL_OVERRULE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_pre_propose_overrule.wasm

    download_contract $PRE_PROPOSAL_OVERRULE_CONTRACT

    PROPOSAL_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_proposal_single.wasm

    download_contract $PROPOSAL_CONTRACT

    PROPOSAL_MULTIPLE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_proposal_multiple.wasm

    download_contract $PROPOSAL_MULTIPLE_CONTRACT

    VOTING_REGISTRY_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_voting_registry.wasm

    download_contract $VOTING_REGISTRY_CONTRACT

    # VAULTS

    NEUTRON_VAULT_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_vault.wasm

    download_contract $NEUTRON_VAULT_CONTRACT

    NEUTRON_INVESTORS_VAULT=$CONTRACTS_BINARIES_DIR/investors_vesting_vault.wasm

    download_contract $NEUTRON_INVESTORS_VAULT

    # VESTING

    NEUTRON_VESTING_INVESTORS=$CONTRACTS_BINARIES_DIR/vesting_investors.wasm

    download_contract $NEUTRON_VESTING_INVESTORS

    # RESERVE

    RESERVE_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_reserve.wasm

    download_contract $RESERVE_CONTRACT

    DISTRIBUTION_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_distribution.wasm

    download_contract $DISTRIBUTION_CONTRACT

    # SUBDAOS

    SUBDAO_CORE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_core.wasm

    download_contract $SUBDAO_CORE_CONTRACT

    SUBDAO_TIMELOCK_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_timelock_single.wasm

    download_contract $SUBDAO_TIMELOCK_CONTRACT

    SUBDAO_PRE_PROPOSE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_pre_propose_single.wasm

    download_contract $SUBDAO_PRE_PROPOSE_CONTRACT

    SUBDAO_PROPOSAL_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_proposal_single.wasm

    download_contract $SUBDAO_PROPOSAL_CONTRACT

    CW4_VOTING_CONTRACT=$THIRD_PARTY_CONTRACTS_DIR/cw4_voting.wasm

    download_contract $CW4_VOTING_CONTRACT

    CW4_GROUP_CONTRACT=$THIRD_PARTY_CONTRACTS_DIR/cw4_group.wasm

    download_contract $CW4_GROUP_CONTRACT


    echo "Add consumer section..."

    $BINARY add-consumer-section --home "$CHAIN_DIR"

    ### PARAMETERS SECTION


    ## slashing params

    SLASHING_SIGNED_BLOCKS_WINDOW=140000

    SLASHING_MIN_SIGNED=0.050000000000000000

    SLASHING_FRACTION_DOUBLE_SIGN=0.010000000000000000

    SLASHING_FRACTION_DOWNTIME=0.000100000000000000


    ##pre propose single parameters

    PRE_PROPOSAL_SINGLE_AMOUNT=1000

    PRE_PROPOSAL_SINGLE_REFUND_POLICY="only_passed"

    PRE_PROPOSAL_SINGLE_OPEN_PROPOSAL_SUBMISSION=false


    ## proposal singe params

    PROPOSAL_ALLOW_REVOTING=false # should be true for non-testing env

    PROPOSAL_SINGLE_ONLY_MEMBERS_EXECUTE=false

    PROPOSAL_SINGLE_ONLY_MAX_VOTING_PERIOD=1200 # seconds; should be 2 weeks in
    production

    PROPOSAL_SINGLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE=false

    PROPOSAL_SINGLE_QUORUM=0.05 # quorum to consider proposal's result viable
    [float] < 1

    PROPOSAL_SINGLE_THRESHOLD=0.5 # % of votes should vote for the proposal to
    pass [float] <1

    PROPOSAL_SINGLE_LABEL="neutron.proposals.single"

    PRE_PROPOSAL_SINGLE_LABEL="neutron.proposals.single.pre_propose"


    ## propose multiple params

    PROPOSAL_MULTIPLE_ALLOW_REVOTING=false # should be true for non-testing env

    PROPOSAL_MULTIPLE_ONLY_MEMBERS_EXECUTE=false

    PROPOSAL_MULTIPLE_ONLY_MAX_VOTING_PERIOD=1200 # seconds; should be 2 weeks
    in production

    PROPOSAL_MULTIPLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE=false

    PROPOSAL_MULTIPLE_QUORUM=0.05 # quorum to consider proposal's result viable
    [float] < 1

    PROPOSAL_MULTIPLE_LABEL="neutron.proposals.multiple"

    PRE_PROPOSAL_MULTIPLE_LABEL="neutron.proposals.multiple.pre_propose"


    ## Propose overrule params

    PROPOSAL_OVERRULE_ALLOW_REVOTING=false

    PROPOSAL_OVERRULE_ONLY_MEMBERS_EXECUTE=false

    PROPOSAL_OVERRULE_ONLY_MAX_VOTING_PERIOD=1200 # seconds; should be 3 days in
    production

    PROPOSAL_OVERRULE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE=false

    PROPOSAL_OVERRULE_THRESHOLD=0.005 # around 10 times lower than for regular
    proposals

    PROPOSAL_OVERRULE_LABEL="neutron.proposals.overrule"

    PRE_PROPOSE_OVERRULE_LABEL="neutron.proposals.overrule.pre_propose"


    ## Voting registry

    VOTING_REGISTRY_LABEL="neutron.voting"


    ## DAO

    DAO_NAME="Neutron DAO"

    DAO_DESCRIPTION="Neutron DAO is a DAO DAO-based governance of Neutron chain"

    DAO_CORE_LABEL="neutron.core"


    ## Neutron vault

    NEUTRON_VAULT_NAME="Neutron Vault"

    NEUTRON_VAULT_DESCRIPTION="Vault to put NTRN tokens to get voting power"

    NEUTRON_VAULT_LABEL="neutron.voting.vaults.neutron"

    NEUTRON_INVESTORS_VAULT_NAME="Neutron Investors Vault"

    NEUTRON_INVESTORS_VAULT_DESCRIPTION="Vault sourcing voting power form
    investors vesting"

    NEUTRON_INVESTORS_VAULT_LABEL="neutron.voting.vaults.investors"


    # VESTING (for tests purposes)

    NEUTRON_VESTING_INVESTORS_LABEL="neutron.vesting.investors"


    ## Reserve

    RESERVE_DISTRIBUTION_RATE=0

    RESERVE_MIN_PERIOD=10

    RESERVE_VESTING_DENOMINATOR=1

    RESERVE_LABEL="reserve"


    DISTRIBUTION_LABEL="distribution"


    ## Grants subdao

    GRANTS_SUBDAO_CORE_NAME="Grants SubDAO"

    GRANTS_SUBDAO_CORE_DESCRIPTION="SubDAO to distribute grants to projects"

    GRANTS_SUBDAO_CORE_LABEL="neutron.subdaos.grants.core"

    GRANTS_SUBDAO_PROPOSAL_LABEL="neutron.subdaos.grants.proposals.single"

    GRANTS_SUBDAO_PRE_PROPOSE_LABEL="neutron.subdaos.grants.proposals.single.pre_propose"

    GRANTS_SUBDAO_VOTING_MODULE_LABEL="neutron.subdaos.grants.voting"


    ## Timelock

    GRANTS_SUBDAO_TIMELOCK_LABEL="neutron.subdaos.grants.proposals.single.pre_propose.timelock"


    ## Security subdao

    SECURITY_SUBDAO_CORE_NAME="Security SubDAO"

    SECURITY_SUBDAO_CORE_DESCRIPTION="SubDAO with power to pause specific
    Neutron DAO modules"

    SECURITY_SUBDAO_CORE_LABEL="neutron.subdaos.security.core"

    SECURITY_SUBDAO_PROPOSAL_LABEL="neutron.subdaos.security.proposals.single"

    SECURITY_SUBDAO_PRE_PROPOSE_LABEL="neutron.subdaos.security.proposals.single.pre_propose"

    SECURITY_SUBDAO_VOTE_LABEL="neutron.subdaos.security.voting"


    echo "Initializing dao contract in genesis..."


    function store_binary() {
      CONTRACT_BINARY_PATH=$1
      $BINARY add-wasm-message store "$CONTRACT_BINARY_PATH" \
        --output json --run-as "${ADMIN_ADDRESS}" --keyring-backend=test --home "$CHAIN_DIR"
      BINARY_ID=$(jq -r "[.app_state.wasm.gen_msgs[] | select(.store_code != null)] | length" "$CHAIN_DIR/config/genesis.json")
      echo "$BINARY_ID"
    }


    # Upload the dao contracts

    # MAIN_DAO

    DAO_CONTRACT_BINARY_ID=$(store_binary                   "$DAO_CONTRACT")

    PRE_PROPOSAL_CONTRACT_BINARY_ID=$(store_binary         
    "$PRE_PROPOSAL_CONTRACT")

    PRE_PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID=$(store_binary
    "$PRE_PROPOSAL_MULTIPLE_CONTRACT")

    PRE_PROPOSAL_OVERRULE_CONTRACT_BINARY_ID=$(store_binary
    "$PRE_PROPOSAL_OVERRULE_CONTRACT")

    PROPOSAL_CONTRACT_BINARY_ID=$(store_binary             
    "$PROPOSAL_CONTRACT")

    PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID=$(store_binary    
    "$PROPOSAL_MULTIPLE_CONTRACT")

    VOTING_REGISTRY_CONTRACT_BINARY_ID=$(store_binary      
    "$VOTING_REGISTRY_CONTRACT")

    # VAULTS

    NEUTRON_VAULT_CONTRACT_BINARY_ID=$(store_binary        
    "$NEUTRON_VAULT_CONTRACT")

    NEUTRON_INVESTORS_VAULT_CONTRACT_BINARY_ID=$(store_binary
    "$NEUTRON_INVESTORS_VAULT")

    # VESTING

    NEUTRON_VESTING_INVESTORS_BINARY_ID=$(store_binary     
    "$NEUTRON_VESTING_INVESTORS")

    # RESERVE

    DISTRIBUTION_CONTRACT_BINARY_ID=$(store_binary         
    "$DISTRIBUTION_CONTRACT")

    RESERVE_CONTRACT_BINARY_ID=$(store_binary               "$RESERVE_CONTRACT")

    # SUBDAOS

    SUBDAO_CORE_BINARY_ID=$(store_binary                   
    "$SUBDAO_CORE_CONTRACT")

    SUBDAO_TIMELOCK_BINARY_ID=$(store_binary               
    "$SUBDAO_TIMELOCK_CONTRACT")

    SUBDAO_PRE_PROPOSE_BINARY_ID=$(store_binary            
    "$SUBDAO_PRE_PROPOSE_CONTRACT")

    SUBDAO_PROPOSAL_BINARY_ID=$(store_binary               
    "$SUBDAO_PROPOSAL_CONTRACT")

    CW4_VOTING_CONTRACT_BINARY_ID=$(store_binary           
    "$CW4_VOTING_CONTRACT")

    CW4_GROUP_CONTRACT_BINARY_ID=$(store_binary            
    "$CW4_GROUP_CONTRACT")


    # WARNING!

    # The following code is needed to pre-generate the contract addresses

    # Those addresses depend on the ORDER OF CONTRACTS INITIALIZATION

    # Thus, this code section depends a lot on the order and content of the
    instantiate-contract commands at the end script

    # It also depends on the implicitly initialized contracts (e.g. DAO core
    instantiation also instantiate proposals and stuff)

    # If you're to do any changes, please do it consistently in both sections

    # If you're to do add any implicitly initialized contracts in init messages,
    please reflect changes here


    function genaddr() {
      CODE_ID=$1
      CONTRACT_ADDRESS=$($BINARY debug generate-contract-address "$INSTANCE_ID_COUNTER" "$CODE_ID")
      echo "$CONTRACT_ADDRESS"
    }


    INSTANCE_ID_COUNTER=1


    # VAULTS

    NEUTRON_VAULT_CONTRACT_ADDRESS=$(genaddr               
    "$NEUTRON_VAULT_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    NEUTRON_INVESTORS_VAULT_CONTRACT_ADDRESS=$(genaddr     
    "$NEUTRON_INVESTORS_VAULT_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++
    ))


    # VESTING

    NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES=$(genaddr   
    "$NEUTRON_VESTING_INVESTORS_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))


    # MAIN_DAO

    DAO_CONTRACT_ADDRESS=$(genaddr                         
    "$DAO_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    VOTING_REGISTRY_CONTRACT_ADDRESS=$(genaddr             
    "$VOTING_REGISTRY_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    PROPOSAL_SINGLE_CONTRACT_ADDRESS=$(genaddr             
    "$PROPOSAL_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    PRE_PROPOSAL_CONTRACT_ADDRESS=$(genaddr                
    "$PRE_PROPOSAL_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    PROPOSAL_MULTIPLE_CONTRACT_ADDRESS=$(genaddr           
    "$PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    PRE_PROPOSAL_MULTIPLE_CONTRACT_ADDRESS=$(genaddr       
    "$PRE_PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    PROPOSAL_OVERRULE_CONTRACT_ADDRESS=$(genaddr           
    "$PROPOSAL_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    PRE_PROPOSAL_OVERRULE_CONTRACT_ADDRESS=$(genaddr       
    "$PRE_PROPOSAL_OVERRULE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))


    # RESERVE

    RESERVE_CONTRACT_ADDRESS=$(genaddr                    
    "$RESERVE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    DISTRIBUTION_CONTRACT_ADDRESS=$(genaddr               
    "$DISTRIBUTION_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    # SUBDAOS

    SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS=$(genaddr       
    "$SUBDAO_CORE_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    SECURITY_SUBDAO_VOTING_CONTRACT_ADDRESS=$(genaddr     
    "$CW4_VOTING_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    SECURITY_SUBDAO_GROUP_CONTRACT_ADDRESS=$(genaddr      
    "$CW4_GROUP_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    SECURITY_SUBDAO_PROPOSAL_CONTRACT_ADDRESS=$(genaddr   
    "$SUBDAO_PROPOSAL_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    SECURITY_SUBDAO_PRE_PROPOSE_CONTRACT_ADDRESS=$(genaddr
    "$SUBDAO_PROPOSAL_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    GRANTS_SUBDAO_CORE_CONTRACT_ADDRESS=$(genaddr         
    "$SUBDAO_CORE_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    GRANTS_SUBDAO_VOTING_CONTRACT_ADDRESS=$(genaddr       
    "$CW4_VOTING_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    GRANTS_SUBDAO_PROPOSAL_CONTRACT_ADDRESS=$(genaddr     
    "$SUBDAO_PROPOSAL_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    GRANTS_SUBDAO_PRE_PROPOSE_CONTRACT_ADDRESS=$(genaddr  
    "$SUBDAO_PRE_PROPOSE_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    GRANTS_SUBDAO_TIMELOCK_CONTRACT_ADDRESS=$(genaddr     
    "$SUBDAO_TIMELOCK_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

    GRANTS_SUBDAO_GROUP_CONTRACT_ADDRESS=$(genaddr        
    "$CW4_GROUP_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))


    function check_json() {
      MSG=$1
      if ! jq -e . >/dev/null 2>&1 <<<"$MSG"; then
          echo "Failed to parse JSON for $MSG" >&2
          exit 1
      fi
    }


    function json_to_base64() {
      MSG=$1
      check_json "$MSG"
      echo "$MSG" | base64 | tr -d "\n"
    }


    # PRE_PROPOSE_INIT_MSG will be put into the PROPOSAL_SINGLE_INIT_MSG and
    PROPOSAL_MULTIPLE_INIT_MSG

    PRE_PROPOSE_INIT_MSG='{
       "deposit_info":{
          "denom":{
             "token":{
                "denom":{
                   "native":"'"$STAKEDENOM"'"
                }
             }
          },
         "amount": "'"$PRE_PROPOSAL_SINGLE_AMOUNT"'",
         "refund_policy":"'"$PRE_PROPOSAL_SINGLE_REFUND_POLICY"'"
       },
       "open_proposal_submission": '"$PRE_PROPOSAL_SINGLE_OPEN_PROPOSAL_SUBMISSION"'
    }'

    PRE_PROPOSE_INIT_MSG_BASE64=$(json_to_base64 "$PRE_PROPOSE_INIT_MSG")


    # -------------------- PROPOSE-SINGLE { PRE-PROPOSE } --------------------


    PROPOSAL_SINGLE_INIT_MSG='{
       "allow_revoting":'"$PROPOSAL_ALLOW_REVOTING"',
       "pre_propose_info":{
          "module_may_propose":{
             "info":{
                "admin": {
                  "core_module": {}
                },
                "code_id":  '"$PRE_PROPOSAL_CONTRACT_BINARY_ID"',
                "msg":      "'"$PRE_PROPOSE_INIT_MSG_BASE64"'",
                "label":    "'"$PRE_PROPOSAL_SINGLE_LABEL"'"
             }
          }
       },
       "only_members_execute":'"$PROPOSAL_SINGLE_ONLY_MEMBERS_EXECUTE"',
       "max_voting_period":{
          "time":'"$PROPOSAL_SINGLE_ONLY_MAX_VOTING_PERIOD"'
       },
       "close_proposal_on_execution_failure":'"$PROPOSAL_SINGLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE"',
       "threshold":{
          "threshold_quorum":{
             "quorum":{
              "percent":"'"$PROPOSAL_SINGLE_QUORUM"'"
             },
             "threshold":{
                "percent":"'"$PROPOSAL_SINGLE_THRESHOLD"'"
             }
          }
       }
    }'

    PROPOSAL_SINGLE_INIT_MSG_BASE64=$(json_to_base64
    "$PROPOSAL_SINGLE_INIT_MSG")


    # -------------------- PROPOSE-MULTIPLE { PRE-PROPOSE } --------------------


    PROPOSAL_MULTIPLE_INIT_MSG='{
       "allow_revoting":'"$PROPOSAL_MULTIPLE_ALLOW_REVOTING"',
       "pre_propose_info":{
          "module_may_propose":{
             "info":{
                "admin": {
                  "core_module": {}
                },
                "code_id":  '"$PRE_PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID"',
                "msg":      "'"$PRE_PROPOSE_INIT_MSG_BASE64"'",
                "label":    "'"$PRE_PROPOSAL_MULTIPLE_LABEL"'"
             }
          }
       },
       "only_members_execute":'"$PROPOSAL_MULTIPLE_ONLY_MEMBERS_EXECUTE"',
       "max_voting_period":{
          "time":'"$PROPOSAL_MULTIPLE_ONLY_MAX_VOTING_PERIOD"'
       },
       "close_proposal_on_execution_failure": '"$PROPOSAL_MULTIPLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE"',
       "voting_strategy":{
         "single_choice": {
            "quorum": {
              "percent": "'"$PROPOSAL_MULTIPLE_QUORUM"'"
            }
         }
       }
    }'

    PROPOSAL_MULTIPLE_INIT_MSG_BASE64=$(json_to_base64
    "$PROPOSAL_MULTIPLE_INIT_MSG")


    # PRE_PROPOSE_OVERRULE_INIT_MSG will be put into the
    PROPOSAL_OVERRULE_INIT_MSG

    PRE_PROPOSE_OVERRULE_INIT_MSG='{}'

    PRE_PROPOSE_OVERRULE_INIT_MSG_BASE64=$(json_to_base64
    "$PRE_PROPOSE_OVERRULE_INIT_MSG")



    # -------------------- PROPOSE-OVERRULE { PRE-PROPOSE-OVERRULE }
    --------------------


    PROPOSAL_OVERRULE_INIT_MSG='{
       "allow_revoting":'"$PROPOSAL_OVERRULE_ALLOW_REVOTING"',
       "pre_propose_info":{
          "module_may_propose":{
             "info":{
                "admin": {
                  "core_module": {}
                },
                "code_id":  '"$PRE_PROPOSAL_OVERRULE_CONTRACT_BINARY_ID"',
                "msg":      "'"$PRE_PROPOSE_OVERRULE_INIT_MSG_BASE64"'",
                "label":    "'"$PRE_PROPOSE_OVERRULE_LABEL"'"
             }
          }
       },
       "only_members_execute": '"$PROPOSAL_OVERRULE_ONLY_MEMBERS_EXECUTE"',
       "max_voting_period":{
          "time": '"$PROPOSAL_OVERRULE_ONLY_MAX_VOTING_PERIOD"'
       },
       "close_proposal_on_execution_failure": '"$PROPOSAL_OVERRULE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE"',
       "threshold":{
           "absolute_percentage":{
              "percentage":{
                "percent": "'"$PROPOSAL_OVERRULE_THRESHOLD"'"
              }
           }
       }
    }'

    PROPOSAL_OVERRULE_INIT_MSG_BASE64=$(json_to_base64
    "$PROPOSAL_OVERRULE_INIT_MSG")


    VOTING_REGISTRY_INIT_MSG='{
      "owner": "'"$DAO_CONTRACT_ADDRESS"'",
      "voting_vaults": [
        "'"$NEUTRON_VAULT_CONTRACT_ADDRESS"'",
        "'"$NEUTRON_INVESTORS_VAULT_CONTRACT_ADDRESS"'"
      ]
    }'

    VOTING_REGISTRY_INIT_MSG_BASE64=$(json_to_base64
    "$VOTING_REGISTRY_INIT_MSG")


    DAO_INIT='{
      "description": "'"$DAO_DESCRIPTION"'",
      "name": "'"$DAO_NAME"'",
      "proposal_modules_instantiate_info": [
        {
          "admin": {
            "core_module": {}
          },
          "code_id":  '"$PROPOSAL_CONTRACT_BINARY_ID"',
          "label":    "'"$PROPOSAL_SINGLE_LABEL"'",
          "msg":      "'"$PROPOSAL_SINGLE_INIT_MSG_BASE64"'"
        },
        {
          "admin": {
            "core_module": {}
          },
          "code_id":  '"$PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID"',
          "label":    "'"$PROPOSAL_MULTIPLE_LABEL"'",
          "msg":      "'"$PROPOSAL_MULTIPLE_INIT_MSG_BASE64"'"
        },
        {
          "admin": {
            "core_module": {}
          },
          "code_id":  '"$PROPOSAL_CONTRACT_BINARY_ID"',
          "label":    "'"$PROPOSAL_OVERRULE_LABEL"'",
          "msg":      "'"$PROPOSAL_OVERRULE_INIT_MSG_BASE64"'"
        }
      ],
      "voting_registry_module_instantiate_info": {
        "admin": {
          "core_module": {}
        },
        "code_id":  '"$VOTING_REGISTRY_CONTRACT_BINARY_ID"',
        "label":    "'"$VOTING_REGISTRY_LABEL"'",
        "msg":      "'"$VOTING_REGISTRY_INIT_MSG_BASE64"'"
      }
    }'


    # RESERVE

    RESERVE_INIT='{
      "main_dao_address":       "'"$DAO_CONTRACT_ADDRESS"'",
      "security_dao_address":   "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'",
      "denom":                  "'"$STAKEDENOM"'",
      "distribution_rate":      "'"$RESERVE_DISTRIBUTION_RATE"'",
      "min_period":             '"$RESERVE_MIN_PERIOD"',
      "distribution_contract":  "'"$DISTRIBUTION_CONTRACT_ADDRESS"'",
      "treasury_contract":      "'"$DAO_CONTRACT_ADDRESS"'",
      "vesting_denominator":    "'"$RESERVE_VESTING_DENOMINATOR"'"
    }'


    DISTRIBUTION_INIT='{
      "main_dao_address":     "'"$DAO_CONTRACT_ADDRESS"'",
      "security_dao_address": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'",
      "denom":                "'"$STAKEDENOM"'"
    }'


    # VAULTS


    NEUTRON_VAULT_INIT='{
      "owner": "'"$DAO_CONTRACT_ADDRESS"'",
      "name":         "'"$NEUTRON_VAULT_NAME"'",
      "denom":        "'"$STAKEDENOM"'",
      "description":  "'"$NEUTRON_VAULT_DESCRIPTION"'"
    }'


    NEUTRON_INVESTORS_VAULT_INIT='{
         "vesting_contract_address": "'"$NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES"'",
         "owner": "'"$DAO_CONTRACT_ADDRESS"'",
         "description": "'"$NEUTRON_INVESTORS_VAULT_DESCRIPTION"'",
         "name": "'"$NEUTRON_INVESTORS_VAULT_NAME"'"
    }'


    # VESTING

    NEUTRON_VESTING_INVESTORS_INIT='{
        "owner": "'"$ADMIN_ADDRESS"'",
        "token_info_manager": "'"$ADMIN_ADDRESS"'"
    }'


    # CW4 MODULES FOR SUBDAOS


    CW4_VOTE_INIT_MSG='{
      "cw4_group_code_id": '"$CW4_GROUP_CONTRACT_BINARY_ID"',
      "initial_members": [
        {
          "addr": "'"$ADMIN_ADDRESS"'",
          "weight": 1
        },
        {
          "addr": "'"$SECOND_MULTISIG_ADDRESS"'",
          "weight": 1
        }
      ]
    }'

    CW4_VOTE_INIT_MSG_BASE64=$(json_to_base64 "$CW4_VOTE_INIT_MSG")


    # SECURITY_SUBDAO


    # SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG will be put into the
    SECURITY_SUBDAO_PROPOSAL_INIT_MSG

    SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG='{
       "open_proposal_submission": false
    }'

    SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64=$(json_to_base64
    "$SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG")


    SECURITY_SUBDAO_PROPOSAL_INIT_MSG='{
       "allow_revoting": false,
       "pre_propose_info":{
             "module_may_propose":{
                "info":{
                   "admin": {
                         "address": {
                           "addr": "'"$DAO_CONTRACT_ADDRESS"'"
                         }
                   },
                   "code_id": '"$PRE_PROPOSAL_CONTRACT_BINARY_ID"',
                   "msg":     "'"$SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64"'",
                   "label":   "'"$SECURITY_SUBDAO_PRE_PROPOSE_LABEL"'"
                }
             }
          },
       "only_members_execute":false,
       "max_voting_period":{
          "height": 1000000000000
       },
       "close_proposal_on_execution_failure":false,
       "threshold":{
          "absolute_count":{
             "threshold": "1"
          }
       }
    }'

    SECURITY_SUBDAO_PROPOSAL_INIT_MSG_BASE64=$(json_to_base64
    "$SECURITY_SUBDAO_PROPOSAL_INIT_MSG")


    SECURITY_SUBDAO_CORE_INIT_MSG='{
      "name":         "'"$SECURITY_SUBDAO_CORE_NAME"'",
      "description":  "'"$SECURITY_SUBDAO_CORE_DESCRIPTION"'",
      "vote_module_instantiate_info": {
        "admin": {
          "address": {
            "addr": "'"$DAO_CONTRACT_ADDRESS"'"
          }
        },
        "code_id":  '"$CW4_VOTING_CONTRACT_BINARY_ID"',
        "label":    "'"$SECURITY_SUBDAO_VOTE_LABEL"'",
        "msg":      "'"$CW4_VOTE_INIT_MSG_BASE64"'"
      },
      "proposal_modules_instantiate_info": [
        {
          "admin": {
            "address": {
              "addr": "'"$DAO_CONTRACT_ADDRESS"'"
            }
          },
          "code_id":  '"$SUBDAO_PROPOSAL_BINARY_ID"',
          "label":    "'"$SECURITY_SUBDAO_PROPOSAL_LABEL"'",
          "msg":      "'"$SECURITY_SUBDAO_PROPOSAL_INIT_MSG_BASE64"'"
        }
      ],
      "main_dao":     "'"$DAO_CONTRACT_ADDRESS"'",
      "security_dao": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'"
    }'


    # GRANTS_SUBDAO


    GRANTS_SUBDAO_TIMELOCK_INIT_MSG='{
      "overrule_pre_propose": "'"$PRE_PROPOSAL_OVERRULE_CONTRACT_ADDRESS"'"
    }'

    GRANTS_SUBDAO_TIMELOCK_INIT_MSG_BASE64=$(json_to_base64
    "$GRANTS_SUBDAO_TIMELOCK_INIT_MSG")


    GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG='{
      "open_proposal_submission": false,
      "timelock_module_instantiate_info": {
        "admin": {
          "address": {
            "addr": "'"$DAO_CONTRACT_ADDRESS"'"
          }
        },
        "code_id":  '"$SUBDAO_TIMELOCK_BINARY_ID"',
        "label":    "'"$GRANTS_SUBDAO_TIMELOCK_LABEL"'",
        "msg":      "'"$GRANTS_SUBDAO_TIMELOCK_INIT_MSG_BASE64"'"
      }
    }'

    GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64=$(json_to_base64
    "$GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG")


    GRANTS_SUBDAO_PROPOSAL_INIT_MSG='{
       "allow_revoting": false,
       "pre_propose_info":{
          "module_may_propose":{
             "info":{
                "admin": {
                  "address": {
                    "addr": "'"$DAO_CONTRACT_ADDRESS"'"
                  }
                },
                "code_id":  '"$SUBDAO_PRE_PROPOSE_BINARY_ID"',
                "msg":      "'"$GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64"'",
                "label":    "'"$GRANTS_SUBDAO_PRE_PROPOSE_LABEL"'"
             }
          }
       },
       "only_members_execute":false,
       "max_voting_period":{
          "height": 1000000000000
       },
       "close_proposal_on_execution_failure":false,
       "threshold":{
          "absolute_count":{
             "threshold": "2"
          }
       }
    }'

    GRANTS_SUBDAO_PROPOSAL_INIT_MSG_BASE64=$(json_to_base64
    "$GRANTS_SUBDAO_PROPOSAL_INIT_MSG")


    GRANTS_SUBDAO_CORE_INIT_MSG='{
      "name":         "'"$GRANTS_SUBDAO_CORE_NAME"'",
      "description":  "'"$GRANTS_SUBDAO_CORE_DESCRIPTION"'",
      "vote_module_instantiate_info": {
        "admin": {
          "address": {
            "addr": "'"$DAO_CONTRACT_ADDRESS"'"
          }
        },
        "code_id":  '"$CW4_VOTING_CONTRACT_BINARY_ID"',
        "label":    "'"$GRANTS_SUBDAO_VOTING_MODULE_LABEL"'",
        "msg":      "'"$CW4_VOTE_INIT_MSG_BASE64"'"
      },
      "proposal_modules_instantiate_info": [
        {
          "admin": {
            "address": {
              "addr": "'"$DAO_CONTRACT_ADDRESS"'"
            }
          },
          "code_id":  '"$SUBDAO_PROPOSAL_BINARY_ID"',
          "label":    "'"$GRANTS_SUBDAO_PROPOSAL_LABEL"'",
          "msg":      "'"$GRANTS_SUBDAO_PROPOSAL_INIT_MSG_BASE64"'"
        }
      ],
      "main_dao":     "'"$DAO_CONTRACT_ADDRESS"'",
      "security_dao": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'"
    }'


    echo "Instantiate contracts"


    function init_contract() {
      BINARY_ID=$1
      INIT_MSG=$2
      LABEL=$3
      check_json "$INIT_MSG"
      $BINARY add-wasm-message instantiate-contract "$BINARY_ID" "$INIT_MSG" --label "$LABEL" \
        --run-as "$DAO_CONTRACT_ADDRESS" --admin "$DAO_CONTRACT_ADDRESS" --home "$CHAIN_DIR"
    }


    # WARNING!

    # The following code is to add contracts instantiations messages to genesis

    # It affects the section of predicting contracts addresses at the beginning
    of the script

    # If you're to do any changes, please do it consistently in both sections

    init_contract "$NEUTRON_VAULT_CONTRACT_BINARY_ID"           
    "$NEUTRON_VAULT_INIT"             "$NEUTRON_VAULT_LABEL"

    init_contract "$NEUTRON_INVESTORS_VAULT_CONTRACT_BINARY_ID" 
    "$NEUTRON_INVESTORS_VAULT_INIT"   "$NEUTRON_INVESTORS_VAULT_LABEL"

    init_contract "$NEUTRON_VESTING_INVESTORS_BINARY_ID"        
    "$NEUTRON_VESTING_INVESTORS_INIT"  "$NEUTRON_VESTING_INVESTORS_LABEL"

    init_contract "$DAO_CONTRACT_BINARY_ID"                     
    "$DAO_INIT"                       "$DAO_CORE_LABEL"

    init_contract "$RESERVE_CONTRACT_BINARY_ID"                 
    "$RESERVE_INIT"                   "$RESERVE_LABEL"

    init_contract "$DISTRIBUTION_CONTRACT_BINARY_ID"            
    "$DISTRIBUTION_INIT"              "$DISTRIBUTION_LABEL"

    init_contract "$SUBDAO_CORE_BINARY_ID"                      
    "$SECURITY_SUBDAO_CORE_INIT_MSG"  "$SECURITY_SUBDAO_CORE_LABEL"

    init_contract "$SUBDAO_CORE_BINARY_ID"                      
    "$GRANTS_SUBDAO_CORE_INIT_MSG"    "$GRANTS_SUBDAO_CORE_LABEL"


    ADD_SUBDAOS_MSG='{
      "update_sub_daos": {
        "to_add": [
          {
            "addr": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'"
          },
          {
            "addr": "'"$GRANTS_SUBDAO_CORE_CONTRACT_ADDRESS"'"
          }
        ],
        "to_remove": []
      }
    }'

    check_json "$ADD_SUBDAOS_MSG"


    SET_VESTING_TOKEN_MSG='{
        "set_vesting_token": {
          "vesting_token": {
             "native_token": {
               "denom": "'"$STAKEDENOM"'"
             }
          }
        }
    }'


    REGISTER_VESTING_ACCOUNTS_MSG='{
      "register_vesting_accounts": {
        "vesting_accounts": [
          {
            "address": "'"$ADMIN_ADDRESS"'",
            "schedules": [
              {
                "end_point": {
                  "amount": "1000",
                  "time": 1814821200
                },
                "start_point": {
                  "amount": "0",
                  "time": 1720213200
                }
              }
            ]
          }
        ]
      }
    }'


    $BINARY add-wasm-message execute "$DAO_CONTRACT_ADDRESS" "$ADD_SUBDAOS_MSG"
    \
      --run-as "$DAO_CONTRACT_ADDRESS" --home "$CHAIN_DIR"

    $BINARY add-wasm-message execute
    "$NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES" "$SET_VESTING_TOKEN_MSG" \
      --run-as "$ADMIN_ADDRESS" --home "$CHAIN_DIR"

    $BINARY add-wasm-message execute
    "$NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES"
    "$REGISTER_VESTING_ACCOUNTS_MSG" \
      --amount 1000untrn --run-as "$ADMIN_ADDRESS" --home "$CHAIN_DIR"

    function set_genesis_param() {
      param_name=$1
      param_value=$2
      sed -i -e "s;\"$param_name\":.*;\"$param_name\": $param_value;g" "$GENESIS_PATH"
    }


    function set_genesis_param_jq() {
      param_path=$1
      param_value=$2
      jq "${param_path} = ${param_value}" > tmp_genesis_file.json < "$GENESIS_PATH" && mv tmp_genesis_file.json "$GENESIS_PATH"
    }


    function convert_bech32_base64_esc() {
      $BINARY keys parse $1 --output json | jq .bytes | xxd -r -p | base64 | sed -e 's/\//\\\//g'
    }

    DAO_CONTRACT_ADDRESS_B64=$(convert_bech32_base64_esc
    "$DAO_CONTRACT_ADDRESS")

    echo $DAO_CONTRACT_ADDRESS_B64


    set_genesis_param admins                                
    "[\"$DAO_CONTRACT_ADDRESS\"]"                    # admin module

    set_genesis_param treasury_address                      
    "\"$DAO_CONTRACT_ADDRESS\""                      # feeburner

    set_genesis_param fee_collector_address                 
    "\"$DAO_CONTRACT_ADDRESS\""                      # tokenfactory

    set_genesis_param security_address                      
    "\"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS\","    # cron

    set_genesis_param limit                                 
    5                                                # cron

    #set_genesis_param allow_messages                       
    "[\"*\"]"                                        # interchainaccounts

    set_genesis_param signed_blocks_window                  
    "\"$SLASHING_SIGNED_BLOCKS_WINDOW\","            # slashing

    set_genesis_param min_signed_per_window                 
    "\"$SLASHING_MIN_SIGNED\","                      # slashing

    set_genesis_param slash_fraction_double_sign            
    "\"$SLASHING_FRACTION_DOUBLE_SIGN\","            # slashing

    set_genesis_param slash_fraction_downtime               
    "\"$SLASHING_FRACTION_DOWNTIME\""                # slashing

    set_genesis_param minimum_gas_prices                    
    "$MIN_GAS_PRICES,"                               # globalfee

    set_genesis_param max_total_bypass_min_fee_msg_gas_usage
    "\"$MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE\""    # globalfee

    set_genesis_param_jq ".app_state.globalfee.params.bypass_min_fee_msg_types"
    "$BYPASS_MIN_FEE_MSG_TYPES"   # globalfee

    set_genesis_param proposer_fee                         
    "\"0.25\""                                        # builder(POB)

    set_genesis_param escrow_account_address               
    "\"$DAO_CONTRACT_ADDRESS_B64\","                  # builder(POB)

    set_genesis_param sudo_call_gas_limit                  
    "\"1000000\""                                     # contractmanager

    set_genesis_param max_gas                              
    "\"1000000000\""                                  # consensus_params


    if ! jq -e . "$GENESIS_PATH" >/dev/null 2>&1; then
        echo "genesis appears to become incorrect json" >&2
        exit 1
    fi


    echo "DAO $DAO_CONTRACT_ADDRESS"
  updateGenesis.sh: |
    #!/bin/bash

    DENOM="${DENOM:=uosmo}"
    CHAIN_BIN="${CHAIN_BIN:=osmosisd}"
    CHAIN_DIR="${CHAIN_DIR:=$HOME/.osmosisd}"

    set -eux

    ls $CHAIN_DIR/config

    $CHAIN_BIN tendermint show-node-id
  updateConfig.sh: >
    #!/bin/bash


    STAKEDENOM=${DENOM:-untrn}

    CHAIN_ID="${CHAIN_ID:=osmosis}"

    CHAIN_DIR="${CHAIN_DIR:=$HOME/.osmosisd}"

    KEYS_CONFIG="${KEYS_CONFIG:=configs/keys.json}"


    P2PPORT=${P2PPORT:-26656}

    RPCPORT=${RPCPORT:-26657}

    RESTPORT=${RESTPORT:-1317}

    ROSETTA=${ROSETTA:-8080}


    set -eux


    ls $CHAIN_DIR


    sed -i -e 's/timeout_commit = "5s"/timeout_commit = "1s"/g'
    "$CHAIN_DIR/config/config.toml"

    sed -i -e 's/timeout_propose = "3s"/timeout_propose = "1s"/g'
    "$CHAIN_DIR/config/config.toml"

    sed -i -e 's/index_all_keys = false/index_all_keys = true/g'
    "$CHAIN_DIR/config/config.toml"

    sed -i -e 's/enable = false/enable = true/g' "$CHAIN_DIR/config/app.toml"

    sed -i -e 's/swagger = false/swagger = true/g' "$CHAIN_DIR/config/app.toml"

    sed -i -e "s/minimum-gas-prices = \"\"/minimum-gas-prices =
    \"0$STAKEDENOM\"/g" "$CHAIN_DIR/config/app.toml"

    sed -i -e 's/enabled = false/enabled = true/g' "$CHAIN_DIR/config/app.toml"

    sed -i -e 's/prometheus-retention-time = 0/prometheus-retention-time =
    1000/g' "$CHAIN_DIR/config/app.toml"

    sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g'
    "$CHAIN_DIR/config/app.toml"


    sed -i -e 's#"tcp://0.0.0.0:26656"#"tcp://0.0.0.0:'"$P2PPORT"'"#g'
    "$CHAIN_DIR/config/config.toml"

    sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:'"$RPCPORT"'"#g'
    "$CHAIN_DIR/config/config.toml"

    sed -i -e 's#"tcp://localhost:1317"#"tcp://0.0.0.0:'"$RESTPORT"'"#g'
    "$CHAIN_DIR/config/app.toml"

    sed -i -e 's#"tcp://0.0.0.0:1317"#"tcp://0.0.0.0:'"$RESTPORT"'"#g'
    "$CHAIN_DIR/config/app.toml"

    sed -i -e 's#":8080"#":'"$ROSETTA"'"#g' "$CHAIN_DIR/config/app.toml"

    sed -i -e 's#localhost#0.0.0.0#g' "$CHAIN_DIR/config/app.toml"


    echo "Update client.toml file"

    sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g'
    $CHAIN_DIR/config/client.toml

    sed -i -e 's#output = "text"#output = "json"#g'
    $CHAIN_DIR/config/client.toml

    sed -i -e "s#chain-id = \"\"#chain-id = \"$CHAIN_ID\"#g"
    $CHAIN_DIR/config/client.toml
  create-validator.sh: >
    #!/bin/bash


    DENOM="${DENOM:=uosmo}"

    CHAIN_BIN="${CHAIN_BIN:=osmosisd}"

    CHAIN_DIR="${CHAIN_DIR:=$HOME/.osmosisd}"

    KEYS_CONFIG="${KEYS_CONFIG:=configs/keys.json}"

    VAL_NAME="${VAL_NAME:=osmosis}"

    NODE_URL="${NODE_URL:=http://0.0.0.0:26657}"

    NODE_ARGS="${NODE_ARGS}"

    GAS="${GAS:=auto}"


    set -eux


    # Wait for the node to be synced

    max_tries=10

    while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq
    ".SyncInfo.catching_up") == true ]]

    do
      if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
      echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
      ((max_tries--))
      sleep 30
    done


    # Function to compare version numbers

    version_compare() {
        version1="$1"
        version2="$2"
        if [[ "$(printf '%s\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
            return 1 # version1 is greater
        else
            return 0 # version2 is greater or equal
        fi
    }


    # Check if cosmos_sdk_version is greater than a specified version

    is_greater() {
        version_compare "$1" "$2"
        return $?
    }


    function cosmos-sdk-version-v50() {
      # Content for the validator.json file
      json_content='{
        "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
        "amount": "5000000000'$DENOM'",
        "moniker": "'$VAL_NAME'",
        "commission-rate": "0.1",
        "commission-max-rate": "0.2",
        "commission-max-change-rate": "0.01",
        "min-self-delegation": "1000000"
      }'
      echo "$json_content" > /validator.json
      cat /validator.json

      # Run create validator tx command
      echo "Running txn for create-validator"
      $CHAIN_BIN tx staking create-validator /validator.json \
        --node $NODE_URL \
        --chain-id $CHAIN_ID \
        --from $VAL_NAME \
        --fees 100000$DENOM \
        --keyring-backend="test" \
        --output json \
        --gas $GAS \
        --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

      cat /validator.log | jq
    }


    function cosmos-sdk-version-default() {
      # Run create validator tx command
      echo "Running txn for create-validator"
      args=''
      if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
      then
        args+='--min-self-delegation=1000000'
      fi
      $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
      $CHAIN_BIN tx staking create-validator \
        --node $NODE_URL \
        --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \
        --moniker $VAL_NAME \
        --amount 5000000000$DENOM \
        --chain-id $CHAIN_ID \
        --from $VAL_NAME \
        --commission-rate="0.10" \
        --commission-max-rate="0.20" \
        --commission-max-change-rate="0.01" \
        --keyring-backend test \
        --home $CHAIN_DIR \
        --fees 100000$DENOM \
        --gas $GAS \
        --output json \
        --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

      cat /validator.log | jq
    }


    set +e

    # Fetch the cosmos-sdk version to be able to perform the create-validator tx

    cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n
    's/cosmos_sdk_version: \(.*\)/\1/p')

    echo "cosmos_sdk_version: $cosmos_sdk_version"

    set -e


    if is_greater "$cosmos_sdk_version" "v0.50.0"; then
      echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
      cosmos-sdk-version-v50
    else
      echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
      cosmos-sdk-version-default
    fi
  transfer-tokens.sh: |
    #!/bin/bash

    ADDRESS="$1"
    DENOM="$2"
    FAUCET_URL="$3"
    FAUCET_ENABLED="$4"

    set -eux

    function transfer_token() {
      status_code=$(curl --header "Content-Type: application/json" \
        --request POST --write-out %{http_code} --silent --output /dev/null \
        --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \
        $FAUCET_URL)
      echo $status_code
    }

    if [[ $FAUCET_ENABLED == "false" ]];
    then
      echo "Faucet not enabled... skipping transfer token from faucet"
      exit 0
    fi

    echo "Try to send tokens, if failed, wait for 5 seconds and try again"
    max_tries=5
    while [[ max_tries -gt 0 ]]
    do
      status_code=$(transfer_token)
      if [[ "$status_code" -eq 200 ]]; then
        echo "Successfully sent tokens"
        exit 0
      fi
      echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
      ((max_tries--))
      sleep 2
    done
  build-chain.sh: >
    #!/bin/bash


    set -euxo pipefail


    mkdir -p /tmp/chains $UPGRADE_DIR


    echo "Fetching code from tag"

    mkdir -p /tmp/chains/$CHAIN_NAME

    cd /tmp/chains/$CHAIN_NAME


    if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
      echo "Trying to fetch code from commit hash"
      curl -LO $CODE_REPO/archive/$CODE_TAG.zip
      unzip $CODE_TAG.zip
      code_dir=${CODE_REPO##*/}-${CODE_TAG}
    elif [[ $CODE_TAG = v* ]]; then
      echo "Trying to fetch code from tag with 'v' prefix"
      curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
      unzip $CODE_TAG.zip
      code_dir=${CODE_REPO##*/}-${CODE_TAG#"v"}
    else
      echo "Trying to fetch code from tag or branch"
      if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
        unzip $CODE_TAG.zip
        code_dir=${CODE_REPO##*/}-$CODE_TAG
      elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
        unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
        code_dir=${CODE_REPO##*/}-${CODE_TAG/\//-}
      else
        echo "Tag or branch '$CODE_TAG' not found"
        exit 1
      fi
    fi


    echo "Fetch wasmvm if needed"

    cd /tmp/chains/$CHAIN_NAME/$code_dir

    WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" |
    cut -d ' ' -f 2)

    if [[ WASM_VERSION != "" ]]; then
      mkdir -p /tmp/chains/libwasmvm_muslc
      cd /tmp/chains/libwasmvm_muslc
      curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
      cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
    fi


    echo "Build chain binary"

    cd /tmp/chains/$CHAIN_NAME/$code_dir

    CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true
    LEDGER_ENABLED=false make install


    echo "Copy created binary to the upgrade directories"

    if [[ $UPGRADE_NAME == "genesis" ]]; then
      mkdir -p $UPGRADE_DIR/genesis/bin
      cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
    else
      mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
      cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
    fi


    echo "Cleanup"

    rm -rf /tmp/chains/$CHAIN_NAME
  chain-rpc-ready.sh: >
    #!/bin/bash

    # chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is
    ready

    # Usage: chain-rpc-ready.sh [RPC_URL]


    set -euo pipefail


    RPC_URL=${1:-"http://localhost:26657"}


    echo 1>&2 "Checking if $RPC_URL is ready..."


    # Check if the RPC URL is reachable,

    json=$(curl -s --connect-timeout 2 "$RPC_URL/status")


    # and the bootstrap block state has been validated,

    if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height <
    .latest_block_height)')" != true ]; then
      echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
      exit 1
    fi


    # and the node is not catching up.

    if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ];
    then
      echo 1>&2 "$RPC_URL is not ready: node is catching up"
      exit 1
    fi


    echo "$json" | jq -r .result

    exit 0
  ibc-connection.sh: |
    #!/bin/bash

    REGISTRY_URL="$1"
    CHAIN_1="$2"
    CHAIN_2="$3"

    set -eux

    function connection_id() {
      CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
      echo $CONNECTION_ID
    }

    echo "Try to get connection id, if failed, wait for 2 seconds and try again"
    max_tries=20
    while [[ max_tries -gt 0 ]]
    do
      id=$(connection_id)
      if [[ -n "$id" ]]; then
        echo "Found connection id: $id"
        exit 0
      fi
      echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
      ((max_tries--))
      sleep 10
    done
  create-ics.sh: |
    #!/bin/bash

    set -euxo pipefail

    DENOM="${DENOM:=uatom}"
    CHAIN_ID="${CHAIN_ID:=cosmoshub-1}"
    CHAIN_BIN="${CHAIN_BIN:=gaiad}"
    NODE_URL="${NODE_URL:=http://0.0.0.0:26657}"
    KEYS_CONFIG="${KEYS_CONFIG:=configs/keys.json}"

    PROPOSAL_FILE="${PROPOSAL_FILE}"
    KEY_NAME="ics-setup"
    MAX_RETRIES=3
    RETRY_INTERVAL=30
    SUBMIT_PROPOSAL_CMD=""

    add_key() {
      # Add test keys to the keyring and self delegate initial coins
      echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
      jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
      echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
    }

    get_validator_address() {
      echo "Getting validator address..."
      VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
      echo "Selected validator address: $VALIDATOR_ADDRESS"
    }

    stake_tokens() {
      COINS="10000000$DENOM"
      echo "Staking tokens..."
      $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes
      sleep 5
    }

    determine_proposal_command() {
      echo "Determining the correct command to submit proposals..."
      HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
      if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
        SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
      else
        SUBMIT_PROPOSAL_CMD="submit-proposal"
      fi
      echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
    }

    submit_proposal() {
      echo "Get all proposals"
      PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
      if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
        echo "No existing proposals found. Proceeding to submit a new proposal."
      else
        echo "Existing proposals: $PROPOSALS_OUTPUT"
      fi

      echo "Submit gov proposal on chain"
      PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes)
      echo $PROPOSAL_TX

      # Extract JSON part from the output
      TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
      if [ -n "$TX_HASH" ]; then
        echo "Transaction hash: $TX_HASH"
      else
        echo "Failed to submit proposal. Output was not as expected."
        exit 1
      fi

      sleep 5
    }

    get_proposal_id() {
      echo "Getting proposal ID"
      PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
      LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
      if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
        PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
        if [ -n "$PROPOSAL_ID" ]; then
          echo "Proposal ID: $PROPOSAL_ID"
          return 0
        fi
      fi
      echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
      exit 1
    }

    vote_proposal() {
      echo "Voting on proposal"
      $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes
      sleep 5
    }

    wait_for_proposal_to_pass() {
      echo "Waiting for proposal to pass"
      for ((i=1; i<=$MAX_RETRIES; i++)); do
        STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
        if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
          echo "Proposal has passed!"
          return 0
        else
          echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
          sleep $RETRY_INTERVAL
        fi
      done
      echo "Proposal did not pass after $MAX_RETRIES attempts."
      exit 1
    }

    main() {
      add_key
      get_validator_address
      stake_tokens
      determine_proposal_command
      submit_proposal
      get_proposal_id
      vote_proposal
      wait_for_proposal_to_pass
    }

    main
