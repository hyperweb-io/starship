apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: go-relayer-osmos-cosmos
  labels:
    starship.io/name: starship-e2e-tests
    app.kubernetes.io/version: 4.0.0-alpha.0
    app.kubernetes.io/managed-by: starship
    app.kubernetes.io/component: relayer
    app.kubernetes.io/part-of: starship
    app.kubernetes.io/role: go-relayer
    app.kubernetes.io/name: go-relayer-osmos-cosmos
spec:
  serviceName: go-relayer-osmos-cosmos
  replicas: 1
  podManagementPolicy: Parallel
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: relayer
      app.kubernetes.io/type: go-relayer
      app.kubernetes.io/name: go-relayer-osmos-cosmos
  template:
    metadata:
      annotations:
        quality: release
        role: api-gateway
        sla: high
        tier: gateway
      labels:
        app.kubernetes.io/instance: relayer
        app.kubernetes.io/type: go-relayer
        app.kubernetes.io/name: go-relayer-osmos-cosmos
        app.kubernetes.io/rawname: osmos-cosmos
        app.kubernetes.io/version: 4.0.0-alpha.0
    spec:
      initContainers:
        - name: wait-for-chains
          image: curlimages/curl:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: GENESIS_PORT
              value: '8081'
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - /bin/sh
            - '-c'
            - |-

              while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
                echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
                echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
                sleep 10;
              done

              while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
                echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
                echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
                sleep 10;
              done
              echo "Ready to start"
              exit 0
          resources:
            limits:
              cpu: '0.1'
              memory: 100M
            requests:
              cpu: '0.1'
              memory: 100M
        - name: init-relayer
          image: ghcr.io/cosmology-tech/starship/go-relayer:v2.4.1
          imagePullPolicy: IfNotPresent
          env:
            - name: KEYS_CONFIG
              value: /keys/keys.json
            - name: RELAYER_DIR
              value: /root/.relayer
            - name: RELAYER_INDEX
              value: ${HOSTNAME##*-}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - bash
            - '-c'
          args:
            - |
              set -ux

              RLY_INDEX=${HOSTNAME##*-}
              echo "Relayer Index: $RLY_INDEX"

              mkdir -p $RELAYER_DIR/config
              cp /configs/path.json $RELAYER_DIR/config/

              MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)


              echo "Setting up chain osmosis-1..."
              cp /configs/osmosis-1.json $RELAYER_DIR/config/
              rly chains add --file /configs/osmosis-1.json osmosis-1

              echo "Creating key for osmosis-1..."
              echo "$MNEMONIC" | rly keys restore osmosis-1 osmosis-1 --restore-key-type secp256k1 --coin-type 118

              DENOM="uosmo"
              RLY_ADDR=$(rly keys show osmosis-1 osmosis-1)

              echo "Transfer tokens to address $RLY_ADDR"
              bash -e /scripts/transfer-tokens.sh \
                $RLY_ADDR \
                $DENOM \
                http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \
                "true" || true

              echo "Setting up chain cosmoshub-4..."
              cp /configs/cosmoshub-4.json $RELAYER_DIR/config/
              rly chains add --file /configs/cosmoshub-4.json cosmoshub-4

              echo "Creating key for cosmoshub-4..."
              echo "$MNEMONIC" | rly keys restore cosmoshub-4 cosmoshub-4 --restore-key-type secp256k1 --coin-type 118

              DENOM="uatom"
              RLY_ADDR=$(rly keys show cosmoshub-4 cosmoshub-4)

              echo "Transfer tokens to address $RLY_ADDR"
              bash -e /scripts/transfer-tokens.sh \
                $RLY_ADDR \
                $DENOM \
                http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \
                "true" || true

              echo "Adding paths..."
              rly paths add --file /configs/path.json


              echo "Creating client, connection and channel for path0..."
              rly tx link path0 --src-port transfer --dst-port transfer
          resources:
            limits:
              cpu: '0.2'
              memory: 200M
            requests:
              cpu: '0.2'
              memory: 200M
          volumeMounts:
            - mountPath: /root
              name: relayer
            - mountPath: /configs
              name: relayer-config
            - mountPath: /keys
              name: keys
            - mountPath: /scripts
              name: scripts
      containers:
        - name: relayer
          image: ghcr.io/cosmology-tech/starship/go-relayer:v2.4.1
          imagePullPolicy: IfNotPresent
          env:
            - name: RELAYER_DIR
              value: /root/.relayer
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - bash
            - '-c'
          args:
            - |-
              RLY_INDEX=${HOSTNAME##*-}
              echo "Relayer Index: $RLY_INDEX"
              rly start
          resources:
            limits:
              cpu: '0.2'
              memory: 200M
            requests:
              cpu: '0.2'
              memory: 200M
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 0
          volumeMounts:
            - mountPath: /root
              name: relayer
            - mountPath: /configs
              name: relayer-config
      volumes:
        - name: relayer
          emptyDir: {}
        - name: relayer-config
          configMap:
            name: go-relayer-osmos-cosmos
        - name: keys
          configMap:
            name: keys
        - name: scripts
          configMap:
            name: setup-scripts
