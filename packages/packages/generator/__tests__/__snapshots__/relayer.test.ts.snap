// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RelayerBuilder Advanced Relayer Configurations should handle different relayer configurations: all-relayer-types-manifests 1`] = `
[
  {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "debug"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3001

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1-cli"

rpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "debug"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3001

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-hermes-relay",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-hermes-relay",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-hermes-relay",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-hermes-relay",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3001,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-hermes-relay",
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-hermes-relay",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-hermes-relay",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-hermes-relay",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-hermes-relay",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-hermes-relay",
            "app.kubernetes.io/rawname": "hermes-relay",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/cosmology-tech/starship/exposer:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "args": [
                "echo "Waiting for osmosis-1 service..."
wait-for-service osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-osmosis-1",
            },
            {
              "args": [
                "echo "Waiting for cosmoshub-4 service..."
wait-for-service cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-cosmoshub-4",
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for osmosis-1..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name osmosis-1 \\
  --hd-path "m/44'/118'/0'/0/0"

DENOM="undefined"
RLY_ADDR=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"

DENOM="undefined"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-hermes-relay",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "cosmoshub-4.json": "{
  "type": "cosmos",
  "value": {
    "key": "cosmoshub-4",
    "chain-id": "cosmoshub-4",
    "rpc-addr": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
    "keyring-backend": "test",
    "gas-adjustment": 1.2,
    "gas-prices": "0.01undefined",
    "min-gas-amount": 0,
    "debug": false,
    "timeout": "20s",
    "block-timeout": "",
    "output-format": "json",
    "sign-mode": "direct",
    "extra-codecs": []
  }
}",
      "osmosis-1.json": "{
  "type": "cosmos",
  "value": {
    "key": "osmosis-1",
    "chain-id": "osmosis-1",
    "rpc-addr": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
    "keyring-backend": "test",
    "gas-adjustment": 1.2,
    "gas-prices": "0.01undefined",
    "min-gas-amount": 0,
    "debug": false,
    "timeout": "20s",
    "block-timeout": "",
    "output-format": "json",
    "sign-mode": "direct",
    "extra-codecs": []
  }
}",
      "path.json": "{
  "paths": {
    "path": {
      "src": {
        "chain-id": "osmosis-1",
        "client-id": "",
        "connection-id": "",
        "channel-id": "",
        "port-id": "transfer"
      },
      "dst": {
        "chain-id": "cosmoshub-4",
        "client-id": "",
        "connection-id": "",
        "channel-id": "",
        "port-id": "transfer"
      },
      "src-channel-filter": {
        "rule": null,
        "channel-list": []
      }
    }
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "go-relayer-go-relay",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "go-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "go-relayer-go-relay",
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "go-relayer-go-relay",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "go-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "go-relayer-go-relay",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 2,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "go-relayer-go-relay",
          "app.kubernetes.io/type": "go-relayer",
        },
      },
      "serviceName": "go-relayer-go-relay",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "go-relayer-go-relay",
            "app.kubernetes.io/rawname": "go-relay",
            "app.kubernetes.io/type": "go-relayer",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
rly start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.relayer",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/go-relayer:v2.4.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "echo "Waiting for osmosis-1 service..."
wait-for-service osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-osmosis-1",
            },
            {
              "args": [
                "echo "Waiting for cosmoshub-4 service..."
wait-for-service cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-cosmoshub-4",
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR/config
cp /configs/path.json $RELAYER_DIR/config/

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)


echo "Setting up chain osmosis-1..."
cp /configs/osmosis-1.json $RELAYER_DIR/config/
rly chains add --file /configs/osmosis-1.json osmosis-1

echo "Creating key for osmosis-1..."
echo "$MNEMONIC" | rly keys restore osmosis-1 osmosis-1 --restore-key-type secp256k1 --coin-type 118

DENOM="undefined"
RLY_ADDR=$(rly keys show osmosis-1 osmosis-1)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Setting up chain cosmoshub-4..."
cp /configs/cosmoshub-4.json $RELAYER_DIR/config/
rly chains add --file /configs/cosmoshub-4.json cosmoshub-4

echo "Creating key for cosmoshub-4..."
echo "$MNEMONIC" | rly keys restore cosmoshub-4 cosmoshub-4 --restore-key-type secp256k1 --coin-type 118

DENOM="undefined"
RLY_ADDR=$(rly keys show cosmoshub-4 cosmoshub-4)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.relayer",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/go-relayer:v2.4.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "go-relayer-go-relay",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "app.yaml": "# TS Relayer Configuration
global: {
  "api_port": 3000,
  "timeout": 10000,
  "memo": ""
}

chains: {
  "osmosis-1": {
    "chain_id": "osmosis-1",
    "rpc": [
      "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
    ],
    "rest": [
      "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:1317"
    ],
    "chain_name": "osmosis",
    "pretty_name": "osmosis",
    "decimals": 6,
    "gas_price": "0.01",
    "hd_path": "m/44'/118'/0'/0/0"
  },
  "neutron-1": {
    "chain_id": "neutron-1",
    "rpc": [
      "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
    ],
    "rest": [
      "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:1317"
    ],
    "chain_name": "neutron",
    "pretty_name": "neutron",
    "prefix": "neutron",
    "denom": "untrn",
    "decimals": 6,
    "gas_price": "0.01",
    "hd_path": "m/44'/118'/0'/0/0"
  }
}

cl: []",
      "registry.yaml": "# Chain Registry Configuration
chains:
  - chain_name: "osmosis"
    chain_id: "osmosis-1"
    pretty_name: "osmosis"
    status: "live"
    network_type: "testnet"
    bech32_prefix: undefined
    daemon_name: "gaiad"
    node_home: "$HOME/.gaia"
    key_algos: [
    "secp256k1"
]
    slip44: 118
    fees: {
    "fee_tokens": [
        {
            "fixed_min_gas_price": 0.01,
            "low_gas_price": 0.01,
            "average_gas_price": 0.01,
            "high_gas_price": 0.01
        }
    ]
}
    staking: {
    "staking_tokens": [
        {}
    ]
}
    codebase: {
    "git_repo": "",
    "recommended_version": "",
    "compatible_versions": [],
    "genesis": {
        "genesis_url": ""
    }
}
    apis: {
    "rpc": [
        {
            "address": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
            "provider": "starship"
        }
    ],
    "rest": [
        {
            "address": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:1317",
            "provider": "starship"
        }
    ]
}
    explorers: []
  - chain_name: "neutron"
    chain_id: "neutron-1"
    pretty_name: "neutron"
    status: "live"
    network_type: "testnet"
    bech32_prefix: "neutron"
    daemon_name: "gaiad"
    node_home: "$HOME/.gaia"
    key_algos: [
    "secp256k1"
]
    slip44: 118
    fees: {
    "fee_tokens": [
        {
            "denom": "untrn",
            "fixed_min_gas_price": 0.01,
            "low_gas_price": 0.01,
            "average_gas_price": 0.01,
            "high_gas_price": 0.01
        }
    ]
}
    staking: {
    "staking_tokens": [
        {
            "denom": "untrn"
        }
    ]
}
    codebase: {
    "git_repo": "",
    "recommended_version": "",
    "compatible_versions": [],
    "genesis": {
        "genesis_url": ""
    }
}
    apis: {
    "rpc": [
        {
            "address": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
            "provider": "starship"
        }
    ],
    "rest": [
        {
            "address": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:1317",
            "provider": "starship"
        }
    ]
}
    explorers: []",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "ts-relayer-ts-relay",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "ts-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "ts-relayer-ts-relay",
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "ts-relayer-ts-relay",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "ts-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "ts-relayer-ts-relay",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "ts-relayer-ts-relay",
          "app.kubernetes.io/type": "ts-relayer",
        },
      },
      "serviceName": "ts-relayer-ts-relay",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "ts-relayer-ts-relay",
            "app.kubernetes.io/rawname": "ts-relay",
            "app.kubernetes.io/type": "ts-relayer",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
ts-relayer start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.ts-relayer",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/ts-relayer:0.9.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "echo "Waiting for osmosis-1 service..."
wait-for-service osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-osmosis-1",
            },
            {
              "args": [
                "echo "Waiting for neutron-1 service..."
wait-for-service neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-neutron-1",
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/app.yaml $RELAYER_DIR/
cp /configs/registry.yaml $RELAYER_DIR/

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)


echo "Creating key for osmosis-1..."
echo "$MNEMONIC" | ts-relayer keys restore osmosis-1 --hd-path "m/44'/118'/0'/0/0"

DENOM="undefined"
RLY_ADDR=$(ts-relayer keys show osmosis-1)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for neutron-1..."
echo "$MNEMONIC" | ts-relayer keys restore neutron-1 --hd-path "m/44'/118'/0'/0/0"

DENOM="untrn"
RLY_ADDR=$(ts-relayer keys show neutron-1)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.ts-relayer",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/ts-relayer:0.9.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "ts-relayer-ts-relay",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "config.json": "{
  "relayer": {
    "neutron_chain": {
      "chain_id": "neutron-1",
      "rpc_addr": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
      "grpc_addr": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:9090",
      "websocket_addr": "ws://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657/websocket",
      "account_prefix": "neutron",
      "keyring_backend": "test",
      "gas_prices": "0.025untrn",
      "gas_adjustment": 1.5,
      "connection_id": "connection-0",
      "debug": false,
      "timeout": "10s",
      "tx_memo": "neutron-query-relayer"
    },
    "target_chain": {
      "chain_id": "osmosis-1",
      "rpc_addr": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
      "grpc_addr": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9090",
      "websocket_addr": "ws://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657/websocket",
      "keyring_backend": "test",
      "gas_prices": "0.025undefined",
      "gas_adjustment": 1.5,
      "connection_id": "connection-0",
      "debug": false,
      "timeout": "10s",
      "tx_memo": "neutron-query-relayer"
    },
    "queries_file": "/configs/queries.json",
    "check_submitted_tx": true,
    "storage_path": "./storage",
    "log_level": "info"
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-query-relayer-neutron-query-relay",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "neutron-query-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "neutron-query-relayer-neutron-query-relay",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-query-relayer-neutron-query-relay",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "neutron-query-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "neutron-query-relayer-neutron-query-relay",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "metrics",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "neutron-query-relayer-neutron-query-relay",
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-query-relayer-neutron-query-relay",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "neutron-query-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "neutron-query-relayer-neutron-query-relay",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "neutron-query-relayer-neutron-query-relay",
          "app.kubernetes.io/type": "neutron-query-relayer",
        },
      },
      "serviceName": "neutron-query-relayer-neutron-query-relay",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "neutron-query-relayer-neutron-query-relay",
            "app.kubernetes.io/rawname": "neutron-query-relay",
            "app.kubernetes.io/type": "neutron-query-relayer",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
neutron-query-relayer start --config /configs/config.json",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "CONFIG_PATH",
                  "value": "/configs/config.json",
                },
                {
                  "name": "STORAGE_PATH",
                  "value": "./storage",
                },
                {
                  "name": "LOG_LEVEL",
                  "value": "info",
                },
                {
                  "name": "METRICS_PORT",
                  "value": "9090",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron-query-relayer:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "echo "Waiting for neutron-1 service..."
wait-for-service neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-neutron-1",
            },
            {
              "args": [
                "echo "Waiting for osmosis-1 service..."
wait-for-service osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-osmosis-1",
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $STORAGE_PATH

NEUTRON_MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
TARGET_MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)


echo "Setting up keys for neutron-1..."
# Keys will be managed through environment variables for neutron-query-relayer

DENOM="untrn"
# For neutron-query-relayer, we need to derive the address from mnemonic
# This will be handled by the relayer binary itself

echo "Chain neutron-1 setup completed"

echo "Setting up keys for osmosis-1..."
# Keys will be managed through environment variables for neutron-query-relayer

DENOM="undefined"
# For neutron-query-relayer, we need to derive the address from mnemonic
# This will be handled by the relayer binary itself

echo "Chain osmosis-1 setup completed"
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "CONFIG_PATH",
                  "value": "/configs/config.json",
                },
                {
                  "name": "STORAGE_PATH",
                  "value": "./storage",
                },
                {
                  "name": "LOG_LEVEL",
                  "value": "info",
                },
                {
                  "name": "METRICS_PORT",
                  "value": "9090",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron-query-relayer:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "neutron-query-relayer-neutron-query-relay",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`RelayerBuilder Advanced Relayer Configurations should handle multiple relayers: multiple-relayers-manifests 1`] = `
[
  {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = false
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1-cli"

rpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = false
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-osmos-cosmos",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-osmos-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-osmos-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-osmos-cosmos",
            "app.kubernetes.io/rawname": "osmos-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/cosmology-tech/starship/exposer:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "args": [
                "echo "Waiting for osmosis-1 service..."
wait-for-service osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-osmosis-1",
            },
            {
              "args": [
                "echo "Waiting for cosmoshub-4 service..."
wait-for-service cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-cosmoshub-4",
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for osmosis-1..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name osmosis-1 \\
  --hd-path "m/44'/118'/0'/0/0"

DENOM="undefined"
RLY_ADDR=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"

DENOM="undefined"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-osmos-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
  {
    "apiVersion": "v1",
    "data": {
      "cosmoshub-4.json": "{
  "type": "cosmos",
  "value": {
    "key": "cosmoshub-4",
    "chain-id": "cosmoshub-4",
    "rpc-addr": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
    "keyring-backend": "test",
    "gas-adjustment": 1.2,
    "gas-prices": "0.01undefined",
    "min-gas-amount": 0,
    "debug": false,
    "timeout": "20s",
    "block-timeout": "",
    "output-format": "json",
    "sign-mode": "direct",
    "extra-codecs": []
  }
}",
      "osmosis-1.json": "{
  "type": "cosmos",
  "value": {
    "key": "osmosis-1",
    "chain-id": "osmosis-1",
    "rpc-addr": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
    "keyring-backend": "test",
    "gas-adjustment": 1.2,
    "gas-prices": "0.01undefined",
    "min-gas-amount": 0,
    "debug": false,
    "timeout": "20s",
    "block-timeout": "",
    "output-format": "json",
    "sign-mode": "direct",
    "extra-codecs": []
  }
}",
      "path.json": "{
  "paths": {
    "path": {
      "src": {
        "chain-id": "osmosis-1",
        "client-id": "",
        "connection-id": "",
        "channel-id": "",
        "port-id": "transfer"
      },
      "dst": {
        "chain-id": "cosmoshub-4",
        "client-id": "",
        "connection-id": "",
        "channel-id": "",
        "port-id": "transfer"
      },
      "src-channel-filter": {
        "rule": null,
        "channel-list": []
      }
    }
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "go-relayer-go-rly",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "go-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "go-relayer-go-rly",
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "go-relayer-go-rly",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "go-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "go-relayer-go-rly",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "go-relayer-go-rly",
          "app.kubernetes.io/type": "go-relayer",
        },
      },
      "serviceName": "go-relayer-go-rly",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "go-relayer-go-rly",
            "app.kubernetes.io/rawname": "go-rly",
            "app.kubernetes.io/type": "go-relayer",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
rly start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.relayer",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/go-relayer:v2.4.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "echo "Waiting for osmosis-1 service..."
wait-for-service osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-osmosis-1",
            },
            {
              "args": [
                "echo "Waiting for cosmoshub-4 service..."
wait-for-service cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-cosmoshub-4",
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR/config
cp /configs/path.json $RELAYER_DIR/config/

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)


echo "Setting up chain osmosis-1..."
cp /configs/osmosis-1.json $RELAYER_DIR/config/
rly chains add --file /configs/osmosis-1.json osmosis-1

echo "Creating key for osmosis-1..."
echo "$MNEMONIC" | rly keys restore osmosis-1 osmosis-1 --restore-key-type secp256k1 --coin-type 118

DENOM="undefined"
RLY_ADDR=$(rly keys show osmosis-1 osmosis-1)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Setting up chain cosmoshub-4..."
cp /configs/cosmoshub-4.json $RELAYER_DIR/config/
rly chains add --file /configs/cosmoshub-4.json cosmoshub-4

echo "Creating key for cosmoshub-4..."
echo "$MNEMONIC" | rly keys restore cosmoshub-4 cosmoshub-4 --restore-key-type secp256k1 --coin-type 118

DENOM="undefined"
RLY_ADDR=$(rly keys show cosmoshub-4 cosmoshub-4)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.relayer",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/go-relayer:v2.4.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "go-relayer-go-rly",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`RelayerBuilder Advanced Relayer Configurations should use custom image when provided: custom-image-relayer-manifests 1`] = `
[
  {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = false
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1-cli"

rpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = false
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-custom-hermes",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-custom-hermes",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-custom-hermes",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-custom-hermes",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-custom-hermes",
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-custom-hermes",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-custom-hermes",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-custom-hermes",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-custom-hermes",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-custom-hermes",
            "app.kubernetes.io/rawname": "custom-hermes",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
              ],
              "image": "custom/hermes:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "custom/hermes:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/cosmology-tech/starship/exposer:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "args": [
                "echo "Waiting for osmosis-1 service..."
wait-for-service osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-osmosis-1",
            },
            {
              "args": [
                "echo "Waiting for cosmoshub-4 service..."
wait-for-service cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-cosmoshub-4",
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for osmosis-1..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name osmosis-1 \\
  --hd-path "m/44'/118'/0'/0/0"

DENOM="undefined"
RLY_ADDR=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"

DENOM="undefined"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "custom/hermes:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-custom-hermes",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`RelayerBuilder Basic Relayer Generation should generate manifests for a go-relayer: go-relayer-manifests 1`] = `
[
  {
    "apiVersion": "v1",
    "data": {
      "cosmoshub-4.json": "{
  "type": "cosmos",
  "value": {
    "key": "cosmoshub-4",
    "chain-id": "cosmoshub-4",
    "rpc-addr": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
    "keyring-backend": "test",
    "gas-adjustment": 1.2,
    "gas-prices": "0.01undefined",
    "min-gas-amount": 0,
    "debug": false,
    "timeout": "20s",
    "block-timeout": "",
    "output-format": "json",
    "sign-mode": "direct",
    "extra-codecs": []
  }
}",
      "osmosis-1.json": "{
  "type": "cosmos",
  "value": {
    "key": "osmosis-1",
    "chain-id": "osmosis-1",
    "rpc-addr": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
    "keyring-backend": "test",
    "gas-adjustment": 1.2,
    "gas-prices": "0.01undefined",
    "min-gas-amount": 0,
    "debug": false,
    "timeout": "20s",
    "block-timeout": "",
    "output-format": "json",
    "sign-mode": "direct",
    "extra-codecs": []
  }
}",
      "path.json": "{
  "paths": {
    "path": {
      "src": {
        "chain-id": "osmosis-1",
        "client-id": "",
        "connection-id": "",
        "channel-id": "",
        "port-id": "transfer"
      },
      "dst": {
        "chain-id": "cosmoshub-4",
        "client-id": "",
        "connection-id": "",
        "channel-id": "",
        "port-id": "transfer"
      },
      "src-channel-filter": {
        "rule": null,
        "channel-list": []
      }
    }
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "go-relayer-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "go-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "go-relayer-osmos-cosmos",
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "go-relayer-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "go-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "go-relayer-osmos-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "go-relayer-osmos-cosmos",
          "app.kubernetes.io/type": "go-relayer",
        },
      },
      "serviceName": "go-relayer-osmos-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "go-relayer-osmos-cosmos",
            "app.kubernetes.io/rawname": "osmos-cosmos",
            "app.kubernetes.io/type": "go-relayer",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
rly start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.relayer",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/go-relayer:v2.4.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "echo "Waiting for osmosis-1 service..."
wait-for-service osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-osmosis-1",
            },
            {
              "args": [
                "echo "Waiting for cosmoshub-4 service..."
wait-for-service cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-cosmoshub-4",
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR/config
cp /configs/path.json $RELAYER_DIR/config/

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)


echo "Setting up chain osmosis-1..."
cp /configs/osmosis-1.json $RELAYER_DIR/config/
rly chains add --file /configs/osmosis-1.json osmosis-1

echo "Creating key for osmosis-1..."
echo "$MNEMONIC" | rly keys restore osmosis-1 osmosis-1 --restore-key-type secp256k1 --coin-type 118

DENOM="undefined"
RLY_ADDR=$(rly keys show osmosis-1 osmosis-1)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Setting up chain cosmoshub-4..."
cp /configs/cosmoshub-4.json $RELAYER_DIR/config/
rly chains add --file /configs/cosmoshub-4.json cosmoshub-4

echo "Creating key for cosmoshub-4..."
echo "$MNEMONIC" | rly keys restore cosmoshub-4 cosmoshub-4 --restore-key-type secp256k1 --coin-type 118

DENOM="undefined"
RLY_ADDR=$(rly keys show cosmoshub-4 cosmoshub-4)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.relayer",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/go-relayer:v2.4.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "go-relayer-osmos-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`RelayerBuilder Basic Relayer Generation should generate manifests for a hermes relayer: hermes-relayer-manifests 1`] = `
[
  {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = false
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1-cli"

rpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = false
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-osmos-cosmos",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-osmos-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-osmos-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-osmos-cosmos",
            "app.kubernetes.io/rawname": "osmos-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/cosmology-tech/starship/exposer:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "args": [
                "echo "Waiting for osmosis-1 service..."
wait-for-service osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-osmosis-1",
            },
            {
              "args": [
                "echo "Waiting for cosmoshub-4 service..."
wait-for-service cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-cosmoshub-4",
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for osmosis-1..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name osmosis-1 \\
  --hd-path "m/44'/118'/0'/0/0"

DENOM="undefined"
RLY_ADDR=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"

DENOM="undefined"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-osmos-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`RelayerBuilder Basic Relayer Generation should generate manifests for a neutron-query-relayer: neutron-query-relayer-manifests 1`] = `
[
  {
    "apiVersion": "v1",
    "data": {
      "config.json": "{
  "relayer": {
    "neutron_chain": {
      "chain_id": "neutron-1",
      "rpc_addr": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
      "grpc_addr": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:9090",
      "websocket_addr": "ws://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657/websocket",
      "account_prefix": "neutron",
      "keyring_backend": "test",
      "gas_prices": "0.025untrn",
      "gas_adjustment": 1.5,
      "connection_id": "connection-0",
      "debug": false,
      "timeout": "10s",
      "tx_memo": "neutron-query-relayer"
    },
    "target_chain": {
      "chain_id": "osmosis-1",
      "rpc_addr": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
      "grpc_addr": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9090",
      "websocket_addr": "ws://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657/websocket",
      "keyring_backend": "test",
      "gas_prices": "0.025undefined",
      "gas_adjustment": 1.5,
      "connection_id": "connection-0",
      "debug": false,
      "timeout": "10s",
      "tx_memo": "neutron-query-relayer"
    },
    "queries_file": "/configs/queries.json",
    "check_submitted_tx": true,
    "storage_path": "./storage",
    "log_level": "info"
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-query-relayer-neutron-query",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "neutron-query-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "neutron-query-relayer-neutron-query",
    },
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-query-relayer-neutron-query",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "neutron-query-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "neutron-query-relayer-neutron-query",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "metrics",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "neutron-query-relayer-neutron-query",
      },
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-query-relayer-neutron-query",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "neutron-query-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "neutron-query-relayer-neutron-query",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "neutron-query-relayer-neutron-query",
          "app.kubernetes.io/type": "neutron-query-relayer",
        },
      },
      "serviceName": "neutron-query-relayer-neutron-query",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "neutron-query-relayer-neutron-query",
            "app.kubernetes.io/rawname": "neutron-query",
            "app.kubernetes.io/type": "neutron-query-relayer",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
neutron-query-relayer start --config /configs/config.json",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "CONFIG_PATH",
                  "value": "/configs/config.json",
                },
                {
                  "name": "STORAGE_PATH",
                  "value": "./storage",
                },
                {
                  "name": "LOG_LEVEL",
                  "value": "info",
                },
                {
                  "name": "METRICS_PORT",
                  "value": "9090",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron-query-relayer:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "echo "Waiting for neutron-1 service..."
wait-for-service neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-neutron-1",
            },
            {
              "args": [
                "echo "Waiting for osmosis-1 service..."
wait-for-service osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-osmosis-1",
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $STORAGE_PATH

NEUTRON_MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
TARGET_MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)


echo "Setting up keys for neutron-1..."
# Keys will be managed through environment variables for neutron-query-relayer

DENOM="untrn"
# For neutron-query-relayer, we need to derive the address from mnemonic
# This will be handled by the relayer binary itself

echo "Chain neutron-1 setup completed"

echo "Setting up keys for osmosis-1..."
# Keys will be managed through environment variables for neutron-query-relayer

DENOM="undefined"
# For neutron-query-relayer, we need to derive the address from mnemonic
# This will be handled by the relayer binary itself

echo "Chain osmosis-1 setup completed"
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "CONFIG_PATH",
                  "value": "/configs/config.json",
                },
                {
                  "name": "STORAGE_PATH",
                  "value": "./storage",
                },
                {
                  "name": "LOG_LEVEL",
                  "value": "info",
                },
                {
                  "name": "METRICS_PORT",
                  "value": "9090",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron-query-relayer:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "neutron-query-relayer-neutron-query",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`RelayerBuilder Basic Relayer Generation should generate manifests for a ts-relayer: ts-relayer-manifests 1`] = `
[
  {
    "apiVersion": "v1",
    "data": {
      "app.yaml": "# TS Relayer Configuration
global: {
  "api_port": 3000,
  "timeout": 10000,
  "memo": ""
}

chains: {
  "osmosis-1": {
    "chain_id": "osmosis-1",
    "rpc": [
      "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
    ],
    "rest": [
      "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:1317"
    ],
    "chain_name": "osmosis",
    "pretty_name": "osmosis",
    "decimals": 6,
    "gas_price": "0.01",
    "hd_path": "m/44'/118'/0'/0/0"
  },
  "cosmoshub-4": {
    "chain_id": "cosmoshub-4",
    "rpc": [
      "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657"
    ],
    "rest": [
      "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:1317"
    ],
    "chain_name": "cosmoshub",
    "pretty_name": "cosmoshub",
    "decimals": 6,
    "gas_price": "0.01",
    "hd_path": "m/44'/118'/0'/0/0"
  }
}

cl: []",
      "registry.yaml": "# Chain Registry Configuration
chains:
  - chain_name: "osmosis"
    chain_id: "osmosis-1"
    pretty_name: "osmosis"
    status: "live"
    network_type: "testnet"
    bech32_prefix: undefined
    daemon_name: "gaiad"
    node_home: "$HOME/.gaia"
    key_algos: [
    "secp256k1"
]
    slip44: 118
    fees: {
    "fee_tokens": [
        {
            "fixed_min_gas_price": 0.01,
            "low_gas_price": 0.01,
            "average_gas_price": 0.01,
            "high_gas_price": 0.01
        }
    ]
}
    staking: {
    "staking_tokens": [
        {}
    ]
}
    codebase: {
    "git_repo": "",
    "recommended_version": "",
    "compatible_versions": [],
    "genesis": {
        "genesis_url": ""
    }
}
    apis: {
    "rpc": [
        {
            "address": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
            "provider": "starship"
        }
    ],
    "rest": [
        {
            "address": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:1317",
            "provider": "starship"
        }
    ]
}
    explorers: []
  - chain_name: "cosmoshub"
    chain_id: "cosmoshub-4"
    pretty_name: "cosmoshub"
    status: "live"
    network_type: "testnet"
    bech32_prefix: undefined
    daemon_name: "gaiad"
    node_home: "$HOME/.gaia"
    key_algos: [
    "secp256k1"
]
    slip44: 118
    fees: {
    "fee_tokens": [
        {
            "fixed_min_gas_price": 0.01,
            "low_gas_price": 0.01,
            "average_gas_price": 0.01,
            "high_gas_price": 0.01
        }
    ]
}
    staking: {
    "staking_tokens": [
        {}
    ]
}
    codebase: {
    "git_repo": "",
    "recommended_version": "",
    "compatible_versions": [],
    "genesis": {
        "genesis_url": ""
    }
}
    apis: {
    "rpc": [
        {
            "address": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
            "provider": "starship"
        }
    ],
    "rest": [
        {
            "address": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:1317",
            "provider": "starship"
        }
    ]
}
    explorers: []",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "ts-relayer-ts-rly",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "ts-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "ts-relayer-ts-rly",
    },
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "ts-relayer-ts-rly",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "ts-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-generator-test",
      },
      "name": "ts-relayer-ts-rly",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "ts-relayer-ts-rly",
          "app.kubernetes.io/type": "ts-relayer",
        },
      },
      "serviceName": "ts-relayer-ts-rly",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "ts-relayer-ts-rly",
            "app.kubernetes.io/rawname": "ts-rly",
            "app.kubernetes.io/type": "ts-relayer",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
ts-relayer start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.ts-relayer",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/ts-relayer:0.9.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "echo "Waiting for osmosis-1 service..."
wait-for-service osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-osmosis-1",
            },
            {
              "args": [
                "echo "Waiting for cosmoshub-4 service..."
wait-for-service cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/wait-for-service:v0.1.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-cosmoshub-4",
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/app.yaml $RELAYER_DIR/
cp /configs/registry.yaml $RELAYER_DIR/

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)


echo "Creating key for osmosis-1..."
echo "$MNEMONIC" | ts-relayer keys restore osmosis-1 --hd-path "m/44'/118'/0'/0/0"

DENOM="undefined"
RLY_ADDR=$(ts-relayer keys show osmosis-1)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4..."
echo "$MNEMONIC" | ts-relayer keys restore cosmoshub-4 --hd-path "m/44'/118'/0'/0/0"

DENOM="undefined"
RLY_ADDR=$(ts-relayer keys show cosmoshub-4)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.ts-relayer",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/ts-relayer:0.9.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "ts-relayer-ts-rly",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`RelayerBuilder Basic Relayer Generation should generate no manifests when no relayers are configured: no-relayers-empty-manifests 1`] = `[]`;

exports[`RelayerBuilder Configuration Content Validation should generate correct go-relayer configuration: go-relayer-config-content 1`] = `
{
  "cosmoshubConfigExists": true,
  "osmosisConfigExists": true,
  "pathJson": {
    "paths": {
      "path": {
        "dst": {
          "chain-id": "cosmoshub-4",
          "channel-id": "",
          "client-id": "",
          "connection-id": "",
          "port-id": "transfer",
        },
        "src": {
          "chain-id": "osmosis-1",
          "channel-id": "",
          "client-id": "",
          "connection-id": "",
          "port-id": "transfer",
        },
        "src-channel-filter": {
          "channel-list": [],
          "rule": null,
        },
      },
    },
  },
}
`;

exports[`RelayerBuilder Configuration Content Validation should generate correct hermes configuration: hermes-config-toml-content 1`] = `
"# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = false
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "undefined"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "undefined" }
"
`;

exports[`RelayerBuilder Resource Validation should generate correct container configurations: hermes-container-configuration 1`] = `
{
  "containerCount": 2,
  "hasExposerContainer": true,
  "initContainerCount": 4,
  "relayerContainerImage": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
}
`;

exports[`RelayerBuilder Resource Validation should generate correct labels and metadata: relayer-labels-and-selectors 1`] = `
{
  "configMapLabels": {
    "app.kubernetes.io/component": "relayer",
    "app.kubernetes.io/managed-by": "starship",
    "app.kubernetes.io/name": "hermes-osmos-cosmos",
    "app.kubernetes.io/part-of": "starship",
    "app.kubernetes.io/role": "hermes",
    "app.kubernetes.io/version": "4.0.0-alpha.0",
    "starship.io/name": "starship-generator-test",
  },
  "serviceLabels": {
    "app.kubernetes.io/component": "relayer",
    "app.kubernetes.io/managed-by": "starship",
    "app.kubernetes.io/name": "hermes-osmos-cosmos",
    "app.kubernetes.io/part-of": "starship",
    "app.kubernetes.io/role": "hermes",
    "app.kubernetes.io/version": "4.0.0-alpha.0",
    "starship.io/name": "starship-generator-test",
  },
  "statefulSetLabels": {
    "app.kubernetes.io/component": "relayer",
    "app.kubernetes.io/managed-by": "starship",
    "app.kubernetes.io/name": "hermes-osmos-cosmos",
    "app.kubernetes.io/part-of": "starship",
    "app.kubernetes.io/role": "hermes",
    "app.kubernetes.io/version": "4.0.0-alpha.0",
    "starship.io/name": "starship-generator-test",
  },
  "statefulSetSelector": {
    "app.kubernetes.io/instance": "relayer",
    "app.kubernetes.io/name": "hermes-osmos-cosmos",
    "app.kubernetes.io/type": "hermes",
  },
}
`;

exports[`RelayerBuilder Resource Validation should generate correct port configurations: hermes-service-ports 1`] = `
[
  {
    "name": "rest",
    "port": 3000,
    "protocol": "TCP",
    "targetPort": 3000,
  },
  {
    "name": "exposer",
    "port": 8081,
    "protocol": "TCP",
    "targetPort": 8081,
  },
]
`;

exports[`RelayerBuilder Resource Validation should generate correct volume configurations: hermes-volume-configuration 1`] = `
[
  {
    "emptyDir": {},
    "name": "relayer",
  },
  {
    "configMap": {
      "name": "hermes-osmos-cosmos",
    },
    "name": "relayer-config",
  },
  {
    "configMap": {
      "name": "keys",
    },
    "name": "keys",
  },
  {
    "configMap": {
      "name": "setup-scripts",
    },
    "name": "scripts",
  },
  {
    "emptyDir": {},
    "name": "exposer",
  },
]
`;
