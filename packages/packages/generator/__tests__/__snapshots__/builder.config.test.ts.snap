// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BuilderManager Config Files Tests Config: agoric should generate valid YAML manifests for agoric: agoric-yaml-files 1`] = `
{
  "agoric/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "agoric-3-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "agoric-3-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "agoric-3",
        "starship.io/chain-name": "agoric",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "agoric-3-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "agoric-3-genesis",
      },
    },
  },
  "agoric/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "agoric-3",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "agoric-3-genesis",
        "app.kubernetes.io/part-of": "agoric-3",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "agoric-3-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "agoric",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "agoric-3-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "agoric-3-genesis",
        },
      },
      "serviceName": "agoric-3-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "agoric-3-genesis",
            "app.kubernetes.io/rawname": "agoric-3",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "agoric-3",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "ubld",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000ubld,100000000000000uist",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "agd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.agoric",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/Agoric/agoric-sdk",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.agoric",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "agd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "agoric-3",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/agoric/agoric-3-proposals:main",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": 1,
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": 1,
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.agoric",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "agoric-3-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.agoric/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.agoric/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.agoric/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.agoric/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.agoric/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.agoric",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "agd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "agoric-3",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000ubld,100000000000000uist",
                },
              ],
              "image": "ghcr.io/agoric/agoric-3-proposals:main",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "ubld",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000ubld,100000000000000uist",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "agd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.agoric",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/Agoric/agoric-sdk",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.agoric",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "agd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "agoric-3",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/agoric/agoric-3-proposals:main",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": 1,
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": 1,
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.agoric",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "ubld",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000ubld,100000000000000uist",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "agd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.agoric",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/Agoric/agoric-sdk",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.agoric",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "agd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "agoric-3",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/agoric/agoric-3-proposals:main",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": 1,
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": 1,
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.agoric",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": 1,
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": 1,
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-agoric-3",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "agoric/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-agoric-3",
        "app.kubernetes.io/part-of": "agoric-3",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "agoric-3",
        "starship.io/chain-name": "agoric",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-agoric-3",
    },
  },
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "gaiad",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "registry/agoric-3-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "agoric",
  "assets": [
    {
      "base": "ubld",
      "description": "The native token of Agoric",
      "name": "Agoric",
      "display": "bld",
      "symbol": "BLD",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/agoric/images/bld.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/agoric/images/bld.svg"
      },
      "denom_units": [
        {
          "denom": "ubld",
          "exponent": 0
        },
        {
          "denom": "bld",
          "exponent": 6
        }
      ],
      "coingecko_id": "agoric",
      "keywords": [
        "agoric"
      ]
    },
    {
      "base": "uist",
      "description": "IST is the stable token used by the Agoric chain for execution fees and commerce.",
      "name": "Inter Stable Token",
      "display": "ist",
      "symbol": "IST",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/agoric/images/ist.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/agoric/images/ist.svg"
      },
      "denom_units": [
        {
          "denom": "uist",
          "exponent": 0
        },
        {
          "denom": "ist",
          "exponent": 6
        }
      ],
      "coingecko_id": "inter-stable-token",
      "keywords": [
        "inter-stable-token"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "agoric",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "agoric-3",
  "pretty_name": "Agoric Devnet",
  "bech32_prefix": "agoric",
  "daemon_name": "agd",
  "node_home": "/root/.agoric",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "564",
  "fees": {
    "fee_tokens": [
      {
        "denom": "ubld",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "ubld"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/Agoric/agoric-sdk",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-agoric-3",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-agoric-3",
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "agoric-3,cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "agoric,cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://agoric-3-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://agoric-3-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://agoric-3-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/agoric-3",
                  "name": "registry-agoric-3",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://agoric-3-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: agoric-3. Waiting for it to start..."
  echo "Checking: http://agoric-3-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-agoric-3",
              },
              "name": "registry-agoric-3",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-agoric-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "agoric-3"
type = "CosmosSdk"
key_name = "agoric-3-cli"

rpc_addr = "http://agoric-3-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://agoric-3-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://agoric-3-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "agoric"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "ubld" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "agoric-3"
type = "CosmosSdk"
key_name = "agoric-3"

rpc_addr = "http://agoric-3-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://agoric-3-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://agoric-3-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "agoric"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "ubld" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-agoric-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-agoric-cosmos",
    },
  },
  "relayer/hermes-agoric-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-agoric-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-agoric-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-agoric-cosmos",
      },
    },
  },
  "relayer/hermes-agoric-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-agoric-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-agoric-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-agoric-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-agoric-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-agoric-cosmos",
            "app.kubernetes.io/rawname": "agoric-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://agoric-3-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: agoric-3. Waiting for it to start..."
  echo "Checking: http://agoric-3-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for agoric-3..."
hermes keys add \\
  --chain agoric-3 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name agoric-3 \\
  --hd-path "m/44'/564'/0'/0/0"
DENOM="ubld"
RLY_ADDR=$(hermes --json keys list --chain agoric-3 | tail -1 | jq -r '.result."agoric-3".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://agoric-3-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for agoric-3-cli..."
hermes keys add \\
  --chain agoric-3 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name agoric-3-cli \\
  --hd-path "m/44'/564'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain agoric-3 | tail -1 | jq -r '.result."agoric-3-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://agoric-3-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain agoric-3 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-agoric-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: agoric should have proper file organization for agoric: agoric-file-structure 1`] = `
{
  "agoric": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "agoric-3-configmap.yaml",
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-agoric-cosmos-configmap.yaml",
    "hermes-agoric-cosmos-service.yaml",
    "hermes-agoric-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: agoric should have proper file organization for agoric: agoric-resource-counts 1`] = `
{
  "ConfigMap": 7,
  "Deployment": 1,
  "Service": 4,
  "StatefulSet": 3,
}
`;

exports[`BuilderManager Config Files Tests Config: build-chain should generate valid YAML manifests for build-chain: build-chain-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "gaiad",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "cosmoshub/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-validator",
      },
    },
  },
  "cosmoshub/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-validator",
        },
      },
      "serviceName": "cosmoshub-4-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "persistencecore/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "core-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "core-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "core-1",
        "starship.io/chain-name": "persistencecore",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "core-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "core-1-genesis",
      },
    },
  },
  "persistencecore/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "core-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "core-1-genesis",
        "app.kubernetes.io/part-of": "core-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "core-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "persistencecore",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "core-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "core-1-genesis",
        },
      },
      "serviceName": "core-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "core-1-genesis",
            "app.kubernetes.io/rawname": "core-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "core-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


/usr/bin/cosmovisor start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uxprt",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uxprt",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/persistenceOne/persistenceCore",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "core-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "persistenceCore",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.persistenceCore",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/runner:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.persistenceCore",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "core-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.persistenceCore/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.persistenceCore/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.persistenceCore/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.persistenceCore/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.persistenceCore/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.persistenceCore",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "persistenceCore",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "core-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uxprt",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/runner:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "# Install cosmovisor
go install github.com/cosmos/cosmos-sdk/cosmovisor/cmd/cosmovisor@v1.0.0

# Build genesis
UPGRADE_NAME=genesis CODE_TAG=v7.0.0 bash -e /scripts/build-chain.sh",
              ],
              "env": [
                {
                  "name": "CODE_REF",
                  "value": "https://github.com/persistenceOne/persistenceCore",
                },
                {
                  "name": "UPGRADE_DIR",
                  "value": "/root/.persistenceCore/cosmovisor",
                },
                {
                  "name": "GOBIN",
                  "value": "/go/bin",
                },
                {
                  "name": "CHAIN_NAME",
                  "value": "core-1",
                },
                {
                  "name": "DENOM",
                  "value": "uxprt",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uxprt",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/persistenceOne/persistenceCore",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "persistenceCore",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/builder:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-build-images",
              "resources": {
                "limits": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.persistenceCore",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

cp $CHAIN_DIR/cosmovisor/genesis/bin/$CHAIN_BIN /usr/bin

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uxprt",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uxprt",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/persistenceOne/persistenceCore",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "core-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/runner:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.persistenceCore",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

cp $CHAIN_DIR/cosmovisor/genesis/bin/$CHAIN_BIN /usr/bin

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uxprt",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uxprt",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/persistenceOne/persistenceCore",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "core-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/runner:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.persistenceCore",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-core-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "persistencecore/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-core-1",
        "app.kubernetes.io/part-of": "core-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "core-1",
        "starship.io/chain-name": "persistencecore",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-core-1",
    },
  },
  "persistencecore/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "core-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "core-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "core-1",
        "starship.io/chain-name": "persistencecore",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "core-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "core-1-validator",
      },
    },
  },
  "persistencecore/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "core-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "core-1-validator",
        "app.kubernetes.io/part-of": "core-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "core-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "persistencecore",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "core-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "core-1-validator",
        },
      },
      "serviceName": "core-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "core-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "core-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

cp $CHAIN_DIR/cosmovisor/genesis/bin/$CHAIN_BIN /usr/bin
/usr/bin/cosmovisor start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uxprt",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uxprt",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/persistenceOne/persistenceCore",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "core-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "core-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/runner:latest",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.persistenceCore",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uxprt",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uxprt",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/persistenceOne/persistenceCore",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "core-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "core-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.persistenceCore/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.persistenceCore/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.persistenceCore/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.persistenceCore/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.persistenceCore",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "# Install cosmovisor
go install github.com/cosmos/cosmos-sdk/cosmovisor/cmd/cosmovisor@v1.0.0

# Build genesis
UPGRADE_NAME=genesis CODE_TAG=v7.0.0 bash -e /scripts/build-chain.sh",
              ],
              "env": [
                {
                  "name": "CODE_REF",
                  "value": "https://github.com/persistenceOne/persistenceCore",
                },
                {
                  "name": "UPGRADE_DIR",
                  "value": "/root/.persistenceCore/cosmovisor",
                },
                {
                  "name": "GOBIN",
                  "value": "/go/bin",
                },
                {
                  "name": "CHAIN_NAME",
                  "value": "core-1",
                },
                {
                  "name": "DENOM",
                  "value": "uxprt",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uxprt",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/persistenceOne/persistenceCore",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "persistenceCore",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/builder:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-build-images",
              "resources": {
                "limits": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.persistenceCore",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://core-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: core-1. Waiting for it to start..."
  echo "Checking: http://core-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"
cp $CHAIN_DIR/cosmovisor/genesis/bin/$CHAIN_BIN /usr/bin

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uxprt",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uxprt",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/persistenceOne/persistenceCore",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "core-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "core-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/runner:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.persistenceCore",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"
cp $CHAIN_DIR/cosmovisor/genesis/bin/$CHAIN_BIN /usr/bin

echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uxprt",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uxprt",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/persistenceOne/persistenceCore",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.persistenceCore",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "persistenceCore",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "core-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "core-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/runner:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "2",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.persistenceCore",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-core-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "registry/core-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "persistencecore",
  "assets": [
    {
      "description": "The denom for token uxprt",
      "base": "uxprt",
      "name": "uxprt",
      "display": "uxprt",
      "symbol": "UXPRT",
      "denom_units": [
        {
          "denom": "uxprt",
          "exponent": 0
        },
        {
          "denom": "uxprt",
          "exponent": 6
        }
      ],
      "coingecko_id": "persistencecore"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "persistencecore",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "core-1",
  "pretty_name": "Persistence Devnet",
  "bech32_prefix": "persistence",
  "daemon_name": "persistenceCore",
  "node_home": "/root/.persistenceCore",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uxprt",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uxprt"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/persistenceOne/persistenceCore",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-core-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-core-1",
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "cosmoshub-4,core-1",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "cosmoshub,persistencecore",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657,http://core-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26657,http://localhost:26658",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091,http://core-1-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1317,http://localhost:1318",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081,http://core-1-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
                {
                  "mountPath": "/chains/core-1",
                  "name": "registry-core-1",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://core-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: core-1. Waiting for it to start..."
  echo "Checking: http://core-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
            {
              "configMap": {
                "name": "registry-core-1",
              },
              "name": "registry-core-1",
            },
          ],
        },
      },
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-persistence-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "core-1"
type = "CosmosSdk"
key_name = "core-1-cli"

rpc_addr = "http://core-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://core-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://core-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "persistence"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uxprt" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "core-1"
type = "CosmosSdk"
key_name = "core-1"

rpc_addr = "http://core-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://core-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://core-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "persistence"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uxprt" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-persistence-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-persistence-cosmos",
    },
  },
  "relayer/hermes-persistence-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-persistence-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-persistence-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-persistence-cosmos",
      },
    },
  },
  "relayer/hermes-persistence-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-persistence-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-persistence-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-persistence-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-persistence-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-persistence-cosmos",
            "app.kubernetes.io/rawname": "persistence-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://core-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: core-1. Waiting for it to start..."
  echo "Checking: http://core-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for core-1..."
hermes keys add \\
  --chain core-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name core-1 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uxprt"
RLY_ADDR=$(hermes --json keys list --chain core-1 | tail -1 | jq -r '.result."core-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://core-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for core-1-cli..."
hermes keys add \\
  --chain core-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name core-1-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain core-1 | tail -1 | jq -r '.result."core-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://core-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain core-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-persistence-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: build-chain should have proper file organization for build-chain: build-chain-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "persistencecore": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "registry": [
    "core-1-configmap.yaml",
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-persistence-cosmos-configmap.yaml",
    "hermes-persistence-cosmos-service.yaml",
    "hermes-persistence-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: build-chain should have proper file organization for build-chain: build-chain-resource-counts 1`] = `
{
  "ConfigMap": 7,
  "Deployment": 1,
  "Service": 6,
  "StatefulSet": 5,
}
`;

exports[`BuilderManager Config Files Tests Config: eth should generate valid YAML manifests for eth: eth-yaml-files 1`] = `
{
  "ethereum/config-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config.yaml": "CONFIG_NAME: interop
PRESET_BASE: interop

# Genesis
GENESIS_FORK_VERSION: 0x20000089

# Altair
ALTAIR_FORK_EPOCH: 0
ALTAIR_FORK_VERSION: 0x20000090

# Merge
BELLATRIX_FORK_EPOCH: 0
BELLATRIX_FORK_VERSION: 0x20000091
TERMINAL_TOTAL_DIFFICULTY: 0

# Capella
CAPELLA_FORK_EPOCH: 0
CAPELLA_FORK_VERSION: 0x20000092
MAX_WITHDRAWALS_PER_PAYLOAD: 16

# Deneb
DENEB_FORK_VERSION: 0x20000093

# Electra
ELECTRA_FORK_VERSION: 0x20000094

# Time parameters
SECONDS_PER_SLOT: 12
SLOTS_PER_EPOCH: 6

# Deposit contract
DEPOSIT_CONTRACT_ADDRESS: 0x4242424242424242424242424242424242424242",
      "genesis.json": "{
  "config": {
    "chainId": 1337,
    "homesteadBlock": 0,
    "eip150Block": 0,
    "eip155Block": 0,
    "eip158Block": 0,
    "byzantiumBlock": 0,
    "constantinopleBlock": 0,
    "petersburgBlock": 0,
    "istanbulBlock": 0,
    "londonBlock": 0,
    "berlinBlock": 0,
    "terminalTotalDifficulty": 0,
    "terminalTotalDifficultyPassed": true
  },
  "nonce": "0x0",
  "timestamp": "0x677d172f",
  "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "gasLimit": "0x47b760",
  "difficulty": "0x1",
  "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "coinbase": "0x0000000000000000000000000000000000000000",
  "alloc": {
    "0x0000000000000000000000000000000000000001": {
      "balance": "0x3635c9adc5dea00000"
    },
    "0x4242424242424242424242424242424242424242": {
      "code": "",
      "balance": "0x0"
    }
  },
  "number": "0x0",
  "gasUsed": "0x0",
  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "baseFeePerGas": "0x7",
  "excessBlobGas": null,
  "blobGasUsed": null
}",
      "jwt.hex": "3fe89f53368415a79e065f3c885b7273b41540d5598488ef475cfdc4009850a4",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "ethereum-1337",
        "app.kubernetes.io/part-of": "1337",
        "app.kubernetes.io/role": "config",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "1337",
        "starship.io/chain-name": "ethereum",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "config-ethereum",
    },
  },
  "ethereum/ethereum-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app": "ethereum-1337",
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "ethereum-1337",
        "app.kubernetes.io/part-of": "1337",
        "app.kubernetes.io/role": "ethereum",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "1337",
        "starship.io/chain-name": "ethereum",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "ethereum-1337",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "ethereum-1337",
          "app.kubernetes.io/name": "ethereum-1337",
        },
      },
      "serviceName": "ethereum-1337",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "ethereum-1337",
            "app.kubernetes.io/name": "ethereum-1337",
            "app.kubernetes.io/rawname": "1337",
            "app.kubernetes.io/type": "ethereum-1337",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "echo "Setting UDP buffer size"
sysctl -w net.core.rmem_max=16777216
sysctl -w net.core.wmem_max=16777216

echo "Starting execution chain"
geth --datadir /ethereum/execution --http \\
  --http.addr=0.0.0.0 \\
  --http.port=$HTTP_PORT \\
  --http.api=eth,net,web3,debug \\
  --ws --ws.addr=0.0.0.0 \\
  --ws.port=$WS_PORT \\
  --authrpc.addr=0.0.0.0 \\
  --authrpc.port=$RPC_PORT \\
  --nodiscover \\
  --http.corsdomain=* \\
  --ws.api=eth,net,web3 \\
  --ws.origins=* \\
  --http.vhosts=* \\
  --authrpc.vhosts=* \\
  --authrpc.jwtsecret=/etc/secrets/jwt.hex \\
  --unlock=0x123463a4B065722E99115D6c222f267d9cABb524 \\
  --password=/dev/null \\
  --syncmode=snap \\
  --snapshot=false \\
  --networkid=1337 \\
  --verbosity=4 \\
  --maxpeers=50 \\
  --nat=none \\
  --log.vmodule=engine=6",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "HTTP_PORT",
                  "value": "8545",
                },
                {
                  "name": "WS_PORT",
                  "value": "8546",
                },
                {
                  "name": "RPC_PORT",
                  "value": "8551",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/ethereum/client-go:v1.14.12",
              "imagePullPolicy": "IfNotPresent",
              "name": "geth",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-c",
                    "curl -s --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' -H "Content-Type: application/json" -X POST http://localhost:8545 | grep -q '"result":false'",
                  ],
                },
                "initialDelaySeconds": 15,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/ethereum",
                  "name": "ethereum",
                },
                {
                  "mountPath": "/etc/secrets",
                  "name": "secrets",
                },
              ],
            },
            {
              "args": [
                "echo "Waiting 30 seconds for execution client to be ready..."
sleep 30

echo "Starting consensus chain"
beacon-chain \\
  --execution-endpoint=http://0.0.0.0:8551 \\
  --jwt-secret=/etc/secrets/jwt.hex \\
  --accept-terms-of-use \\
  --http-host 0.0.0.0 \\
  --rpc-host 0.0.0.0 \\
  --chain-id 1337 \\
  --contract-deployment-block=0 \\
  --datadir /ethereum/consensus \\
  --genesis-state /ethereum/consensus/genesis.ssz \\
  --min-sync-peers=0 \\
  --chain-config-file=/ethereum/consensus/config.yaml \\
  --network-id 1337 \\
  --suggested-fee-recipient=0x123463a4B065722E99115D6c222f267d9cABb524 \\
  --minimum-peers-per-subnet=0 \\
  --force-clear-db",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/prysm/beacon-chain:v5.2.0",
              "imagePullPolicy": "Always",
              "name": "beacon-chain",
              "readinessProbe": {
                "httpGet": {
                  "path": "/eth/v1/node/health",
                  "port": 3500,
                },
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/ethereum",
                  "name": "ethereum",
                },
                {
                  "mountPath": "/etc/secrets",
                  "name": "secrets",
                },
              ],
            },
            {
              "args": [
                "echo "Waiting 15 seconds for execution client to be ready..."
sleep 20
mkdir -p /ethereum/consensus/validator
echo "Starting validator node"
validator \\
  --accept-terms-of-use \\
  --beacon-rpc-provider=0.0.0.0:4000 \\
  --datadir=/ethereum/consensus/validator \\
  --interop-num-validators=1 \\
  --interop-start-index=0 \\
  --force-clear-db \\
  --grpc-gateway-host=0.0.0.0 \\
  --chain-config-file=/ethereum/consensus/config.yaml \\
  --monitoring-host=0.0.0.0 \\
  --monitoring-port=8081 \\
  --suggested-fee-recipient=0x0C46c2cAFE097b4f7e1BB868B89e5697eE65f934",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/prysm/validator:v5.2.0",
              "imagePullPolicy": "Always",
              "name": "validator",
              "readinessProbe": {
                "httpGet": {
                  "path": "/metrics",
                  "port": 8081,
                },
                "initialDelaySeconds": 20,
                "periodSeconds": 30,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/ethereum",
                  "name": "ethereum",
                },
                {
                  "mountPath": "/etc/secrets",
                  "name": "secrets",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "mkdir -p /ethereum/consensus /ethereum/execution
cp /config/genesis.json /ethereum/execution/genesis.json
cp /config/config.yaml /ethereum/consensus/config.yaml

echo "Initializing genesis"
prysmctl testnet generate-genesis \\
  --fork=capella \\
  --num-validators=1 \\
  --genesis-time-delay=15 \\
  --output-ssz=/ethereum/consensus/genesis.ssz \\
  --chain-config-file=/ethereum/consensus/config.yaml \\
  --geth-genesis-json-in=/ethereum/execution/genesis.json \\
  --geth-genesis-json-out=/ethereum/execution/genesis.json

echo "Copy secrets over"
cp /config/jwt.hex /etc/secrets/jwt.hex",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/prysm/cmd/prysmctl:v5.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis-beacon",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/secrets",
                  "name": "secrets",
                },
                {
                  "mountPath": "/config",
                  "name": "config",
                },
                {
                  "mountPath": "/ethereum",
                  "name": "ethereum",
                },
              ],
            },
            {
              "args": [
                "echo "Initializing genesis geth"
geth --datadir /ethereum/execution init /ethereum/execution/genesis.json",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/ethereum/client-go:v1.14.12",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis-execution",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/secrets",
                  "name": "secrets",
                },
                {
                  "mountPath": "/config",
                  "name": "config",
                },
                {
                  "mountPath": "/ethereum",
                  "name": "ethereum",
                },
              ],
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "config-ethereum",
              },
              "name": "config",
            },
            {
              "emptyDir": {},
              "name": "ethereum",
            },
            {
              "emptyDir": {},
              "name": "secrets",
            },
          ],
        },
      },
    },
  },
  "ethereum/service-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "ethereum-1337",
        "app.kubernetes.io/part-of": "1337",
        "app.kubernetes.io/role": "service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "1337",
        "starship.io/chain-name": "ethereum",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "ethereum-1337",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8545,
          "protocol": "TCP",
          "targetPort": 8545,
        },
        {
          "name": "ws",
          "port": 8546,
          "protocol": "TCP",
          "targetPort": 8546,
        },
        {
          "name": "rpc",
          "port": 8551,
          "protocol": "TCP",
          "targetPort": 8551,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "ethereum-1337",
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: eth should have proper file organization for eth: eth-file-structure 1`] = `
{
  "ethereum": [
    "config-configmap.yaml",
    "ethereum-statefulset.yaml",
    "service-service.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: eth should have proper file organization for eth: eth-resource-counts 1`] = `
{
  "ConfigMap": 1,
  "Service": 1,
  "StatefulSet": 1,
}
`;

exports[`BuilderManager Config Files Tests Config: eth-lite should generate valid YAML manifests for eth-lite: eth-lite-yaml-files 1`] = `
{
  "ethereum/config-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config.yaml": "CONFIG_NAME: interop
PRESET_BASE: interop

# Genesis
GENESIS_FORK_VERSION: 0x20000089

# Altair
ALTAIR_FORK_EPOCH: 0
ALTAIR_FORK_VERSION: 0x20000090

# Merge
BELLATRIX_FORK_EPOCH: 0
BELLATRIX_FORK_VERSION: 0x20000091
TERMINAL_TOTAL_DIFFICULTY: 0

# Capella
CAPELLA_FORK_EPOCH: 0
CAPELLA_FORK_VERSION: 0x20000092
MAX_WITHDRAWALS_PER_PAYLOAD: 16

# Deneb
DENEB_FORK_VERSION: 0x20000093

# Electra
ELECTRA_FORK_VERSION: 0x20000094

# Time parameters
SECONDS_PER_SLOT: 12
SLOTS_PER_EPOCH: 6

# Deposit contract
DEPOSIT_CONTRACT_ADDRESS: 0x4242424242424242424242424242424242424242",
      "genesis.json": "{
  "config": {
    "chainId": 1337,
    "homesteadBlock": 0,
    "eip150Block": 0,
    "eip155Block": 0,
    "eip158Block": 0,
    "byzantiumBlock": 0,
    "constantinopleBlock": 0,
    "petersburgBlock": 0,
    "istanbulBlock": 0,
    "londonBlock": 0,
    "berlinBlock": 0,
    "terminalTotalDifficulty": 0,
    "terminalTotalDifficultyPassed": true
  },
  "nonce": "0x0",
  "timestamp": "0x677d172f",
  "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "gasLimit": "0x47b760",
  "difficulty": "0x1",
  "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "coinbase": "0x0000000000000000000000000000000000000000",
  "alloc": {
    "0x0000000000000000000000000000000000000001": {
      "balance": "0x3635c9adc5dea00000"
    },
    "0x0000000000000000000000000000000000000002": {
      "balance": "0x3635c9adc5dea00000"
    },
    "0x4242424242424242424242424242424242424242": {
      "code": "",
      "balance": "0x0"
    }
  },
  "number": "0x0",
  "gasUsed": "0x0",
  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "baseFeePerGas": "0x7",
  "excessBlobGas": null,
  "blobGasUsed": null
}",
      "jwt.hex": "3fe89f53368415a79e065f3c885b7273b41540d5598488ef475cfdc4009850a4",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "ethereum-1337",
        "app.kubernetes.io/part-of": "1337",
        "app.kubernetes.io/role": "config",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "1337",
        "starship.io/chain-name": "ethereum",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "config-ethereum",
    },
  },
  "ethereum/ethereum-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app": "ethereum-1337",
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "ethereum-1337",
        "app.kubernetes.io/part-of": "1337",
        "app.kubernetes.io/role": "ethereum",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "1337",
        "starship.io/chain-name": "ethereum",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "ethereum-1337",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "ethereum-1337",
          "app.kubernetes.io/name": "ethereum-1337",
        },
      },
      "serviceName": "ethereum-1337",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "ethereum-1337",
            "app.kubernetes.io/name": "ethereum-1337",
            "app.kubernetes.io/rawname": "1337",
            "app.kubernetes.io/type": "ethereum-1337",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "echo "Setting UDP buffer size"
sysctl -w net.core.rmem_max=16777216
sysctl -w net.core.wmem_max=16777216

echo "Starting execution chain"
geth --datadir /ethereum/execution --http \\
  --http.addr=0.0.0.0 \\
  --http.port=$HTTP_PORT \\
  --http.api=eth,net,web3,debug \\
  --ws --ws.addr=0.0.0.0 \\
  --ws.port=$WS_PORT \\
  --authrpc.addr=0.0.0.0 \\
  --authrpc.port=$RPC_PORT \\
  --nodiscover \\
  --http.corsdomain=* \\
  --ws.api=eth,net,web3 \\
  --ws.origins=* \\
  --http.vhosts=* \\
  --authrpc.vhosts=* \\
  --authrpc.jwtsecret=/etc/secrets/jwt.hex \\
  --unlock=0x123463a4B065722E99115D6c222f267d9cABb524 \\
  --password=/dev/null \\
  --syncmode=snap \\
  --snapshot=false \\
  --networkid=1337 \\
  --verbosity=4 \\
  --maxpeers=50 \\
  --nat=none \\
  --log.vmodule=engine=6",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "HTTP_PORT",
                  "value": "8545",
                },
                {
                  "name": "WS_PORT",
                  "value": "8546",
                },
                {
                  "name": "RPC_PORT",
                  "value": "8551",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/ethereum/client-go:v1.14.12",
              "imagePullPolicy": "IfNotPresent",
              "name": "geth",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-c",
                    "curl -s --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' -H "Content-Type: application/json" -X POST http://localhost:8545 | grep -q '"result":false'",
                  ],
                },
                "initialDelaySeconds": 15,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "200m",
                  "memory": "200Mi",
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "200Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/ethereum",
                  "name": "ethereum",
                },
                {
                  "mountPath": "/etc/secrets",
                  "name": "secrets",
                },
              ],
            },
            {
              "args": [
                "echo "Waiting 30 seconds for execution client to be ready..."
sleep 30

echo "Starting consensus chain"
beacon-chain \\
  --execution-endpoint=http://0.0.0.0:8551 \\
  --jwt-secret=/etc/secrets/jwt.hex \\
  --accept-terms-of-use \\
  --http-host 0.0.0.0 \\
  --rpc-host 0.0.0.0 \\
  --chain-id 1337 \\
  --contract-deployment-block=0 \\
  --datadir /ethereum/consensus \\
  --genesis-state /ethereum/consensus/genesis.ssz \\
  --min-sync-peers=0 \\
  --chain-config-file=/ethereum/consensus/config.yaml \\
  --network-id 1337 \\
  --suggested-fee-recipient=0x123463a4B065722E99115D6c222f267d9cABb524 \\
  --minimum-peers-per-subnet=0 \\
  --force-clear-db",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/prysm/beacon-chain:v5.2.0",
              "imagePullPolicy": "Always",
              "name": "beacon-chain",
              "readinessProbe": {
                "httpGet": {
                  "path": "/eth/v1/node/health",
                  "port": 3500,
                },
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
              },
              "resources": {
                "limits": {
                  "cpu": "200m",
                  "memory": "200Mi",
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "200Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/ethereum",
                  "name": "ethereum",
                },
                {
                  "mountPath": "/etc/secrets",
                  "name": "secrets",
                },
              ],
            },
            {
              "args": [
                "echo "Waiting 15 seconds for execution client to be ready..."
sleep 20
mkdir -p /ethereum/consensus/validator
echo "Starting validator node"
validator \\
  --accept-terms-of-use \\
  --beacon-rpc-provider=0.0.0.0:4000 \\
  --datadir=/ethereum/consensus/validator \\
  --interop-num-validators=1 \\
  --interop-start-index=0 \\
  --force-clear-db \\
  --grpc-gateway-host=0.0.0.0 \\
  --chain-config-file=/ethereum/consensus/config.yaml \\
  --monitoring-host=0.0.0.0 \\
  --monitoring-port=8081 \\
  --suggested-fee-recipient=0x0C46c2cAFE097b4f7e1BB868B89e5697eE65f934",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/prysm/validator:v5.2.0",
              "imagePullPolicy": "Always",
              "name": "validator",
              "readinessProbe": {
                "httpGet": {
                  "path": "/metrics",
                  "port": 8081,
                },
                "initialDelaySeconds": 20,
                "periodSeconds": 30,
              },
              "resources": {
                "limits": {
                  "cpu": "200m",
                  "memory": "200Mi",
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "200Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/ethereum",
                  "name": "ethereum",
                },
                {
                  "mountPath": "/etc/secrets",
                  "name": "secrets",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "mkdir -p /ethereum/consensus /ethereum/execution
cp /config/genesis.json /ethereum/execution/genesis.json
cp /config/config.yaml /ethereum/consensus/config.yaml

echo "Initializing genesis"
prysmctl testnet generate-genesis \\
  --fork=capella \\
  --num-validators=1 \\
  --genesis-time-delay=15 \\
  --output-ssz=/ethereum/consensus/genesis.ssz \\
  --chain-config-file=/ethereum/consensus/config.yaml \\
  --geth-genesis-json-in=/ethereum/execution/genesis.json \\
  --geth-genesis-json-out=/ethereum/execution/genesis.json

echo "Copy secrets over"
cp /config/jwt.hex /etc/secrets/jwt.hex",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/prysm/cmd/prysmctl:v5.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis-beacon",
              "resources": {
                "limits": {
                  "cpu": "200m",
                  "memory": "200Mi",
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "200Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/secrets",
                  "name": "secrets",
                },
                {
                  "mountPath": "/config",
                  "name": "config",
                },
                {
                  "mountPath": "/ethereum",
                  "name": "ethereum",
                },
              ],
            },
            {
              "args": [
                "echo "Initializing genesis geth"
geth --datadir /ethereum/execution init /ethereum/execution/genesis.json",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/ethereum/client-go:v1.14.12",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis-execution",
              "resources": {
                "limits": {
                  "cpu": "200m",
                  "memory": "200Mi",
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "200Mi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/secrets",
                  "name": "secrets",
                },
                {
                  "mountPath": "/config",
                  "name": "config",
                },
                {
                  "mountPath": "/ethereum",
                  "name": "ethereum",
                },
              ],
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "config-ethereum",
              },
              "name": "config",
            },
            {
              "emptyDir": {},
              "name": "ethereum",
            },
            {
              "emptyDir": {},
              "name": "secrets",
            },
          ],
        },
      },
    },
  },
  "ethereum/service-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "ethereum-1337",
        "app.kubernetes.io/part-of": "1337",
        "app.kubernetes.io/role": "service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "1337",
        "starship.io/chain-name": "ethereum",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "ethereum-1337",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8545,
          "protocol": "TCP",
          "targetPort": 8545,
        },
        {
          "name": "ws",
          "port": 8546,
          "protocol": "TCP",
          "targetPort": 8546,
        },
        {
          "name": "rpc",
          "port": 8551,
          "protocol": "TCP",
          "targetPort": 8551,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "ethereum-1337",
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: eth-lite should have proper file organization for eth-lite: eth-lite-file-structure 1`] = `
{
  "ethereum": [
    "config-configmap.yaml",
    "ethereum-statefulset.yaml",
    "service-service.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: eth-lite should have proper file organization for eth-lite: eth-lite-resource-counts 1`] = `
{
  "ConfigMap": 1,
  "Service": 1,
  "StatefulSet": 1,
}
`;

exports[`BuilderManager Config Files Tests Config: evmos should generate valid YAML manifests for evmos: evmos-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "gaiad",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "evmos/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "evmos_9000-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "evmos_9000-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "evmos_9000-1",
        "starship.io/chain-name": "evmos",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "evmos-9000-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "evmos_9000-1-genesis",
      },
    },
  },
  "evmos/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "evmos_9000-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "evmos_9000-1-genesis",
        "app.kubernetes.io/part-of": "evmos_9000-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "evmos_9000-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "evmos",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "evmos-9000-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "evmos_9000-1-genesis",
        },
      },
      "serviceName": "evmos-9000-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "evmos_9000-1-genesis",
            "app.kubernetes.io/rawname": "evmos_9000-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "evmos_9000-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "aevmos",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000aevmos",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/evmos/evmos",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "evmos_9000-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/evmos:v13.0.2",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.evmosd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "evmos-9000-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.evmosd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.evmosd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.evmosd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.evmosd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.evmosd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.evmosd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "evmosd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "evmos_9000-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000aevmos",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/evmos:v13.0.2",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "aevmos",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000aevmos",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/evmos/evmos",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "evmos_9000-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/evmos:v13.0.2",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.evmosd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "aevmos",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000aevmos",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/evmos/evmos",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "evmos_9000-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/evmos:v13.0.2",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.evmosd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-evmos-9000-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "evmos/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-evmos-9000-1",
        "app.kubernetes.io/part-of": "evmos_9000-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "evmos_9000-1",
        "starship.io/chain-name": "evmos",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-evmos-9000-1",
    },
  },
  "evmos/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "evmos_9000-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "evmos_9000-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "evmos_9000-1",
        "starship.io/chain-name": "evmos",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "evmos-9000-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "evmos_9000-1-validator",
      },
    },
  },
  "evmos/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "evmos_9000-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "evmos_9000-1-validator",
        "app.kubernetes.io/part-of": "evmos_9000-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "evmos_9000-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "evmos",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "evmos-9000-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "evmos_9000-1-validator",
        },
      },
      "serviceName": "evmos-9000-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "evmos_9000-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "evmos_9000-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "aevmos",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000aevmos",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/evmos/evmos",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "evmos_9000-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "evmos-9000-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/evmos:v13.0.2",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.evmosd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "aevmos",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000aevmos",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/evmos/evmos",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "evmos_9000-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "evmos-9000-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.evmosd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.evmosd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.evmosd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.evmosd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.evmosd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: evmos_9000-1. Waiting for it to start..."
  echo "Checking: http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "aevmos",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000aevmos",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/evmos/evmos",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "evmos_9000-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "evmos-9000-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/evmos:v13.0.2",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.evmosd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "aevmos",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000aevmos",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/evmos/evmos",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.evmosd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "evmosd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "evmos_9000-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "evmos-9000-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/evmos:v13.0.2",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.evmosd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-evmos-9000-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "evmos_9000-1,cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "evmos,cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://evmos-9000-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://evmos-9000-1-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://evmos-9000-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/evmos_9000-1",
                  "name": "registry-evmos-9000-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: evmos_9000-1. Waiting for it to start..."
  echo "Checking: http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-evmos-9000-1",
              },
              "name": "registry-evmos-9000-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/evmos-9000-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "evmos",
  "assets": [
    {
      "base": "aevmos",
      "description": "The native EVM, governance and staking token of the Evmos Hub",
      "denom_units": [
        {
          "denom": "aevmos",
          "exponent": 0
        },
        {
          "denom": "evmos",
          "exponent": 18
        }
      ],
      "name": "Evmos",
      "display": "evmos",
      "symbol": "EVMOS",
      "logo_URIs": {
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/evmos/images/evmos.svg",
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/evmos/images/evmos.png"
      },
      "coingecko_id": "evmos"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "evmos",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "evmos_9000-1",
  "pretty_name": "Evmos Devnet",
  "bech32_prefix": "evmos",
  "daemon_name": "evmosd",
  "node_home": "/root/.evmosd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "60",
  "fees": {
    "fee_tokens": [
      {
        "denom": "aevmos",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "aevmos"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/evmos/evmos",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-evmos-9000-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-evmos-9000-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-evmos-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "evmos_9000-1"
type = "CosmosSdk"
key_name = "evmos_9000-1-cli"

rpc_addr = "http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "evmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'ethermint', proto_type = { pk_type = '/ethermint.crypto.v1.ethsecp256k1.PubKey' } }
gas_price = { price = 2500000, denom = "aevmos" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "evmos_9000-1"
type = "CosmosSdk"
key_name = "evmos_9000-1"

rpc_addr = "http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "evmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'ethermint', proto_type = { pk_type = '/ethermint.crypto.v1.ethsecp256k1.PubKey' } }
gas_price = { price = 2500000, denom = "aevmos" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-evmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-evmos-cosmos",
    },
  },
  "relayer/hermes-evmos-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-evmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-evmos-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-evmos-cosmos",
      },
    },
  },
  "relayer/hermes-evmos-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-evmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-evmos-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-evmos-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-evmos-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-evmos-cosmos",
            "app.kubernetes.io/rawname": "evmos-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: evmos_9000-1. Waiting for it to start..."
  echo "Checking: http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for evmos_9000-1..."
hermes keys add \\
  --chain evmos_9000-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name evmos_9000-1 \\
  --hd-path "m/44'/60'/0'/0/0"
DENOM="aevmos"
RLY_ADDR=$(hermes --json keys list --chain evmos_9000-1 | tail -1 | jq -r '.result."evmos_9000-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for evmos_9000-1-cli..."
hermes keys add \\
  --chain evmos_9000-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name evmos_9000-1-cli \\
  --hd-path "m/44'/60'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain evmos_9000-1 | tail -1 | jq -r '.result."evmos_9000-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://evmos-9000-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain evmos_9000-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-evmos-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: evmos should have proper file organization for evmos: evmos-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "evmos": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "evmos-9000-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-evmos-cosmos-configmap.yaml",
    "hermes-evmos-cosmos-service.yaml",
    "hermes-evmos-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: evmos should have proper file organization for evmos: evmos-resource-counts 1`] = `
{
  "ConfigMap": 7,
  "Deployment": 1,
  "Service": 5,
  "StatefulSet": 4,
}
`;

exports[`BuilderManager Config Files Tests Config: hyperweb should generate valid YAML manifests for hyperweb: hyperweb-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "frontend/playground-deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "frontend",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "playground",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "playground",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "playground",
          "app.kubernetes.io/name": "playground",
        },
      },
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "frontend",
            "sla": "high",
            "tier": "frontend",
          },
          "labels": {
            "app.kubernetes.io/instance": "playground",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "playground",
            "app.kubernetes.io/type": "custom",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": {
                "CHAIN_FAUCET_URL": "http://localhost:8000",
                "CHAIN_RPC_URL": "http://localhost:26657",
                "REGISTRY_REST_URL": "http://localhost:8081",
                "S3_BUCKET_URL": "https://hyperweb-playground.s3.amazonaws.com/create-hyperweb-app",
                "S3_TARBALL_NAME": "latest.tar.gz",
              },
              "image": "ghcr.io/hyperweb-io/hyperweb-playground:latest",
              "imagePullPolicy": "Always",
              "name": "playground",
              "ports": [
                {
                  "containerPort": 3000,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
            },
          ],
        },
      },
    },
  },
  "frontend/playground-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "frontend",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "playground",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "playground",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": "http",
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "playground",
      },
    },
  },
  "hyperweb/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "test-hyperweb-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "test-hyperweb-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "test-hyperweb-1",
        "starship.io/chain-name": "hyperweb",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "test-hyperweb-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "test-hyperweb-1-genesis",
      },
    },
  },
  "hyperweb/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "test-hyperweb-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "test-hyperweb-1-genesis",
        "app.kubernetes.io/part-of": "test-hyperweb-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "test-hyperweb-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "hyperweb",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "test-hyperweb-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "test-hyperweb-1-genesis",
        },
      },
      "serviceName": "test-hyperweb-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "test-hyperweb-1-genesis",
            "app.kubernetes.io/rawname": "test-hyperweb-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "test-hyperweb-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uhyper",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uhyper,100000000000000uhypweb,100000000000000uatom,100000000000000uusdc",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/hyperweb-io/hyperweb",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "test-hyperweb-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/hyperweb-io/hyperweb:latest",
              "imagePullPolicy": "Always",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.hyperd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "test-hyperweb-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.hyperd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.hyperd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.hyperd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.hyperd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.hyperd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "Always",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.hyperd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "hyperd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "test-hyperweb-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uhyper,100000000000000uhypweb,100000000000000uatom,100000000000000uusdc",
                },
              ],
              "image": "ghcr.io/hyperweb-io/hyperweb:latest",
              "imagePullPolicy": "Always",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uhyper",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uhyper,100000000000000uhypweb,100000000000000uatom,100000000000000uusdc",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/hyperweb-io/hyperweb",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "test-hyperweb-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/hyperweb-io/hyperweb:latest",
              "imagePullPolicy": "Always",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.hyperd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uhyper",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uhyper,100000000000000uhypweb,100000000000000uatom,100000000000000uusdc",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/hyperweb-io/hyperweb",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "test-hyperweb-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/hyperweb-io/hyperweb:latest",
              "imagePullPolicy": "Always",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.hyperd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-test-hyperweb-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "hyperweb/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-test-hyperweb-1",
        "app.kubernetes.io/part-of": "test-hyperweb-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "test-hyperweb-1",
        "starship.io/chain-name": "hyperweb",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-test-hyperweb-1",
    },
  },
  "hyperweb/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "test-hyperweb-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "test-hyperweb-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "test-hyperweb-1",
        "starship.io/chain-name": "hyperweb",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "test-hyperweb-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "test-hyperweb-1-validator",
      },
    },
  },
  "hyperweb/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "test-hyperweb-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "test-hyperweb-1-validator",
        "app.kubernetes.io/part-of": "test-hyperweb-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "test-hyperweb-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "hyperweb",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "test-hyperweb-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "test-hyperweb-1-validator",
        },
      },
      "serviceName": "test-hyperweb-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "test-hyperweb-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "test-hyperweb-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uhyper",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uhyper,100000000000000uhypweb,100000000000000uatom,100000000000000uusdc",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/hyperweb-io/hyperweb",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "test-hyperweb-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "test-hyperweb-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/hyperweb-io/hyperweb:latest",
              "imagePullPolicy": "Always",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.hyperd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uhyper",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uhyper,100000000000000uhypweb,100000000000000uatom,100000000000000uusdc",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/hyperweb-io/hyperweb",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "test-hyperweb-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "test-hyperweb-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.hyperd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.hyperd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.hyperd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.hyperd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "Always",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.hyperd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://test-hyperweb-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: test-hyperweb-1. Waiting for it to start..."
  echo "Checking: http://test-hyperweb-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "Always",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uhyper",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uhyper,100000000000000uhypweb,100000000000000uatom,100000000000000uusdc",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/hyperweb-io/hyperweb",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "test-hyperweb-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "test-hyperweb-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/hyperweb-io/hyperweb:latest",
              "imagePullPolicy": "Always",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.hyperd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uhyper",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uhyper,100000000000000uhypweb,100000000000000uatom,100000000000000uusdc",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/hyperweb-io/hyperweb",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.hyperd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "hyperd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "test-hyperweb-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "test-hyperweb-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/hyperweb-io/hyperweb:latest",
              "imagePullPolicy": "Always",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.hyperd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-test-hyperweb-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "test-hyperweb-1",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "hyperweb",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://test-hyperweb-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://test-hyperweb-1-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://test-hyperweb-1-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/test-hyperweb-1",
                  "name": "registry-test-hyperweb-1",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://test-hyperweb-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: test-hyperweb-1. Waiting for it to start..."
  echo "Checking: http://test-hyperweb-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "Always",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-test-hyperweb-1",
              },
              "name": "registry-test-hyperweb-1",
            },
          ],
        },
      },
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "registry/test-hyperweb-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "hyperweb",
  "assets": [
    {
      "base": "uhyper",
      "description": "The meme coin for Hyperweb chain.",
      "name": "Hyper",
      "display": "hyper",
      "symbol": "HYPR",
      "logo_URIs": {
        "png": "https://gist.githubusercontent.com/Anmol1696/bea1b3835dfb0fce3ab9ed993f5a0792/raw/7065493384a51c888752284be7c1afbf6135b50a/logo-png.png",
        "svg": "https://gist.githubusercontent.com/Anmol1696/bea1b3835dfb0fce3ab9ed993f5a0792/raw/7065493384a51c888752284be7c1afbf6135b50a/logo-svg.svg"
      },
      "denom_units": [
        {
          "denom": "uhyper",
          "exponent": 0
        },
        {
          "denom": "hyper",
          "exponent": 6
        }
      ],
      "coingecko_id": "hyper",
      "keywords": [
        "hyper"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "hyperweb",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "test-hyperweb-1",
  "pretty_name": "Hyperweb Devnet",
  "bech32_prefix": "hyper",
  "daemon_name": "hyperd",
  "node_home": "/root/.hyperd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uhyper",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uhyper"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/hyperweb-io/hyperweb",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-test-hyperweb-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-test-hyperweb-1",
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: hyperweb should have proper file organization for hyperweb: hyperweb-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "frontend": [
    "playground-deployment.yaml",
    "playground-service.yaml",
  ],
  "hyperweb": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "registry": [
    "deployment.yaml",
    "service.yaml",
    "test-hyperweb-1-configmap.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: hyperweb should have proper file organization for hyperweb: hyperweb-resource-counts 1`] = `
{
  "ConfigMap": 4,
  "Deployment": 2,
  "Service": 4,
  "StatefulSet": 2,
}
`;

exports[`BuilderManager Config Files Tests Config: ingress-monitoring-full should generate valid YAML manifests for ingress-monitoring-full: ingress-monitoring-full-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
        {
          "name": "metrics",
          "port": 26660,
          "protocol": "TCP",
          "targetPort": 26660,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests-full-stack",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests-full-stack",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "gaiad",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "cosmoshub/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
        {
          "name": "metrics",
          "port": 26660,
          "protocol": "TCP",
          "targetPort": 26660,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-validator",
      },
    },
  },
  "cosmoshub/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests-full-stack",
          "app.kubernetes.io/name": "cosmoshub-4-validator",
        },
      },
      "serviceName": "cosmoshub-4-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests-full-stack",
            "app.kubernetes.io/name": "cosmoshub-4-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "explorer/configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "cosmoshub-4.json": "{"chain_name":"cosmoshub-4","coingecko":"cosmoshub","api":"https://rest.cosmoshub-4-genesis.starship-test.io:443","rpc":["https://rpc.cosmoshub-4-genesis.starship-test.io:443"],"snapshot_provider":"","sdk_version":"0.45.6","coin_type":118,"min_tx_fee":"3000","addr_prefix":"cosmos","logo":"","assets":[{"base":"uatom","symbol":"COSMOS","exponent":"6","coingecko_id":"cosmoshub-4","logo":""}]}",
      "osmosis-1.json": "{"chain_name":"osmosis-1","coingecko":"osmosis","api":"https://rest.osmosis-1-genesis.starship-test.io:443","rpc":["https://rpc.osmosis-1-genesis.starship-test.io:443"],"snapshot_provider":"","sdk_version":"0.45.6","coin_type":118,"min_tx_fee":"3000","addr_prefix":"osmo","logo":"","assets":[{"base":"uosmo","symbol":"OSMO","exponent":"6","coingecko_id":"osmosis-1","logo":""}]}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "explorer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "explorer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "explorer",
    },
  },
  "explorer/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "explorer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "explorer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "explorer",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "explorer",
          "app.kubernetes.io/name": "explorer",
        },
      },
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "explorer",
            "app.kubernetes.io/name": "explorer",
            "app.kubernetes.io/rawname": "explorer",
            "app.kubernetes.io/type": "ping-pub",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "CHAINS_CONFIG_PATH",
                  "value": "/explorer",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/ping-pub:6b7b0d096946b6bcd75d15350c7345da0d4576db",
              "imagePullPolicy": "IfNotPresent",
              "name": "explorer",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/explorer",
                  "name": "explorer-config",
                },
              ],
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "explorer",
              },
              "name": "explorer-config",
            },
          ],
        },
      },
    },
  },
  "explorer/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "explorer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "explorer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "explorer",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "protocol": "TCP",
          "targetPort": 8080,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "explorer",
      },
    },
  },
  "frontend/web-app-deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "frontend",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "web-app",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "web-app",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "web-app",
          "app.kubernetes.io/name": "web-app",
        },
      },
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "frontend",
            "sla": "high",
            "tier": "frontend",
          },
          "labels": {
            "app.kubernetes.io/instance": "web-app",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "web-app",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests-full-stack",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [],
              "image": "nginx:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "web-app",
              "ports": [],
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
              },
            },
          ],
        },
      },
    },
  },
  "frontend/web-app-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "frontend",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "web-app",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "web-app",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [],
      "selector": {
        "app.kubernetes.io/name": "web-app",
      },
    },
  },
  "ingress/letsencrypt-prod-issuer.yaml": {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Issuer",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "ingress",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "letsencrypt-prod",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "letsencrypt-prod",
    },
    "spec": {
      "acme": {
        "email": "devops@cosmoslogy.zone",
        "privateKeySecretRef": {
          "name": "letsencrypt-prod",
        },
        "server": "https://acme-v02.api.letsencrypt.org/directory",
        "solvers": [
          {
            "http01": {
              "ingress": {
                "class": "nginx",
              },
            },
          },
        ],
      },
    },
  },
  "ingress/nginx-ingress-ingress.yaml": {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "cert-manager.io/issuer": "letsencrypt-prod",
        "nginx.ingress.kubernetes.io/rewrite-target": "/$1",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "labels": {
        "app.kubernetes.io/component": "ingress",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "nginx-ingress",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "nginx-ingress",
    },
    "spec": {
      "ingressClassName": "nginx",
      "rules": [
        {
          "host": "explorer.starship-test.io",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "explorer",
                    "port": {
                      "name": "http",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
        {
          "host": "registry.starship-test.io",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "registry",
                    "port": {
                      "name": "http",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
        {
          "host": "rest.osmosis-1-genesis.starship-test.io",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "osmosis-1-genesis",
                    "port": {
                      "name": "rest",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
              {
                "backend": {
                  "service": {
                    "name": "osmosis-1-genesis",
                    "port": {
                      "name": "faucet",
                    },
                  },
                },
                "path": "/faucet/(.*)",
                "pathType": "ImplementationSpecific",
              },
              {
                "backend": {
                  "service": {
                    "name": "osmosis-1-genesis",
                    "port": {
                      "name": "exposer",
                    },
                  },
                },
                "path": "/exposer/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
        {
          "host": "rpc.osmosis-1-genesis.starship-test.io",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "osmosis-1-genesis",
                    "port": {
                      "name": "rpc",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
        {
          "host": "rest.cosmoshub-4-genesis.starship-test.io",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "cosmoshub-4-genesis",
                    "port": {
                      "name": "rest",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
              {
                "backend": {
                  "service": {
                    "name": "cosmoshub-4-genesis",
                    "port": {
                      "name": "faucet",
                    },
                  },
                },
                "path": "/faucet/(.*)",
                "pathType": "ImplementationSpecific",
              },
              {
                "backend": {
                  "service": {
                    "name": "cosmoshub-4-genesis",
                    "port": {
                      "name": "exposer",
                    },
                  },
                },
                "path": "/exposer/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
        {
          "host": "rpc.cosmoshub-4-genesis.starship-test.io",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "cosmoshub-4-genesis",
                    "port": {
                      "name": "rpc",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
        {
          "host": "rest.hermes-osmos-cosmos.starship-test.io",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "hermes-osmos-cosmos",
                    "port": {
                      "name": "rest",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
              {
                "backend": {
                  "service": {
                    "name": "hermes-osmos-cosmos",
                    "port": {
                      "name": "exposer",
                    },
                  },
                },
                "path": "/exposer/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
        {
          "host": "web-app.starship-test.io",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "web-app",
                    "port": {
                      "name": "http",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "explorer.starship-test.io",
          ],
          "secretName": "explorer.nginx-ingress-tls",
        },
        {
          "hosts": [
            "registry.starship-test.io",
          ],
          "secretName": "registry.nginx-ingress-tls",
        },
        {
          "hosts": [
            "rest.osmosis-1-genesis.starship-test.io",
          ],
          "secretName": "rest.osmosis-1-genesis.nginx-ingress-tls",
        },
        {
          "hosts": [
            "rpc.osmosis-1-genesis.starship-test.io",
          ],
          "secretName": "rpc.osmosis-1-genesis.nginx-ingress-tls",
        },
        {
          "hosts": [
            "rest.cosmoshub-4-genesis.starship-test.io",
          ],
          "secretName": "rest.cosmoshub-4-genesis.nginx-ingress-tls",
        },
        {
          "hosts": [
            "rpc.cosmoshub-4-genesis.starship-test.io",
          ],
          "secretName": "rpc.cosmoshub-4-genesis.nginx-ingress-tls",
        },
        {
          "hosts": [
            "web-app.starship-test.io",
          ],
          "secretName": "web-app.nginx-ingress-tls",
        },
      ],
    },
  },
  "monitoring/grafana-dashboard-providers-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "default.yaml": "{
  "apiVersion": 1,
  "providers": [
    {
      "name": "chain-dashboard",
      "orgId": 1,
      "type": "file",
      "allowUiUpdates": true,
      "options": {
        "path": "/var/lib/grafana/dashboards"
      }
    }
  ]
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "grafana-dashboard-providers",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "grafana-dashboard-providers",
    },
  },
  "monitoring/grafana-dashboards-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "chains.json": "{
  "__inputs": [],
  "__elements": {},
  "__requires": [
    {
      "type": "panel",
      "id": "bargauge",
      "name": "Bar gauge",
      "version": ""
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "10.0.0"
    },
    {
      "type": "panel",
      "id": "graph",
      "name": "Graph (old)",
      "version": ""
    },
    {
      "type": "datasource",
      "id": "prometheus",
      "name": "Prometheus",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 3
      },
      "id": 37,
      "panels": [],
      "title": "Tendermint Metrics",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.lineWidth",
                "value": 1
              },
              {
                "id": "custom.fillOpacity",
                "value": 10
              },
              {
                "id": "max"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 4
      },
      "id": 2,
      "links": [],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_missing_validators\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "instant": false,
          "interval": "",
          "legendFormat": "missing validators",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "avg by (network) ({__name__=~\\"^(tendermint|cometbft)_consensus_validators\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "interval": "",
          "legendFormat": "total validators",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "avg by (network) ({__name__=~\\"^(tendermint|cometbft)_consensus_missing_validators$\\",network=\\"$network\\",instance=\\"$instance\\"}) / avg by (network) ({__name__=~\\"^(tendermint|cometbft)_consensus_validators$\\",network=\\"$network\\",instance=\\"$instance\\"}) * 100",
          "hide": false,
          "interval": "",
          "legendFormat": "missing %",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Number of Validators",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "D"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 4
      },
      "id": 12,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "max by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_validators_power\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "hide": false,
          "legendFormat": "Total",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "max by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_validator_power\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "hide": true,
          "interval": "1s",
          "legendFormat": "Validator",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "max by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_missing_validators_power\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "hide": false,
          "legendFormat": "Missing",
          "range": true,
          "refId": "C"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "max by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_missing_validators_power$\\",network=\\"$network\\",instance=\\"$instance\\"}) / max by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_validators_power$\\",network=\\"$network\\",instance=\\"$instance\\"}) * 100",
          "hide": false,
          "legendFormat": "Missing %",
          "range": true,
          "refId": "D"
        }
      ],
      "title": "Voting power",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "blue",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 10
      },
      "id": 8,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "8.3.6",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "max by (instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_latest_block_height\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "format": "time_series",
          "instant": false,
          "interval": "1s",
          "legendFormat": "{{instance}}",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "max by (network) ({__name__=~\\"^(tendermint|cometbft)_consensus_validator_last_signed_height\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "hide": false,
          "legendFormat": "Validator last signed",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Consensus Height",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "green",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 10
      },
      "id": 14,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "{__name__=~\\"^(tendermint|cometbft)_p2p_peers\\",network=\\"$network\\",instance=\\"$instance\\"}",
          "interval": "1s",
          "legendFormat": "peers {{instance}}",
          "queryType": "randomWalk",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "P2P connections",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "s"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "D"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 16
      },
      "id": 18,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "avg by (network) (rate({__name__=~\\"^(tendermint|cometbft)_state_block_processing_time_sum\\",network=\\"$network\\",instance=\\"$instance\\"}[1m]))",
          "hide": true,
          "interval": "",
          "legendFormat": "block processing time (1m)",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "avg by (network) (1/rate({__name__=~\\"^(tendermint|cometbft)_consensus_height\\",network=\\"$network\\",instance=\\"$instance\\"}[1m]))",
          "hide": false,
          "legendFormat": "1m",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "avg by (network) (1/rate({__name__=~\\"^(tendermint|cometbft)_consensus_height\\",network=\\"$network\\",instance=\\"$instance\\"}[1h]))",
          "hide": false,
          "legendFormat": "1h",
          "range": true,
          "refId": "C"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "avg by (network) (1/rate({__name__=~\\"^(tendermint|cometbft)_consensus_height\\",network=\\"$network\\",instance=\\"$instance\\"}[1d]))",
          "hide": false,
          "legendFormat": "1d",
          "range": true,
          "refId": "D"
        }
      ],
      "title": "Block Time",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "line"
            }
          },
          "links": [],
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              }
            ]
          },
          "unit": "short"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "custom.fillOpacity",
                "value": 20
              },
              {
                "id": "custom.lineWidth",
                "value": 1
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 16
      },
      "id": 25,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.5.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "max by (network) ({__name__=~\\"^(tendermint|cometbft)_consensus_validator_missed_blocks\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "interval": "",
          "legendFormat": "total",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "max by (network) (delta({__name__=~\\"^(tendermint|cometbft)_consensus_validator_missed_blocks\\",network=\\"$network\\",instance=\\"$instance\\"}[1h]))",
          "hide": false,
          "legendFormat": "1h",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Validator Missed Blocks",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "green",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "bytes"
              },
              {
                "id": "min"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 22
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "{__name__=~\\"^(tendermint|cometbft)_mempool_size\\",network=\\"$network\\",instance=\\"$instance\\"}",
          "interval": "1s",
          "legendFormat": "{{instance}} - Total Txs",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "rate({__name__=~\\"^(tendermint|cometbft)_mempool_tx_size_bytes_sum\\",network=\\"$network\\",instance=\\"$instance\\"}[1m])",
          "hide": false,
          "interval": "1s",
          "legendFormat": "{{instance}} - Tx Size Inflow (1min)",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Mempool",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "green",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "custom.pointSize",
                "value": 1
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 22
      },
      "id": 56,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_total_txs\\",network=\\"$network\\",instance=\\"$instance\\"}[1m])",
          "interval": "1s",
          "legendFormat": "Confirmed (1min)",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_mempool_failed_txs\\",network=\\"$network\\",instance=\\"$instance\\"}[1m])",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Failed (1min)",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_mempool_failed_txs$\\",network=\\"$network\\",instance=\\"$instance\\"}[1m]) / (increase({__name__=~\\"^(tendermint|cometbft)_mempool_failed_txs$\\",network=\\"$network\\",instance=\\"$instance\\"}[1m]) + increase({__name__=~\\"^(tendermint|cometbft)_consensus_total_txs$\\",network=\\"$network\\",instance=\\"$instance\\"}[1m])) * 100",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Total % (1min)",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Finalized Transactions",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "green",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 28
      },
      "id": 57,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_block_gossip_parts_received\\",network=\\"$network\\",matches_current=\\"true\\",instance=\\"$instance\\"}[1m])",
          "interval": "1s",
          "legendFormat": "Parts Received - Matching current (1m)",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_block_gossip_parts_received\\",network=\\"$network\\",matches_current=\\"false\\",instance=\\"$instance\\"}[1m])",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Parts Received - Not matching (1m)",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Block Parts",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 28
      },
      "id": 58,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "{__name__=~\\"^(tendermint|cometbft)_consensus_block_size_bytes\\",network=\\"$network\\",instance=\\"$instance\\"}",
          "interval": "1s",
          "legendFormat": "Block Size",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Block Size",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 0,
        "y": 34
      },
      "id": 59,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "{__name__=~\\"^(tendermint|cometbft)_consensus_rounds\\",network=\\"$network\\",instance=\\"$instance\\"}",
          "interval": "1s",
          "legendFormat": "Consensus Rounds",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Consensus Rounds",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 12,
        "y": 34
      },
      "id": 60,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_step_duration_seconds_sum\\",network=\\"$network\\",step=\\"Prevote\\",instance=\\"$instance\\"}[1m]) / 100",
          "interval": "1s",
          "legendFormat": "Prevote",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_step_duration_seconds_sum\\",network=\\"$network\\",step=\\"Precommit\\",instance=\\"$instance\\"}[1m]) / 100",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Precommit",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_step_duration_seconds_sum\\",network=\\"$network\\",step=\\"Commit\\",instance=\\"$instance\\"}[1m]) / 100",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Commit",
          "range": true,
          "refId": "C"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_step_duration_seconds_sum\\",network=\\"$network\\",step=\\"NewHeight\\",instance=\\"$instance\\"}[1m]) / 100",
          "hide": false,
          "interval": "1s",
          "legendFormat": "New Height",
          "range": true,
          "refId": "D"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_step_duration_seconds_sum\\",network=\\"$network\\",step=\\"Propose\\",instance=\\"$instance\\"}[1m]) / 100",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Propose",
          "range": true,
          "refId": "E"
        }
      ],
      "title": "Step duration",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "binBps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 0,
        "y": 39
      },
      "id": 62,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_p2p_message_receive_bytes_total\\",network=\\"$network\\",instance=\\"$instance\\"}[1m]) / 600",
          "interval": "1s",
          "legendFormat": "{{message_type}}",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Bytes received / s",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "binBps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 12,
        "y": 39
      },
      "id": 63,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_p2p_message_send_bytes_total\\",network=\\"$network\\",instance=\\"$instance\\"}[1m])/600",
          "interval": "1s",
          "legendFormat": "{{message_type}}",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Bytes sent / s",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 20,
        "w": 12,
        "x": 0,
        "y": 44
      },
      "id": 64,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_p2p_message_receive_bytes_total\\",network=\\"$network\\",instance=\\"$instance\\"}[1d])",
          "interval": "1s",
          "legendFormat": "{{message_type}}",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Bytes received (1d)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 20,
        "w": 12,
        "x": 12,
        "y": 44
      },
      "id": 65,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_p2p_message_send_bytes_total\\",network=\\"$network\\",instance=\\"$instance\\"}[1d])",
          "interval": "1s",
          "legendFormat": "{{message_type}}",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Bytes sent (1d)",
      "type": "timeseries"
    }
  ],
  "refresh": "",
  "revision": 1,
  "schemaVersion": 38,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "definition": "label_values({__name__=~\\"^(tendermint|cometbft)_consensus_latest_block_height\\",network=~\\".*\\"},network)",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "network",
        "options": [],
        "query": {
          "query": "label_values({__name__=~\\"^(tendermint|cometbft)_consensus_latest_block_height\\",network=~\\".*\\"},network)",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "definition": "label_values(up{network=\\"$network\\"},instance)",
        "hide": 0,
        "includeAll": false,
        "label": "instance",
        "multi": false,
        "name": "instance",
        "options": [],
        "query": {
          "query": "label_values(up{network=\\"$network\\"},instance)",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-15m",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Chain Dashboard",
  "uid": "1jUwLdghefUwnk-starship-chain",
  "version": 8,
  "weekStart": ""
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "grafana-dashboards",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "grafana-dashboards",
    },
  },
  "monitoring/grafana-datasources-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "prometheus.yaml": "{
  "apiVersion": 1,
  "datasources": [
    {
      "access": "proxy",
      "editable": true,
      "name": "prometheus",
      "orgId": 1,
      "type": "prometheus",
      "url": "http://prometheus.aws-starship.svc:9090",
      "version": 1
    }
  ]
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "grafana-datasources",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "grafana-datasources",
    },
  },
  "monitoring/grafana-deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "grafana",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "grafana",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "monitoring",
            "app.kubernetes.io/name": "grafana",
          },
          "name": "grafana",
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "GF_SERVER_HTTP_PORT",
                  "value": "8080",
                },
                {
                  "name": "GF_SERVER_HTTP_ADDR",
                  "value": "0.0.0.0",
                },
                {
                  "name": "GF_AUTH_DISABLE_LOGIN_FORM",
                  "value": "true",
                },
                {
                  "name": "GF_AUTH_ANONYMOUS_ENABLED",
                  "value": "true",
                },
                {
                  "name": "GF_AUTH_ANONYMOUS_ORG_NAME",
                  "value": "Main Org.",
                },
                {
                  "name": "GF_AUTH_ANONYMOUS_ORG_ROLE",
                  "value": "Editor",
                },
              ],
              "image": "grafana/grafana:latest",
              "name": "grafana",
              "ports": [
                {
                  "containerPort": 3000,
                  "name": "grafana",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/lib/grafana",
                  "name": "grafana-storage",
                },
                {
                  "mountPath": "/etc/grafana/provisioning/datasources",
                  "name": "grafana-datasources",
                  "readOnly": false,
                },
                {
                  "mountPath": "/etc/grafana/provisioning/dashboards",
                  "name": "grafana-dashboard-providers",
                  "readOnly": false,
                },
                {
                  "mountPath": "/var/lib/grafana/dashboards",
                  "name": "grafana-dashboards",
                  "readOnly": false,
                },
              ],
            },
          ],
          "volumes": [
            {
              "configMap": {
                "defaultMode": 420,
                "name": "grafana-datasources",
              },
              "name": "grafana-datasources",
            },
            {
              "configMap": {
                "defaultMode": 420,
                "name": "grafana-dashboard-providers",
              },
              "name": "grafana-dashboard-providers",
            },
            {
              "configMap": {
                "name": "grafana-dashboards",
              },
              "name": "grafana-dashboards",
            },
            {
              "emptyDir": {},
              "name": "grafana-storage",
            },
          ],
        },
      },
    },
  },
  "monitoring/grafana-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "prometheus.io/port": "8080",
        "prometheus.io/scrape": "true",
      },
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "grafana",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "grafana",
      },
    },
  },
  "monitoring/prometheus-clusterrole.yaml": {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "prometheus",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "prometheus",
    },
    "rules": [
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "nodes",
          "nodes/proxy",
          "services",
          "endpoints",
          "pods",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
        ],
      },
      {
        "apiGroups": [
          "extensions",
        ],
        "resources": [
          "ingresses",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
        ],
      },
      {
        "nonResourceURLs": [
          "/metrics",
        ],
        "verbs": [
          "get",
        ],
      },
    ],
  },
  "monitoring/prometheus-clusterrolebinding.yaml": {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "prometheus",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "prometheus",
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "prometheus",
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "default",
        "namespace": "$(NAMESPACE)",
      },
    ],
  },
  "monitoring/prometheus-config-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "prometheus.yml": "# my global config
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).
scrape_configs:
  # The job name is added as a label \`job=<job_name>\` to any timeseries scraped from this config.
  - job_name: 'kubernetes-apiservers'

    kubernetes_sd_configs:
      - role: endpoints
    scheme: https

    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  - job_name: 'kubernetes-nodes'

    scheme: https

    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

    kubernetes_sd_configs:
      - role: node

    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/\${1}/proxy/metrics

  - job_name: 'kubernetes-pods'

    kubernetes_sd_configs:
      - role: pod

    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\\d+)?;(\\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  - job_name: 'kube-state-metrics'
    static_configs:
      - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']

  - job_name: kubernetes-nodes-cadvisor
    scrape_interval: 10s
    scrape_timeout: 10s
    scheme: https  # remove if you want to scrape metrics on insecure port
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      # Only for Kubernetes ^1.7.3.
      # See: https://github.com/prometheus/prometheus/issues/2916
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/\${1}/proxy/metrics/cadvisor
    metric_relabel_configs:
      - action: replace
        source_labels: [id]
        regex: '^/machine\\.slice/machine-rkt\\\\x2d([^\\\\]+)\\\\.+/([^/]+)\\.service$'
        target_label: rkt_container_name
        replacement: '\${2}-\${1}'
      - action: replace
        source_labels: [id]
        regex: '^/system\\.slice/(.+)\\.service$'
        target_label: systemd_service_name
        replacement: '\${1}'

  - job_name: 'kubernetes-service-endpoints'

    kubernetes_sd_configs:
      - role: endpoints

    relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\\d+)?;(\\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
  
  - job_name: 'prometheus'
    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.
    static_configs:
      - targets: ['localhost:9090']
  
  - job_name: 'osmosis-genesis'
    static_configs:
      - targets: ['osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26660']
        labels:
          instance: genesis
          type: genesis
          network: "osmosis"
  - job_name: 'osmosis-validator-0'
    static_configs:
      - targets: ['osmosis-1-validator-0.osmosis-1-validator.$(NAMESPACE).svc.cluster.local:26660']
        labels:
          instance: "validator-0"
          type: validator
          network: "osmosis"
  - job_name: 'cosmoshub-genesis'
    static_configs:
      - targets: ['cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26660']
        labels:
          instance: genesis
          type: genesis
          network: "cosmoshub"
  - job_name: 'cosmoshub-validator-0'
    static_configs:
      - targets: ['cosmoshub-4-validator-0.cosmoshub-4-validator.$(NAMESPACE).svc.cluster.local:26660']
        labels:
          instance: "validator-0"
          type: validator
          network: "cosmoshub"
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "prometheus-config",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "prometheus-config",
    },
  },
  "monitoring/prometheus-deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "prometheus",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "prometheus",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "prometheus",
        },
      },
      "template": {
        "metadata": {
          "annotations": {
            "prometheus.io/port": "9090",
            "prometheus.io/scrape": "true",
          },
          "labels": {
            "app.kubernetes.io/instance": "monitoring",
            "app.kubernetes.io/name": "prometheus",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "--storage.tsdb.retention=6h",
                "--storage.tsdb.path=/prometheus",
                "--config.file=/etc/prometheus/prometheus.yml",
              ],
              "image": "prom/prometheus",
              "name": "prometheus",
              "ports": [
                {
                  "containerPort": 9090,
                  "name": "web",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/prometheus",
                  "name": "prometheus-config-volume",
                },
                {
                  "mountPath": "/prometheus",
                  "name": "prometheus-storage-volume",
                },
              ],
            },
          ],
          "restartPolicy": "Always",
          "volumes": [
            {
              "configMap": {
                "defaultMode": 420,
                "name": "prometheus-config",
              },
              "name": "prometheus-config-volume",
            },
            {
              "emptyDir": {},
              "name": "prometheus-storage-volume",
            },
          ],
        },
      },
    },
  },
  "monitoring/prometheus-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "prometheus.io/port": "9090",
        "prometheus.io/scrape": "true",
      },
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "prometheus",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "prometheus",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "prometheus",
      },
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
        {
          "name": "metrics",
          "port": 26660,
          "protocol": "TCP",
          "targetPort": 26660,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests-full-stack",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests-full-stack",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "osmosisd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "osmosis/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
        {
          "name": "metrics",
          "port": 26660,
          "protocol": "TCP",
          "targetPort": 26660,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-validator",
      },
    },
  },
  "osmosis/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests-full-stack",
          "app.kubernetes.io/name": "osmosis-1-validator",
        },
      },
      "serviceName": "osmosis-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests-full-stack",
            "app.kubernetes.io/name": "osmosis-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  },
  "explorers": [
    {
      "kind": "ping-pub",
      "url": "http://localhost:8080"
    }
  ]
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests-full-stack",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1,cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis,cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "https://grpc.osmosis-1-genesis.starship-test.io,https://grpc.cosmoshub-4-genesis.starship-test.io",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  },
  "explorers": [
    {
      "kind": "ping-pub",
      "url": "http://localhost:8080"
    }
  ]
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-osmos-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1-cli"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "hermes-osmos-cosmos",
    },
  },
  "relayer/hermes-osmos-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
      },
    },
  },
  "relayer/hermes-osmos-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests-full-stack",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-osmos-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-osmos-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-osmos-cosmos",
            "app.kubernetes.io/rawname": "osmos-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for osmosis-1..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name osmosis-1 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uosmo"
RLY_ADDR=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for osmosis-1-cli..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name osmosis-1-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain osmosis-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "1Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-osmos-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: ingress-monitoring-full should have proper file organization for ingress-monitoring-full: ingress-monitoring-full-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "explorer": [
    "configmap.yaml",
    "deployment.yaml",
    "service.yaml",
  ],
  "frontend": [
    "web-app-deployment.yaml",
    "web-app-service.yaml",
  ],
  "ingress": [
    "letsencrypt-prod-issuer.yaml",
    "nginx-ingress-ingress.yaml",
  ],
  "monitoring": [
    "grafana-dashboard-providers-configmap.yaml",
    "grafana-dashboards-configmap.yaml",
    "grafana-datasources-configmap.yaml",
    "grafana-deployment.yaml",
    "grafana-service.yaml",
    "prometheus-clusterrole.yaml",
    "prometheus-clusterrolebinding.yaml",
    "prometheus-config-configmap.yaml",
    "prometheus-deployment.yaml",
    "prometheus-service.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-osmos-cosmos-configmap.yaml",
    "hermes-osmos-cosmos-service.yaml",
    "hermes-osmos-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: ingress-monitoring-full should have proper file organization for ingress-monitoring-full: ingress-monitoring-full-resource-counts 1`] = `
{
  "ClusterRole": 1,
  "ClusterRoleBinding": 1,
  "ConfigMap": 12,
  "Deployment": 5,
  "Ingress": 1,
  "Issuer": 1,
  "Service": 10,
  "StatefulSet": 5,
}
`;

exports[`BuilderManager Config Files Tests Config: ingress-only should generate valid YAML manifests for ingress-only: ingress-only-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "setup-scripts",
    },
  },
  "explorer/configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "osmosis-1.json": "{"chain_name":"osmosis-1","coingecko":"osmosis","api":"https://rest.osmosis-1-genesis.example.com:443","rpc":["https://rpc.osmosis-1-genesis.example.com:443"],"snapshot_provider":"","sdk_version":"0.45.6","coin_type":118,"min_tx_fee":"3000","addr_prefix":"osmo","logo":"","assets":[{"base":"uosmo","symbol":"OSMO","exponent":"6","coingecko_id":"osmosis-1","logo":""}]}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "explorer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "explorer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "explorer",
    },
  },
  "explorer/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "explorer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "explorer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "explorer",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "explorer",
          "app.kubernetes.io/name": "explorer",
        },
      },
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "explorer",
            "app.kubernetes.io/name": "explorer",
            "app.kubernetes.io/rawname": "explorer",
            "app.kubernetes.io/type": "ping-pub",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "CHAINS_CONFIG_PATH",
                  "value": "/explorer",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/ping-pub:6b7b0d096946b6bcd75d15350c7345da0d4576db",
              "imagePullPolicy": "IfNotPresent",
              "name": "explorer",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
                "requests": {
                  "cpu": "1",
                  "memory": "2Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/explorer",
                  "name": "explorer-config",
                },
              ],
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "explorer",
              },
              "name": "explorer-config",
            },
          ],
        },
      },
    },
  },
  "explorer/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "explorer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "explorer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "explorer",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "protocol": "TCP",
          "targetPort": 8080,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "explorer",
      },
    },
  },
  "frontend/my-app-deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "frontend",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "my-app",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "my-app",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "my-app",
          "app.kubernetes.io/name": "my-app",
        },
      },
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "frontend",
            "sla": "high",
            "tier": "frontend",
          },
          "labels": {
            "app.kubernetes.io/instance": "my-app",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "my-app",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-ingress-test",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [],
              "image": "nginx:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "my-app",
              "ports": [],
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
            },
          ],
        },
      },
    },
  },
  "frontend/my-app-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "frontend",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "my-app",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "my-app",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [],
      "selector": {
        "app.kubernetes.io/name": "my-app",
      },
    },
  },
  "ingress/cert-issuer-issuer.yaml": {
    "apiVersion": "cert-manager.io/v1",
    "kind": "Issuer",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "ingress",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cert-issuer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "cert-issuer",
    },
    "spec": {
      "acme": {
        "email": "devops@cosmoslogy.zone",
        "privateKeySecretRef": {
          "name": "cert-issuer",
        },
        "server": "https://acme-v02.api.letsencrypt.org/directory",
        "solvers": [
          {
            "http01": {
              "ingress": {
                "class": "nginx",
              },
            },
          },
        ],
      },
    },
  },
  "ingress/nginx-ingress-ingress.yaml": {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "annotations": {
        "cert-manager.io/issuer": "cert-issuer",
        "nginx.ingress.kubernetes.io/rewrite-target": "/$1",
        "nginx.ingress.kubernetes.io/use-regex": "true",
      },
      "labels": {
        "app.kubernetes.io/component": "ingress",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "nginx-ingress",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "nginx-ingress",
    },
    "spec": {
      "ingressClassName": "nginx",
      "rules": [
        {
          "host": "explorer.example.com",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "explorer",
                    "port": {
                      "name": "http",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
        {
          "host": "registry.example.com",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "registry",
                    "port": {
                      "name": "http",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
        {
          "host": "rest.osmosis-1-genesis.example.com",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "osmosis-1-genesis",
                    "port": {
                      "name": "rest",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
              {
                "backend": {
                  "service": {
                    "name": "osmosis-1-genesis",
                    "port": {
                      "name": "faucet",
                    },
                  },
                },
                "path": "/faucet/(.*)",
                "pathType": "ImplementationSpecific",
              },
              {
                "backend": {
                  "service": {
                    "name": "osmosis-1-genesis",
                    "port": {
                      "name": "exposer",
                    },
                  },
                },
                "path": "/exposer/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
        {
          "host": "rpc.osmosis-1-genesis.example.com",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "osmosis-1-genesis",
                    "port": {
                      "name": "rpc",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
        {
          "host": "my-app.example.com",
          "http": {
            "paths": [
              {
                "backend": {
                  "service": {
                    "name": "my-app",
                    "port": {
                      "name": "http",
                    },
                  },
                },
                "path": "/(.*)",
                "pathType": "ImplementationSpecific",
              },
            ],
          },
        },
      ],
      "tls": [
        {
          "hosts": [
            "explorer.example.com",
          ],
          "secretName": "explorer.nginx-ingress-tls",
        },
        {
          "hosts": [
            "registry.example.com",
          ],
          "secretName": "registry.nginx-ingress-tls",
        },
        {
          "hosts": [
            "rest.osmosis-1-genesis.example.com",
          ],
          "secretName": "rest.osmosis-1-genesis.nginx-ingress-tls",
        },
        {
          "hosts": [
            "rpc.osmosis-1-genesis.example.com",
          ],
          "secretName": "rpc.osmosis-1-genesis.nginx-ingress-tls",
        },
        {
          "hosts": [
            "my-app.example.com",
          ],
          "secretName": "my-app.nginx-ingress-tls",
        },
      ],
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-ingress-test",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-ingress-test",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "osmosisd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-ingress-test",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "https://grpc.osmosis-1-genesis.example.com",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
          ],
        },
      },
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  },
  "explorers": [
    {
      "kind": "ping-pub",
      "url": "http://localhost:8080"
    }
  ]
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-ingress-test",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: ingress-only should have proper file organization for ingress-only: ingress-only-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "explorer": [
    "configmap.yaml",
    "deployment.yaml",
    "service.yaml",
  ],
  "frontend": [
    "my-app-deployment.yaml",
    "my-app-service.yaml",
  ],
  "ingress": [
    "cert-issuer-issuer.yaml",
    "nginx-ingress-ingress.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "deployment.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: ingress-only should have proper file organization for ingress-only: ingress-only-resource-counts 1`] = `
{
  "ConfigMap": 5,
  "Deployment": 3,
  "Ingress": 1,
  "Issuer": 1,
  "Service": 4,
  "StatefulSet": 1,
}
`;

exports[`BuilderManager Config Files Tests Config: injective should generate valid YAML manifests for injective: injective-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "gaiad",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "injective/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "injective-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "injective-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "injective-1",
        "starship.io/chain-name": "injective",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "injective-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "injective-1-genesis",
      },
    },
  },
  "injective/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "injective-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "injective-1-genesis",
        "app.kubernetes.io/part-of": "injective-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "injective-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "injective",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "injective-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "injective-1-genesis",
        },
      },
      "serviceName": "injective-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "injective-1-genesis",
            "app.kubernetes.io/rawname": "injective-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "injective-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "inj",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000inj",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.injectived",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/InjectiveLabs/injective-chain-releases",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.injectived",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "injective-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/injective:v1.11.6",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.injectived",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "injective-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.injectived/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.injectived/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.injectived/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.injectived/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.injectived/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.injectived",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "injectived",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "injective-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000inj",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/injective:v1.11.6",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "inj",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000inj",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.injectived",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/InjectiveLabs/injective-chain-releases",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.injectived",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "injective-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/injective:v1.11.6",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.injectived",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "inj",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000inj",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.injectived",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/InjectiveLabs/injective-chain-releases",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.injectived",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "injective-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/injective:v1.11.6",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.injectived",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-injective-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "injective/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "createGenesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000inj}"
CHAIN_ID="\${CHAIN_ID:=injective}"
CHAIN_BIN="\${CHAIN_BIN:=injectived}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.injectived}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FEEDADMIN="inj1k2z3chspuk9wsufle69svmtmnlc07rvw9djya7"

set -eu

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_ID --recover

WASM_KEY="wasm"
WASM_MNEMONIC="juice dog over thing anger search film document sight fork enrich jungle vacuum grab more sunset winner diesel flock smooth route impulse cheap toward"

VAL_KEY="localkey"
VAL_MNEMONIC="gesture inject test cycle original hollow east ridge hen combine junk child bacon zero hope comfort vacuum milk pitch cage oppose unhappy lunar seat"

USER1_KEY="user1"
USER1_MNEMONIC="copper push brief egg scan entry inform record adjust fossil boss egg comic alien upon aspect dry avoid interest fury window hint race symptom"

USER2_KEY="user2"
USER2_MNEMONIC="maximum display century economy unlock van census kite error heart snow filter midnight usage egg venture cash kick motor survey drastic edge muffin visual"

USER3_KEY="user3"
USER3_MNEMONIC="keep liar demand upon shed essence tip undo eagle run people strong sense another salute double peasant egg royal hair report winner student diamond"

USER4_KEY="user4"
USER4_MNEMONIC="pony glide frown crisp unfold lawn cup loan trial govern usual matrix theory wash fresh address pioneer between meadow visa buffalo keep gallery swear"

USER5_KEY="ocrfeedadmin"
USER5_MNEMONIC="earn front swamp dune level clip shell aware apple spare faith upset flip local regret loud suspect view heavy raccoon satisfy cupboard harbor basic"

USER6_KEY="signer1"
USER6_MNEMONIC="output arrange offer advance egg point office silent diamond fame heart hotel rocket sheriff resemble couple race crouch kit laptop document grape drastic lumber"

USER7_KEY="signer2"
USER7_MNEMONIC="velvet gesture rule caution injury stick property decorate raccoon physical narrow tuition address drum shoot pyramid record sport include rich actress sadness crater seek"

USER8_KEY="signer3"
USER8_MNEMONIC="guitar parrot nuclear sun blue marble amazing extend solar device address better chalk shock street absent follow notice female picnic into trade brass couch"

USER9_KEY="signer4"
USER9_MNEMONIC="rotate fame stamp size inform hurdle match stick brain shrimp fancy clinic soccer fortune photo gloom wear punch shed diet celery blossom tide bulk"

USER10_KEY="signer5"
USER10_MNEMONIC="apart acid night more advance december weather expect pause taxi reunion eternal crater crew lady chaos visual dynamic friend match glow flash couple tumble"

NEWLINE=$'\\n'

# Import keys from mnemonics
echo "$WASM_MNEMONIC" | $CHAIN_BIN keys add $WASM_KEY --recover --keyring-backend="test"
yes "$VAL_MNEMONIC" | $CHAIN_BIN keys add $VAL_KEY --recover --keyring-backend="test"
yes "$USER1_MNEMONIC" | $CHAIN_BIN keys add $USER1_KEY --recover --keyring-backend="test"
yes "$USER2_MNEMONIC" | $CHAIN_BIN keys add $USER2_KEY --recover --keyring-backend="test"
yes "$USER3_MNEMONIC" | $CHAIN_BIN keys add $USER3_KEY --recover --keyring-backend="test"
yes "$USER4_MNEMONIC" | $CHAIN_BIN keys add $USER4_KEY --recover --keyring-backend="test"
yes "$USER5_MNEMONIC" | $CHAIN_BIN keys add $USER5_KEY --recover --keyring-backend="test"
yes "$USER6_MNEMONIC" | $CHAIN_BIN keys add $USER6_KEY --recover --keyring-backend="test"
yes "$USER7_MNEMONIC" | $CHAIN_BIN keys add $USER7_KEY --recover --keyring-backend="test"
yes "$USER8_MNEMONIC" | $CHAIN_BIN keys add $USER8_KEY --recover --keyring-backend="test"
yes "$USER9_MNEMONIC" | $CHAIN_BIN keys add $USER9_KEY --recover --keyring-backend="test"
yes "$USER10_MNEMONIC" | $CHAIN_BIN keys add $USER10_KEY --recover --keyring-backend="test"

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") 1000000000000000000000000inj,1000000000000000000000000atom,100000000000000000000000000peggy0xdAC17F958D2ee523a2206206994597C13D831ec7,100000000000000000000000000peggy0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599 --keyring-backend="test"

# Add relayer keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".relayers[0].name" $KEYS_CONFIG)
jq -r ".relayers[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".relayers[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show -a $(jq -r .relayers[0].name $KEYS_CONFIG) --keyring-backend="test") 1000000000000000000000000inj --keyring-backend="test"

# Add faucet keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") 1000000000000000000000000inj --keyring-backend="test"


# zero address account
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID inj1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqe2hm49 1inj

# Allocate genesis accounts (cosmos formatted addresses)
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $WASM_KEY -a --keyring-backend="test") 1000000000000000000000inj --keyring-backend="test"
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $VAL_KEY -a --keyring-backend="test") 1000000000000000000000inj --keyring-backend="test"
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $USER1_KEY -a --keyring-backend="test") 1000000000000000000000inj,1000000000000000000000atom,100000000000000000000000000peggy0xdAC17F958D2ee523a2206206994597C13D831ec7,100000000000000000000000000peggy0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599 --keyring-backend="test"
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $USER2_KEY -a --keyring-backend="test") 1000000000000000000000inj,100000000000000000000000000peggy0xdAC17F958D2ee523a2206206994597C13D831ec7,100000000000000000000000000peggy0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599 --keyring-backend="test"
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $USER3_KEY -a --keyring-backend="test") 1000000000000000000000inj --keyring-backend="test"
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $USER4_KEY -a --keyring-backend="test") 1000000000000000000000inj --keyring-backend="test"
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $USER5_KEY -a --keyring-backend="test") 100000000000000000000000000inj --keyring-backend="test"
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $USER6_KEY -a --keyring-backend="test") 100000000000000000000000000inj --keyring-backend="test"
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $USER7_KEY -a --keyring-backend="test") 100000000000000000000000000inj --keyring-backend="test"
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $USER8_KEY -a --keyring-backend="test") 100000000000000000000000000inj --keyring-backend="test"
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $USER9_KEY -a --keyring-backend="test") 100000000000000000000000000inj --keyring-backend="test"
$CHAIN_BIN add-genesis-account --chain-id $CHAIN_ID $($CHAIN_BIN keys show $USER10_KEY -a --keyring-backend="test") 100000000000000000000000000inj --keyring-backend="test"

echo "Creating gentx..."
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) 1000000000000000000000inj --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

echo "Validate genesis"
$CHAIN_BIN validate-genesis

ls $CHAIN_DIR/config
",
      "createValidator.sh": "#!/bin/bash

DENOM="\${DENOM:=inj}"
CHAIN_BIN="\${CHAIN_BIN:=injectived}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=injective}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator \\
    --pubkey=$($CHAIN_BIN tendermint show-validator) \\
    --moniker $VAL_NAME \\
    --amount 10000000000000000inj \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --min-self-delegation="1000000" \\
    --keyring-backend="test" \\
    --fees 100000$DENOM \\
    --gas="auto" \\
    --gas-adjustment 1.5 --yes > /validator.log

  cat /validator.log | jq
}

cosmos-sdk-version-default
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "updateGenesis.sh": "#!/bin/bash

DENOM="\${DENOM:=inj}"
CHAIN_BIN="\${CHAIN_BIN:=injectived}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.injectived}"

set -eu

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "NOTE: Setting unbolding time to 300s to as to be able to set trusttime on relayers correctly"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "6s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

jq -r '.app_state["staking"]["params"]["bond_denom"] |= "inj"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state["crisis"]["constant_fee"]["denom"] |= "inj"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state["gov"]["deposit_params"]["min_deposit"][0]["denom"] |= "inj"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
echo "NOTE: Setting Governance Voting Period to 10 seconds for easy testing"
jq -r '.app_state["gov"]["voting_params"]["voting_period"] |= "10s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state["mint"]["params"]["mint_denom"] |= "inj"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state["auction"]["params"]["auction_period"] |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state["ocr"]["params"]["module_admin"] |= "'$FEEDADMIN'"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state["ocr"]["params"]["payout_block_interval"] |= "5"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json


INJ='{"denom":"inj","decimals":18}'

USDT='{"denom":"peggy0xdAC17F958D2ee523a2206206994597C13D831ec7","decimals":6}'
USDC='{"denom":"peggy0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48","decimals":6}'
ONEINCH='{"denom":"peggy0x111111111117dc0aa78b770fa6a738034120c302","decimals":18}'
AAVE='{"denom":"peggy0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9","decimals":18}'
AXS='{"denom":"peggy0xBB0E17EF65F82Ab018d8EDd776e8DD940327B28b","decimals":18}'
BAT='{"denom":"peggy0x0D8775F648430679A709E98d2b0Cb6250d2887EF","decimals":18}'
BNB='{"denom":"peggy0xB8c77482e45F1F44dE1745F52C74426C631bDD52","decimals":18}'
WBTC='{"denom":"peggy0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599","decimals":8}'
BUSD='{"denom":"peggy0x4Fabb145d64652a948d72533023f6E7A623C7C53","decimals":18}'
CEL='{"denom":"peggy0xaaAEBE6Fe48E54f431b0C390CfaF0b017d09D42d","decimals":4}'
CELL='{"denom":"peggy0x26c8AFBBFE1EBaca03C2bB082E69D0476Bffe099","decimals":18}'
CHZ='{"denom":"peggy0x3506424F91fD33084466F402d5D97f05F8e3b4AF","decimals":18}'
COMP='{"denom":"peggy0xc00e94Cb662C3520282E6f5717214004A7f26888","decimals":18}'
DAI='{"denom":"peggy0x6B175474E89094C44Da98b954EedeAC495271d0F","decimals":18}'
DEFI5='{"denom":"peggy0xfa6de2697D59E88Ed7Fc4dFE5A33daC43565ea41","decimals":18}'
ENJ='{"denom":"peggy0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c","decimals":18}'
WETH='{"denom":"peggy0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2","decimals":18}'
EVAI='{"denom":"peggy0x50f09629d0afDF40398a3F317cc676cA9132055c","decimals":8}'
FTM='{"denom":"peggy0x4E15361FD6b4BB609Fa63C81A2be19d873717870","decimals":18}'
GF='{"denom":"peggy0xAaEf88cEa01475125522e117BFe45cF32044E238","decimals":18}'
GRT='{"denom":"peggy0xc944E90C64B2c07662A292be6244BDf05Cda44a7","decimals":18}'
HT='{"denom":"peggy0x6f259637dcD74C767781E37Bc6133cd6A68aa161","decimals":18}'
LINK='{"denom":"peggy0x514910771AF9Ca656af840dff83E8264EcF986CA","decimals":18}'
MATIC='{"denom":"peggy0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0","decimals":18}'
NEXO='{"denom":"peggy0xB62132e35a6c13ee1EE0f84dC5d40bad8d815206","decimals":18}'
NOIA='{"denom":"peggy0xa8c8CfB141A3bB59FEA1E2ea6B79b5ECBCD7b6ca","decimals":18}'
OCEAN='{"denom":"peggy0x967da4048cD07aB37855c090aAF366e4ce1b9F48","decimals":18}'
PAXG='{"denom":"peggy0x45804880De22913dAFE09f4980848ECE6EcbAf78","decimals":18}'
POOL='{"denom":"peggy0x0cEC1A9154Ff802e7934Fc916Ed7Ca50bDE6844e","decimals":18}'
QNT='{"denom":"peggy0x4a220E6096B25EADb88358cb44068A3248254675","decimals":18}'
RUNE='{"denom":"peggy0x3155BA85D5F96b2d030a4966AF206230e46849cb","decimals":18}'
SHIB='{"denom":"peggy0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE","decimals":18}'
SNX='{"denom":"peggy0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F","decimals":18}'
STARS='{"denom":"peggy0xc55c2175E90A46602fD42e931f62B3Acc1A013Ca","decimals":18}'
STT='{"denom":"peggy0xaC9Bb427953aC7FDDC562ADcA86CF42D988047Fd","decimals":18}'
SUSHI='{"denom":"peggy0x6B3595068778DD592e39A122f4f5a5cF09C90fE2","decimals":18}'
SWAP='{"denom":"peggy0xCC4304A31d09258b0029eA7FE63d032f52e44EFe","decimals":18}'
UMA='{"denom":"peggy0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828","decimals":18}'
UNI='{"denom":"peggy0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984","decimals":18}'
UTK='{"denom":"peggy0xdc9Ac3C20D1ed0B540dF9b1feDC10039Df13F99c","decimals":18}'
YFI='{"denom":"peggy0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e","decimals":18}'
ZRX='{"denom":"peggy0xE41d2489571d322189246DaFA5ebDe1F4699F498","decimals":18}'

ATOM='{"denom":"ibc/C4CFF46FD6DE35CA4CF4CE031E643C8FDC9BA4B99AE598E9B0ED98FE3A2319F9","decimals":6}'
USTC='{"denom":"ibc/B448C0CA358B958301D328CCDC5D5AD642FC30A6D3AE106FF721DB315F3DDE5C","decimals":6}'
AXL='{"denom":"ibc/C49B72C4E85AE5361C3E0F0587B24F509CB16ECEB8970B6F917D697036AF49BE","decimals":6}'
XPRT='{"denom":"ibc/B786E7CBBF026F6F15A8DA248E0F18C62A0F7A70CB2DABD9239398C8B5150ABB","decimals":6}'
SCRT='{"denom":"ibc/3C38B741DF7CD6CAC484343A4994CFC74BC002D1840AAFD5416D9DAC61E37F10","decimals":6}'
OSMO='{"denom":"ibc/92E0120F15D037353CFB73C14651FC8930ADC05B93100FD7754D3A689E53B333","decimals":6}'
LUNC='{"denom":"ibc/B8AF5D92165F35AB31F3FC7C7B444B9D240760FA5D406C49D24862BD0284E395","decimals":6}'
HUAHUA='{"denom":"ibc/E7807A46C0B7B44B350DA58F51F278881B863EC4DCA94635DAB39E52C30766CB","decimals":6}'
EVMOS='{"denom":"ibc/16618B7F7AC551F48C057A13F4CA5503693FBFF507719A85BC6876B8BD75F821","decimals":18}'
DOT='{"denom":"ibc/624BA9DD171915A2B9EA70F69638B2CEA179959850C1A586F6C485498F29EDD4","decimals":10}'

PEGGY_DENOM_DECIMALS="\${USDT},\${USDC},\${ONEINCH},\${AXS},\${BAT},\${BNB},\${WBTC},\${BUSD},\${CEL},\${CELL},\${CHZ},\${COMP},\${DAI},\${DEFI5},\${ENJ},\${WETH},\${EVAI},\${FTM},\${GF},\${GRT},\${HT},\${LINK},\${MATIC},\${NEXO},\${NOIA},\${OCEAN},\${PAXG},\${POOL},\${QNT},\${RUNE},\${SHIB},\${SNX},\${STARS},\${STT},\${SUSHI},\${SWAP},\${UMA},\${UNI},\${UTK},\${YFI},\${ZRX}"
IBC_DENOM_DECIMALS="\${ATOM},\${USTC},\${AXL},\${XPRT},\${SCRT},\${OSMO},\${LUNC},\${HUAHUA},\${EVMOS},\${DOT}"
DENOM_DECIMALS='['\${INJ},\${PEGGY_DENOM_DECIMALS},\${IBC_DENOM_DECIMALS}']'

jq -r '.app_state["exchange"]["denom_decimals"]='\${DENOM_DECIMALS} $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

$CHAIN_BIN tendermint show-node-id

echo "Validate genesis"
$CHAIN_BIN validate-genesis
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-injective-1",
        "app.kubernetes.io/part-of": "injective-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "injective-1",
        "starship.io/chain-name": "injective",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-injective-1",
    },
  },
  "injective/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "injective-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "injective-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "injective-1",
        "starship.io/chain-name": "injective",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "injective-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "injective-1-validator",
      },
    },
  },
  "injective/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "injective-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "injective-1-validator",
        "app.kubernetes.io/part-of": "injective-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "injective-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "injective",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "injective-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "injective-1-validator",
        },
      },
      "serviceName": "injective-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "injective-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "injective-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "inj",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000inj",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.injectived",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/InjectiveLabs/injective-chain-releases",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.injectived",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "injective-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "injective-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/injective:v1.11.6",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.injectived",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "inj",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000inj",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.injectived",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/InjectiveLabs/injective-chain-releases",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.injectived",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "injective-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "injective-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.injectived/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.injectived/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.injectived/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.injectived/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.injectived",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://injective-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: injective-1. Waiting for it to start..."
  echo "Checking: http://injective-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "inj",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000inj",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.injectived",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/InjectiveLabs/injective-chain-releases",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.injectived",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "injective-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "injective-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/injective:v1.11.6",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.injectived",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "inj",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000inj",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.injectived",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/InjectiveLabs/injective-chain-releases",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.injectived",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "injectived",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "injective-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "injective-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/injective:v1.11.6",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.injectived",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-injective-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "injective-1,cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "injective,cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://injective-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://injective-1-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://injective-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/injective-1",
                  "name": "registry-injective-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://injective-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: injective-1. Waiting for it to start..."
  echo "Checking: http://injective-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-injective-1",
              },
              "name": "registry-injective-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/injective-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "injective",
  "assets": [
    {
      "base": "inj",
      "description": "The INJ token is the native governance token for the Injective chain.",
      "denom_units": [
        {
          "denom": "inj",
          "exponent": 0
        },
        {
          "denom": "INJ",
          "exponent": 18
        }
      ],
      "name": "Injective",
      "display": "INJ",
      "symbol": "INJ",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/injective/images/inj.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/injective/images/inj.svg"
      },
      "coingecko_id": "injective-protocol"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "injective",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "injective-1",
  "pretty_name": "Injective Devnet",
  "bech32_prefix": "inj",
  "daemon_name": "injectived",
  "node_home": "/root/.injectived",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "60",
  "fees": {
    "fee_tokens": [
      {
        "denom": "inj",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "inj"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/InjectiveLabs/injective-chain-releases",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-injective-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-injective-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-injective-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "injective-1"
type = "CosmosSdk"
key_name = "injective-1-cli"

rpc_addr = "http://injective-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://injective-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://injective-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "inj"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'ethermint', proto_type = { pk_type = '/injective.crypto.v1beta1.ethsecp256k1.PubKey' } }
gas_price = { price = 2500000, denom = "inj" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "injective-1"
type = "CosmosSdk"
key_name = "injective-1"

rpc_addr = "http://injective-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://injective-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://injective-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "inj"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'ethermint', proto_type = { pk_type = '/injective.crypto.v1beta1.ethsecp256k1.PubKey' } }
gas_price = { price = 2500000, denom = "inj" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-injective-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-injective-cosmos",
    },
  },
  "relayer/hermes-injective-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-injective-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-injective-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-injective-cosmos",
      },
    },
  },
  "relayer/hermes-injective-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-injective-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-injective-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-injective-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-injective-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-injective-cosmos",
            "app.kubernetes.io/rawname": "injective-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://injective-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: injective-1. Waiting for it to start..."
  echo "Checking: http://injective-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for injective-1..."
hermes keys add \\
  --chain injective-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name injective-1 \\
  --hd-path "m/44'/60'/0'/0/0"
DENOM="inj"
RLY_ADDR=$(hermes --json keys list --chain injective-1 | tail -1 | jq -r '.result."injective-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://injective-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for injective-1-cli..."
hermes keys add \\
  --chain injective-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name injective-1-cli \\
  --hd-path "m/44'/60'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain injective-1 | tail -1 | jq -r '.result."injective-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://injective-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain injective-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-injective-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: injective should have proper file organization for injective: injective-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "injective": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "injective-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-injective-cosmos-configmap.yaml",
    "hermes-injective-cosmos-service.yaml",
    "hermes-injective-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: injective should have proper file organization for injective: injective-resource-counts 1`] = `
{
  "ConfigMap": 7,
  "Deployment": 1,
  "Service": 5,
  "StatefulSet": 4,
}
`;

exports[`BuilderManager Config Files Tests Config: multi-relayer should generate valid YAML manifests for multi-relayer: multi-relayer-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "3",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "juno/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "juno-2-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "juno-2-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "juno-2",
        "starship.io/chain-name": "juno",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "juno-2-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "juno-2-genesis",
      },
    },
  },
  "juno/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "juno-2",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "juno-2-genesis",
        "app.kubernetes.io/part-of": "juno-2",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "juno-2-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "juno",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "juno-2-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "juno-2-genesis",
        },
      },
      "serviceName": "juno-2-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "juno-2-genesis",
            "app.kubernetes.io/rawname": "juno-2",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "juno-2",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "ujuno",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000ujuno",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.juno",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/CosmosContracts/juno",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.juno",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "juno-2",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/juno:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.juno",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "juno-2-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.juno/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.juno/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.juno/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.juno/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.juno/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.juno",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "ujuno",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000ujuno",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.juno",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/CosmosContracts/juno",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.juno",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "juno-2",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "3",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/juno:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.juno",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "ujuno",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000ujuno",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.juno",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/CosmosContracts/juno",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.juno",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "juno-2",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/juno:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.juno",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-juno-2",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "juno/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-juno-2",
        "app.kubernetes.io/part-of": "juno-2",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "juno-2",
        "starship.io/chain-name": "juno",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-juno-2",
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "3",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1,cosmoshub-4,juno-2",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis,cosmoshub,juno",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657,http://juno-2-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657,http://localhost:26658",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091,http://juno-2-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317,http://localhost:1318",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081,http://juno-2-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
                {
                  "mountPath": "/chains/juno-2",
                  "name": "registry-juno-2",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://juno-2-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: juno-2. Waiting for it to start..."
  echo "Checking: http://juno-2-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
            {
              "configMap": {
                "name": "registry-juno-2",
              },
              "name": "registry-juno-2",
            },
          ],
        },
      },
    },
  },
  "registry/juno-2-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "juno",
  "assets": [
    {
      "base": "ujuno",
      "description": "The native token of JUNO Chain",
      "name": "Juno",
      "display": "juno",
      "symbol": "JUNO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/juno.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/juno.svg"
      },
      "denom_units": [
        {
          "denom": "ujuno",
          "exponent": 0
        },
        {
          "denom": "juno",
          "exponent": 6
        }
      ],
      "coingecko_id": "juno-network"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "juno",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "juno-2",
  "pretty_name": "Juno Devnet",
  "bech32_prefix": "juno",
  "daemon_name": "junod",
  "node_home": "/root/.juno",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "ujuno",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "ujuno"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/CosmosContracts/juno",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-juno-2",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-juno-2",
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-juno-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "juno-2"
type = "CosmosSdk"
key_name = "juno-2-cli"

rpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "juno"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "ujuno" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "juno-2"
type = "CosmosSdk"
key_name = "juno-2"

rpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "juno"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "ujuno" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-juno-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-juno-cosmos",
    },
  },
  "relayer/hermes-juno-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-juno-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-juno-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-juno-cosmos",
      },
    },
  },
  "relayer/hermes-juno-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-juno-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-juno-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-juno-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-juno-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-juno-cosmos",
            "app.kubernetes.io/rawname": "juno-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://juno-2-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: juno-2. Waiting for it to start..."
  echo "Checking: http://juno-2-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for juno-2..."
hermes keys add \\
  --chain juno-2 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name juno-2 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="ujuno"
RLY_ADDR=$(hermes --json keys list --chain juno-2 | tail -1 | jq -r '.result."juno-2".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://juno-2-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for juno-2-cli..."
hermes keys add \\
  --chain juno-2 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name juno-2-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain juno-2 | tail -1 | jq -r '.result."juno-2-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://juno-2-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain juno-2 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-juno-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
  "relayer/hermes-osmos-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1-cli"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
  },
  "relayer/hermes-osmos-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
      },
    },
  },
  "relayer/hermes-osmos-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-osmos-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-osmos-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-osmos-cosmos",
            "app.kubernetes.io/rawname": "osmos-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for osmosis-1..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name osmosis-1 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uosmo"
RLY_ADDR=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for osmosis-1-cli..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name osmosis-1-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain osmosis-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-osmos-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
  "relayer/hermes-osmosis-juno-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1-cli"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "juno-2"
type = "CosmosSdk"
key_name = "juno-2-cli"

rpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "juno"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "ujuno" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "juno-2"
type = "CosmosSdk"
key_name = "juno-2"

rpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "juno"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "ujuno" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmosis-juno",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmosis-juno",
    },
  },
  "relayer/hermes-osmosis-juno-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmosis-juno",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmosis-juno",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-osmosis-juno",
      },
    },
  },
  "relayer/hermes-osmosis-juno-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmosis-juno",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmosis-juno",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-osmosis-juno",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-osmosis-juno",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-osmosis-juno",
            "app.kubernetes.io/rawname": "osmosis-juno",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://juno-2-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: juno-2. Waiting for it to start..."
  echo "Checking: http://juno-2-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for osmosis-1..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name osmosis-1 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uosmo"
RLY_ADDR=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for osmosis-1-cli..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name osmosis-1-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for juno-2..."
hermes keys add \\
  --chain juno-2 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name juno-2 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="ujuno"
RLY_ADDR=$(hermes --json keys list --chain juno-2 | tail -1 | jq -r '.result."juno-2".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://juno-2-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for juno-2-cli..."
hermes keys add \\
  --chain juno-2 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name juno-2-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain juno-2 | tail -1 | jq -r '.result."juno-2-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://juno-2-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain juno-2 \\
  --a-chain osmosis-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-osmosis-juno",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: multi-relayer should have proper file organization for multi-relayer: multi-relayer-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "juno": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "juno-2-configmap.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-juno-cosmos-configmap.yaml",
    "hermes-juno-cosmos-service.yaml",
    "hermes-juno-cosmos-statefulset.yaml",
    "hermes-osmos-cosmos-configmap.yaml",
    "hermes-osmos-cosmos-service.yaml",
    "hermes-osmos-cosmos-statefulset.yaml",
    "hermes-osmosis-juno-configmap.yaml",
    "hermes-osmosis-juno-service.yaml",
    "hermes-osmosis-juno-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: multi-relayer should have proper file organization for multi-relayer: multi-relayer-resource-counts 1`] = `
{
  "ConfigMap": 11,
  "Deployment": 1,
  "Service": 7,
  "StatefulSet": 6,
}
`;

exports[`BuilderManager Config Files Tests Config: multi-validator should generate valid YAML manifests for multi-validator: multi-validator-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "2",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "osmosisd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "osmosis/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-validator",
      },
    },
  },
  "osmosis/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-validator",
        },
      },
      "serviceName": "osmosis-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
          ],
        },
      },
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: multi-validator should have proper file organization for multi-validator: multi-validator-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "registry": [
    "deployment.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: multi-validator should have proper file organization for multi-validator: multi-validator-resource-counts 1`] = `
{
  "ConfigMap": 4,
  "Deployment": 1,
  "Service": 3,
  "StatefulSet": 2,
}
`;

exports[`BuilderManager Config Files Tests Config: multi-validator-starship-faucet should generate valid YAML manifests for multi-validator-starship-faucet: multi-validator-starship-faucet-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.4",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "2",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "osmosisd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.4",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.4",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.4",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "osmosis/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-validator",
      },
    },
  },
  "osmosis/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-validator",
        },
      },
      "serviceName": "osmosis-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.4",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.4",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.4",
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "600M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
          ],
        },
      },
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: multi-validator-starship-faucet should have proper file organization for multi-validator-starship-faucet: multi-validator-starship-faucet-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "registry": [
    "deployment.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: multi-validator-starship-faucet should have proper file organization for multi-validator-starship-faucet: multi-validator-starship-faucet-resource-counts 1`] = `
{
  "ConfigMap": 4,
  "Deployment": 1,
  "Service": 3,
  "StatefulSet": 2,
}
`;

exports[`BuilderManager Config Files Tests Config: neutron should generate valid YAML manifests for neutron: neutron-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "gaiad",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "neutron/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "neutron-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "neutron-1",
        "starship.io/chain-name": "neutron",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "neutron-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "neutron-1-genesis",
      },
    },
  },
  "neutron/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "neutron-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-1-genesis",
        "app.kubernetes.io/part-of": "neutron-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "neutron-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "neutron",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "neutron-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "neutron-1-genesis",
        },
      },
      "serviceName": "neutron-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "neutron-1-genesis",
            "app.kubernetes.io/rawname": "neutron-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "neutron-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "untrn",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000untrn",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/neutron-org/neutron",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "neutron-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron:v3.0.5",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.neutrond",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "neutron-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.neutrond/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.neutrond/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.neutrond/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.neutrond/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.neutrond/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.neutrond",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "untrn",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000untrn",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/neutron-org/neutron",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "neutron-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron:v3.0.5",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.neutrond",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "untrn",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000untrn",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/neutron-org/neutron",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "neutron-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron:v3.0.5",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.neutrond",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "export

echo "Fetching priv keys from provider exposer"
curl -s http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8081/priv_keys | jq > $CHAIN_DIR/config/provider_priv_validator_key.json
cat $CHAIN_DIR/config/provider_priv_validator_key.json

echo "Replace provider priv validator key with provider keys"
mv $CHAIN_DIR/config/priv_validator_key.json $CHAIN_DIR/config/previous_priv_validator_key.json
mv $CHAIN_DIR/config/provider_priv_validator_key.json $CHAIN_DIR/config/priv_validator_key.json

echo "Create consumer addition proposal"
DENOM=uatom \\
  CHAIN_ID=cosmoshub-4 \\
  CHAIN_BIN=gaiad \\
  NODE_URL=http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657 \\
  PROPOSAL_FILE=/proposal/proposal.json \\
  bash -e /scripts/create-ics.sh

echo "create ccv state file"
gaiad query provider consumer-genesis neutron-1 \\
  --node http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657 \\
  -o json > $CHAIN_DIR/config/ccv-state.json
cat $CHAIN_DIR/config/ccv-state.json | jq

echo "Update genesis file with ccv state"
jq -s '.[0].app_state.ccvconsumer = .[1] | .[0]' $CHAIN_DIR/config/genesis.json $CHAIN_DIR/config/ccv-state.json > $CHAIN_DIR/config/genesis-ccv.json
mv $CHAIN_DIR/config/genesis.json $CHAIN_DIR/config/genesis-no-ccv.json
mv $CHAIN_DIR/config/genesis-ccv.json $CHAIN_DIR/config/genesis.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "untrn",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000untrn",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/neutron-org/neutron",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "neutron-1",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-ics",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/proposal",
                  "name": "proposal",
                },
                {
                  "mountPath": "/root/.neutrond",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-neutron-1",
              },
              "name": "scripts",
            },
            {
              "configMap": {
                "name": "consumer-proposal-neutron-1",
              },
              "name": "proposal",
            },
          ],
        },
      },
    },
  },
  "neutron/ics-proposal-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "proposal.json": "{
  "title": "Add neutron consumer chain",
  "summary": "Add neutron consumer chain with id neutron-1",
  "chain_id": "neutron-1",
  "initial_height": {
    "revision_height": 1,
    "revision_number": 1
  },
  "genesis_hash": "d86d756e10118e66e6805e9cc476949da2e750098fcc7634fd0cc77f57a0b2b0",
  "binary_hash": "376cdbd3a222a3d5c730c9637454cd4dd925e2f9e2e0d0f3702fc922928583f1",
  "spawn_time": "2023-02-28T20:40:00.000000Z",
  "unbonding_period": 294000000000,
  "ccv_timeout_period": 259920000000,
  "transfer_timeout_period": 18000000000,
  "consumer_redistribution_fraction": "0.75",
  "blocks_per_distribution_transmission": 10,
  "historical_entries": 100,
  "distribution_transmission_channel": "",
  "top_N": 95,
  "validators_power_cap": 0,
  "validator_set_cap": 0,
  "allowlist": [],
  "denylist": [],
  "deposit": "10000uatom"
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron",
        "app.kubernetes.io/part-of": "neutron-1",
        "app.kubernetes.io/role": "ics-proposal",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "neutron-1",
        "starship.io/chain-name": "neutron",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "consumer-proposal-neutron-1",
    },
  },
  "neutron/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "createGenesis.sh": "#!/bin/bash

DENOM="\${DENOM:=untrn}"
STAKEDENOM=\${DENOM:-untrn}
COINS="\${COINS:=100000000000000000untrn}"
CHAIN_ID="\${CHAIN_ID:=neutron-1}"
BINARY="\${CHAIN_BIN:=neutrond}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.neutrond}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

BRANCH="\${BRANCH:=v3.0.5}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

GENESIS_PATH="$CHAIN_DIR/config/genesis.json"

CONTRACTS_BINARIES_DIR=\${CONTRACTS_BINARIES_DIR:-./contracts}
THIRD_PARTY_CONTRACTS_DIR=\${THIRD_PARTY_CONTRACTS_DIR:-./contracts_thirdparty}

set -euxo pipefail

mkdir -p $CONTRACTS_BINARIES_DIR $THIRD_PARTY_CONTRACTS_DIR

function download_contract() {
    CONTRACT_NAME="$1"  # <type of contract>/<contract name>
    CONTRACT_URI=\${CONTRACT_NAME#"./"}
    curl https://github.com/neutron-org/neutron/raw/$BRANCH/$CONTRACT_URI -L -o $CONTRACT_NAME
}

$BINARY init $CHAIN_ID --chain-id $CHAIN_ID

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $BINARY keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$BINARY add-genesis-account $($BINARY keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $BINARY keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$BINARY add-genesis-account $($BINARY keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $BINARY keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $BINARY add-genesis-account $($BINARY keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

# Add test addresses, admin address
echo "Adding key.... demowallet1"
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $BINARY keys add demowallet1 --index 1 --recover --keyring-backend="test"
$BINARY add-genesis-account $($BINARY keys show -a demowallet1 --keyring-backend="test") $COINS --keyring-backend="test"
# Add test addresses, second multisig address
echo "Adding key.... demowallet2"
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $BINARY keys add demowallet2 --index 2 --recover --keyring-backend="test"
$BINARY add-genesis-account $($BINARY keys show -a demowallet2 --keyring-backend="test") $COINS --keyring-backend="test"
# Add test addresses, second multisig address
echo "Adding key.... demowallet2"
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $BINARY keys add demowallet3 --index 3 --recover --keyring-backend="test"
$BINARY add-genesis-account $($BINARY keys show -a demowallet3 --keyring-backend="test") $COINS --keyring-backend="test"

echo "Update genesis.json file with updated local params"
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

sed -i -e "s/\\"denom\\": \\"stake\\",/\\"denom\\": \\"$DENOM\\",/g" "$GENESIS_PATH"
sed -i -e "s/\\"mint_denom\\": \\"stake\\",/\\"mint_denom\\": \\"$DENOM\\",/g" "$GENESIS_PATH"
sed -i -e "s/\\"bond_denom\\": \\"stake\\"/\\"bond_denom\\": \\"$DENOM\\"/g" "$GENESIS_PATH"

# IMPORTANT! minimum_gas_prices should always contain at least one record, otherwise the chain will not start or halt
MIN_GAS_PRICES_DEFAULT='[{"denom":"untrn","amount":"0"}]'
MIN_GAS_PRICES=\${MIN_GAS_PRICES:-"$MIN_GAS_PRICES_DEFAULT"}

BYPASS_MIN_FEE_MSG_TYPES_DEFAULT='["/ibc.core.channel.v1.Msg/RecvPacket", "/ibc.core.channel.v1.Msg/Acknowledgement", "/ibc.core.client.v1.Msg/UpdateClient"]'
BYPASS_MIN_FEE_MSG_TYPES=\${BYPASS_MIN_FEE_MSG_TYPES:-"$BYPASS_MIN_FEE_MSG_TYPES_DEFAULT"}

MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE_DEFAULT=1000000
MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE=\${MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE:-"$MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE_DEFAULT"}

ADMIN_ADDRESS=$($BINARY keys show demowallet1 -a --keyring-backend="test")
SECOND_MULTISIG_ADDRESS=$($BINARY keys show demowallet2 -a --keyring-backend="test")

ls $CHAIN_DIR/config

# MAIN_DAO
DAO_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_core.wasm
download_contract $DAO_CONTRACT
PRE_PROPOSAL_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_pre_propose_single.wasm
download_contract $PRE_PROPOSAL_CONTRACT
PRE_PROPOSAL_MULTIPLE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_pre_propose_multiple.wasm
download_contract $PRE_PROPOSAL_MULTIPLE_CONTRACT
PRE_PROPOSAL_OVERRULE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_pre_propose_overrule.wasm
download_contract $PRE_PROPOSAL_OVERRULE_CONTRACT
PROPOSAL_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_proposal_single.wasm
download_contract $PROPOSAL_CONTRACT
PROPOSAL_MULTIPLE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_proposal_multiple.wasm
download_contract $PROPOSAL_MULTIPLE_CONTRACT
VOTING_REGISTRY_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_voting_registry.wasm
download_contract $VOTING_REGISTRY_CONTRACT
# VAULTS
NEUTRON_VAULT_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_vault.wasm
download_contract $NEUTRON_VAULT_CONTRACT
NEUTRON_INVESTORS_VAULT=$CONTRACTS_BINARIES_DIR/investors_vesting_vault.wasm
download_contract $NEUTRON_INVESTORS_VAULT
# VESTING
NEUTRON_VESTING_INVESTORS=$CONTRACTS_BINARIES_DIR/vesting_investors.wasm
download_contract $NEUTRON_VESTING_INVESTORS
# RESERVE
RESERVE_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_reserve.wasm
download_contract $RESERVE_CONTRACT
DISTRIBUTION_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_distribution.wasm
download_contract $DISTRIBUTION_CONTRACT
# SUBDAOS
SUBDAO_CORE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_core.wasm
download_contract $SUBDAO_CORE_CONTRACT
SUBDAO_TIMELOCK_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_timelock_single.wasm
download_contract $SUBDAO_TIMELOCK_CONTRACT
SUBDAO_PRE_PROPOSE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_pre_propose_single.wasm
download_contract $SUBDAO_PRE_PROPOSE_CONTRACT
SUBDAO_PROPOSAL_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_proposal_single.wasm
download_contract $SUBDAO_PROPOSAL_CONTRACT
CW4_VOTING_CONTRACT=$THIRD_PARTY_CONTRACTS_DIR/cw4_voting.wasm
download_contract $CW4_VOTING_CONTRACT
CW4_GROUP_CONTRACT=$THIRD_PARTY_CONTRACTS_DIR/cw4_group.wasm
download_contract $CW4_GROUP_CONTRACT

echo "Add consumer section..."
$BINARY add-consumer-section --home "$CHAIN_DIR"
### PARAMETERS SECTION

## slashing params
SLASHING_SIGNED_BLOCKS_WINDOW=140000
SLASHING_MIN_SIGNED=0.050000000000000000
SLASHING_FRACTION_DOUBLE_SIGN=0.010000000000000000
SLASHING_FRACTION_DOWNTIME=0.000100000000000000

##pre propose single parameters
PRE_PROPOSAL_SINGLE_AMOUNT=1000
PRE_PROPOSAL_SINGLE_REFUND_POLICY="only_passed"
PRE_PROPOSAL_SINGLE_OPEN_PROPOSAL_SUBMISSION=false

## proposal singe params
PROPOSAL_ALLOW_REVOTING=false # should be true for non-testing env
PROPOSAL_SINGLE_ONLY_MEMBERS_EXECUTE=false
PROPOSAL_SINGLE_ONLY_MAX_VOTING_PERIOD=1200 # seconds; should be 2 weeks in production
PROPOSAL_SINGLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE=false
PROPOSAL_SINGLE_QUORUM=0.05 # quorum to consider proposal's result viable [float] < 1
PROPOSAL_SINGLE_THRESHOLD=0.5 # % of votes should vote for the proposal to pass [float] <1
PROPOSAL_SINGLE_LABEL="neutron.proposals.single"
PRE_PROPOSAL_SINGLE_LABEL="neutron.proposals.single.pre_propose"

## propose multiple params
PROPOSAL_MULTIPLE_ALLOW_REVOTING=false # should be true for non-testing env
PROPOSAL_MULTIPLE_ONLY_MEMBERS_EXECUTE=false
PROPOSAL_MULTIPLE_ONLY_MAX_VOTING_PERIOD=1200 # seconds; should be 2 weeks in production
PROPOSAL_MULTIPLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE=false
PROPOSAL_MULTIPLE_QUORUM=0.05 # quorum to consider proposal's result viable [float] < 1
PROPOSAL_MULTIPLE_LABEL="neutron.proposals.multiple"
PRE_PROPOSAL_MULTIPLE_LABEL="neutron.proposals.multiple.pre_propose"

## Propose overrule params
PROPOSAL_OVERRULE_ALLOW_REVOTING=false
PROPOSAL_OVERRULE_ONLY_MEMBERS_EXECUTE=false
PROPOSAL_OVERRULE_ONLY_MAX_VOTING_PERIOD=1200 # seconds; should be 3 days in production
PROPOSAL_OVERRULE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE=false
PROPOSAL_OVERRULE_THRESHOLD=0.005 # around 10 times lower than for regular proposals
PROPOSAL_OVERRULE_LABEL="neutron.proposals.overrule"
PRE_PROPOSE_OVERRULE_LABEL="neutron.proposals.overrule.pre_propose"

## Voting registry
VOTING_REGISTRY_LABEL="neutron.voting"

## DAO
DAO_NAME="Neutron DAO"
DAO_DESCRIPTION="Neutron DAO is a DAO DAO-based governance of Neutron chain"
DAO_CORE_LABEL="neutron.core"

## Neutron vault
NEUTRON_VAULT_NAME="Neutron Vault"
NEUTRON_VAULT_DESCRIPTION="Vault to put NTRN tokens to get voting power"
NEUTRON_VAULT_LABEL="neutron.voting.vaults.neutron"
NEUTRON_INVESTORS_VAULT_NAME="Neutron Investors Vault"
NEUTRON_INVESTORS_VAULT_DESCRIPTION="Vault sourcing voting power form investors vesting"
NEUTRON_INVESTORS_VAULT_LABEL="neutron.voting.vaults.investors"

# VESTING (for tests purposes)
NEUTRON_VESTING_INVESTORS_LABEL="neutron.vesting.investors"

## Reserve
RESERVE_DISTRIBUTION_RATE=0
RESERVE_MIN_PERIOD=10
RESERVE_VESTING_DENOMINATOR=1
RESERVE_LABEL="reserve"

DISTRIBUTION_LABEL="distribution"

## Grants subdao
GRANTS_SUBDAO_CORE_NAME="Grants SubDAO"
GRANTS_SUBDAO_CORE_DESCRIPTION="SubDAO to distribute grants to projects"
GRANTS_SUBDAO_CORE_LABEL="neutron.subdaos.grants.core"
GRANTS_SUBDAO_PROPOSAL_LABEL="neutron.subdaos.grants.proposals.single"
GRANTS_SUBDAO_PRE_PROPOSE_LABEL="neutron.subdaos.grants.proposals.single.pre_propose"
GRANTS_SUBDAO_VOTING_MODULE_LABEL="neutron.subdaos.grants.voting"

## Timelock
GRANTS_SUBDAO_TIMELOCK_LABEL="neutron.subdaos.grants.proposals.single.pre_propose.timelock"

## Security subdao
SECURITY_SUBDAO_CORE_NAME="Security SubDAO"
SECURITY_SUBDAO_CORE_DESCRIPTION="SubDAO with power to pause specific Neutron DAO modules"
SECURITY_SUBDAO_CORE_LABEL="neutron.subdaos.security.core"
SECURITY_SUBDAO_PROPOSAL_LABEL="neutron.subdaos.security.proposals.single"
SECURITY_SUBDAO_PRE_PROPOSE_LABEL="neutron.subdaos.security.proposals.single.pre_propose"
SECURITY_SUBDAO_VOTE_LABEL="neutron.subdaos.security.voting"

echo "Initializing dao contract in genesis..."

function store_binary() {
  CONTRACT_BINARY_PATH=$1
  $BINARY add-wasm-message store "$CONTRACT_BINARY_PATH" \\
    --output json --run-as "\${ADMIN_ADDRESS}" --keyring-backend=test --home "$CHAIN_DIR"
  BINARY_ID=$(jq -r "[.app_state.wasm.gen_msgs[] | select(.store_code != null)] | length" "$CHAIN_DIR/config/genesis.json")
  echo "$BINARY_ID"
}

# Upload the dao contracts
# MAIN_DAO
DAO_CONTRACT_BINARY_ID=$(store_binary                   "$DAO_CONTRACT")
PRE_PROPOSAL_CONTRACT_BINARY_ID=$(store_binary          "$PRE_PROPOSAL_CONTRACT")
PRE_PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID=$(store_binary "$PRE_PROPOSAL_MULTIPLE_CONTRACT")
PRE_PROPOSAL_OVERRULE_CONTRACT_BINARY_ID=$(store_binary "$PRE_PROPOSAL_OVERRULE_CONTRACT")
PROPOSAL_CONTRACT_BINARY_ID=$(store_binary              "$PROPOSAL_CONTRACT")
PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID=$(store_binary     "$PROPOSAL_MULTIPLE_CONTRACT")
VOTING_REGISTRY_CONTRACT_BINARY_ID=$(store_binary       "$VOTING_REGISTRY_CONTRACT")
# VAULTS
NEUTRON_VAULT_CONTRACT_BINARY_ID=$(store_binary         "$NEUTRON_VAULT_CONTRACT")
NEUTRON_INVESTORS_VAULT_CONTRACT_BINARY_ID=$(store_binary "$NEUTRON_INVESTORS_VAULT")
# VESTING
NEUTRON_VESTING_INVESTORS_BINARY_ID=$(store_binary      "$NEUTRON_VESTING_INVESTORS")
# RESERVE
DISTRIBUTION_CONTRACT_BINARY_ID=$(store_binary          "$DISTRIBUTION_CONTRACT")
RESERVE_CONTRACT_BINARY_ID=$(store_binary               "$RESERVE_CONTRACT")
# SUBDAOS
SUBDAO_CORE_BINARY_ID=$(store_binary                    "$SUBDAO_CORE_CONTRACT")
SUBDAO_TIMELOCK_BINARY_ID=$(store_binary                "$SUBDAO_TIMELOCK_CONTRACT")
SUBDAO_PRE_PROPOSE_BINARY_ID=$(store_binary             "$SUBDAO_PRE_PROPOSE_CONTRACT")
SUBDAO_PROPOSAL_BINARY_ID=$(store_binary                "$SUBDAO_PROPOSAL_CONTRACT")
CW4_VOTING_CONTRACT_BINARY_ID=$(store_binary            "$CW4_VOTING_CONTRACT")
CW4_GROUP_CONTRACT_BINARY_ID=$(store_binary             "$CW4_GROUP_CONTRACT")

# WARNING!
# The following code is needed to pre-generate the contract addresses
# Those addresses depend on the ORDER OF CONTRACTS INITIALIZATION
# Thus, this code section depends a lot on the order and content of the instantiate-contract commands at the end script
# It also depends on the implicitly initialized contracts (e.g. DAO core instantiation also instantiate proposals and stuff)
# If you're to do any changes, please do it consistently in both sections
# If you're to do add any implicitly initialized contracts in init messages, please reflect changes here

function genaddr() {
  CODE_ID=$1
  CONTRACT_ADDRESS=$($BINARY debug generate-contract-address "$INSTANCE_ID_COUNTER" "$CODE_ID")
  echo "$CONTRACT_ADDRESS"
}

INSTANCE_ID_COUNTER=1

# VAULTS
NEUTRON_VAULT_CONTRACT_ADDRESS=$(genaddr                "$NEUTRON_VAULT_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
NEUTRON_INVESTORS_VAULT_CONTRACT_ADDRESS=$(genaddr      "$NEUTRON_INVESTORS_VAULT_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

# VESTING
NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES=$(genaddr    "$NEUTRON_VESTING_INVESTORS_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

# MAIN_DAO
DAO_CONTRACT_ADDRESS=$(genaddr                          "$DAO_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
VOTING_REGISTRY_CONTRACT_ADDRESS=$(genaddr              "$VOTING_REGISTRY_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PROPOSAL_SINGLE_CONTRACT_ADDRESS=$(genaddr              "$PROPOSAL_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PRE_PROPOSAL_CONTRACT_ADDRESS=$(genaddr                 "$PRE_PROPOSAL_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PROPOSAL_MULTIPLE_CONTRACT_ADDRESS=$(genaddr            "$PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PRE_PROPOSAL_MULTIPLE_CONTRACT_ADDRESS=$(genaddr        "$PRE_PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PROPOSAL_OVERRULE_CONTRACT_ADDRESS=$(genaddr            "$PROPOSAL_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PRE_PROPOSAL_OVERRULE_CONTRACT_ADDRESS=$(genaddr        "$PRE_PROPOSAL_OVERRULE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

# RESERVE
RESERVE_CONTRACT_ADDRESS=$(genaddr                     "$RESERVE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
DISTRIBUTION_CONTRACT_ADDRESS=$(genaddr                "$DISTRIBUTION_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
# SUBDAOS
SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS=$(genaddr        "$SUBDAO_CORE_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
SECURITY_SUBDAO_VOTING_CONTRACT_ADDRESS=$(genaddr      "$CW4_VOTING_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
SECURITY_SUBDAO_GROUP_CONTRACT_ADDRESS=$(genaddr       "$CW4_GROUP_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
SECURITY_SUBDAO_PROPOSAL_CONTRACT_ADDRESS=$(genaddr    "$SUBDAO_PROPOSAL_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
SECURITY_SUBDAO_PRE_PROPOSE_CONTRACT_ADDRESS=$(genaddr "$SUBDAO_PROPOSAL_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_CORE_CONTRACT_ADDRESS=$(genaddr          "$SUBDAO_CORE_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_VOTING_CONTRACT_ADDRESS=$(genaddr        "$CW4_VOTING_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_PROPOSAL_CONTRACT_ADDRESS=$(genaddr      "$SUBDAO_PROPOSAL_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_PRE_PROPOSE_CONTRACT_ADDRESS=$(genaddr   "$SUBDAO_PRE_PROPOSE_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_TIMELOCK_CONTRACT_ADDRESS=$(genaddr      "$SUBDAO_TIMELOCK_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_GROUP_CONTRACT_ADDRESS=$(genaddr         "$CW4_GROUP_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

function check_json() {
  MSG=$1
  if ! jq -e . >/dev/null 2>&1 <<<"$MSG"; then
      echo "Failed to parse JSON for $MSG" >&2
      exit 1
  fi
}

function json_to_base64() {
  MSG=$1
  check_json "$MSG"
  echo "$MSG" | base64 | tr -d "\\n"
}

# PRE_PROPOSE_INIT_MSG will be put into the PROPOSAL_SINGLE_INIT_MSG and PROPOSAL_MULTIPLE_INIT_MSG
PRE_PROPOSE_INIT_MSG='{
   "deposit_info":{
      "denom":{
         "token":{
            "denom":{
               "native":"'"$STAKEDENOM"'"
            }
         }
      },
     "amount": "'"$PRE_PROPOSAL_SINGLE_AMOUNT"'",
     "refund_policy":"'"$PRE_PROPOSAL_SINGLE_REFUND_POLICY"'"
   },
   "open_proposal_submission": '"$PRE_PROPOSAL_SINGLE_OPEN_PROPOSAL_SUBMISSION"'
}'
PRE_PROPOSE_INIT_MSG_BASE64=$(json_to_base64 "$PRE_PROPOSE_INIT_MSG")

# -------------------- PROPOSE-SINGLE { PRE-PROPOSE } --------------------

PROPOSAL_SINGLE_INIT_MSG='{
   "allow_revoting":'"$PROPOSAL_ALLOW_REVOTING"',
   "pre_propose_info":{
      "module_may_propose":{
         "info":{
            "admin": {
              "core_module": {}
            },
            "code_id":  '"$PRE_PROPOSAL_CONTRACT_BINARY_ID"',
            "msg":      "'"$PRE_PROPOSE_INIT_MSG_BASE64"'",
            "label":    "'"$PRE_PROPOSAL_SINGLE_LABEL"'"
         }
      }
   },
   "only_members_execute":'"$PROPOSAL_SINGLE_ONLY_MEMBERS_EXECUTE"',
   "max_voting_period":{
      "time":'"$PROPOSAL_SINGLE_ONLY_MAX_VOTING_PERIOD"'
   },
   "close_proposal_on_execution_failure":'"$PROPOSAL_SINGLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE"',
   "threshold":{
      "threshold_quorum":{
         "quorum":{
          "percent":"'"$PROPOSAL_SINGLE_QUORUM"'"
         },
         "threshold":{
            "percent":"'"$PROPOSAL_SINGLE_THRESHOLD"'"
         }
      }
   }
}'
PROPOSAL_SINGLE_INIT_MSG_BASE64=$(json_to_base64 "$PROPOSAL_SINGLE_INIT_MSG")

# -------------------- PROPOSE-MULTIPLE { PRE-PROPOSE } --------------------

PROPOSAL_MULTIPLE_INIT_MSG='{
   "allow_revoting":'"$PROPOSAL_MULTIPLE_ALLOW_REVOTING"',
   "pre_propose_info":{
      "module_may_propose":{
         "info":{
            "admin": {
              "core_module": {}
            },
            "code_id":  '"$PRE_PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID"',
            "msg":      "'"$PRE_PROPOSE_INIT_MSG_BASE64"'",
            "label":    "'"$PRE_PROPOSAL_MULTIPLE_LABEL"'"
         }
      }
   },
   "only_members_execute":'"$PROPOSAL_MULTIPLE_ONLY_MEMBERS_EXECUTE"',
   "max_voting_period":{
      "time":'"$PROPOSAL_MULTIPLE_ONLY_MAX_VOTING_PERIOD"'
   },
   "close_proposal_on_execution_failure": '"$PROPOSAL_MULTIPLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE"',
   "voting_strategy":{
     "single_choice": {
        "quorum": {
          "percent": "'"$PROPOSAL_MULTIPLE_QUORUM"'"
        }
     }
   }
}'
PROPOSAL_MULTIPLE_INIT_MSG_BASE64=$(json_to_base64 "$PROPOSAL_MULTIPLE_INIT_MSG")

# PRE_PROPOSE_OVERRULE_INIT_MSG will be put into the PROPOSAL_OVERRULE_INIT_MSG
PRE_PROPOSE_OVERRULE_INIT_MSG='{}'
PRE_PROPOSE_OVERRULE_INIT_MSG_BASE64=$(json_to_base64 "$PRE_PROPOSE_OVERRULE_INIT_MSG")


# -------------------- PROPOSE-OVERRULE { PRE-PROPOSE-OVERRULE } --------------------

PROPOSAL_OVERRULE_INIT_MSG='{
   "allow_revoting":'"$PROPOSAL_OVERRULE_ALLOW_REVOTING"',
   "pre_propose_info":{
      "module_may_propose":{
         "info":{
            "admin": {
              "core_module": {}
            },
            "code_id":  '"$PRE_PROPOSAL_OVERRULE_CONTRACT_BINARY_ID"',
            "msg":      "'"$PRE_PROPOSE_OVERRULE_INIT_MSG_BASE64"'",
            "label":    "'"$PRE_PROPOSE_OVERRULE_LABEL"'"
         }
      }
   },
   "only_members_execute": '"$PROPOSAL_OVERRULE_ONLY_MEMBERS_EXECUTE"',
   "max_voting_period":{
      "time": '"$PROPOSAL_OVERRULE_ONLY_MAX_VOTING_PERIOD"'
   },
   "close_proposal_on_execution_failure": '"$PROPOSAL_OVERRULE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE"',
   "threshold":{
       "absolute_percentage":{
          "percentage":{
            "percent": "'"$PROPOSAL_OVERRULE_THRESHOLD"'"
          }
       }
   }
}'
PROPOSAL_OVERRULE_INIT_MSG_BASE64=$(json_to_base64 "$PROPOSAL_OVERRULE_INIT_MSG")

VOTING_REGISTRY_INIT_MSG='{
  "owner": "'"$DAO_CONTRACT_ADDRESS"'",
  "voting_vaults": [
    "'"$NEUTRON_VAULT_CONTRACT_ADDRESS"'",
    "'"$NEUTRON_INVESTORS_VAULT_CONTRACT_ADDRESS"'"
  ]
}'
VOTING_REGISTRY_INIT_MSG_BASE64=$(json_to_base64 "$VOTING_REGISTRY_INIT_MSG")

DAO_INIT='{
  "description": "'"$DAO_DESCRIPTION"'",
  "name": "'"$DAO_NAME"'",
  "proposal_modules_instantiate_info": [
    {
      "admin": {
        "core_module": {}
      },
      "code_id":  '"$PROPOSAL_CONTRACT_BINARY_ID"',
      "label":    "'"$PROPOSAL_SINGLE_LABEL"'",
      "msg":      "'"$PROPOSAL_SINGLE_INIT_MSG_BASE64"'"
    },
    {
      "admin": {
        "core_module": {}
      },
      "code_id":  '"$PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID"',
      "label":    "'"$PROPOSAL_MULTIPLE_LABEL"'",
      "msg":      "'"$PROPOSAL_MULTIPLE_INIT_MSG_BASE64"'"
    },
    {
      "admin": {
        "core_module": {}
      },
      "code_id":  '"$PROPOSAL_CONTRACT_BINARY_ID"',
      "label":    "'"$PROPOSAL_OVERRULE_LABEL"'",
      "msg":      "'"$PROPOSAL_OVERRULE_INIT_MSG_BASE64"'"
    }
  ],
  "voting_registry_module_instantiate_info": {
    "admin": {
      "core_module": {}
    },
    "code_id":  '"$VOTING_REGISTRY_CONTRACT_BINARY_ID"',
    "label":    "'"$VOTING_REGISTRY_LABEL"'",
    "msg":      "'"$VOTING_REGISTRY_INIT_MSG_BASE64"'"
  }
}'

# RESERVE
RESERVE_INIT='{
  "main_dao_address":       "'"$DAO_CONTRACT_ADDRESS"'",
  "security_dao_address":   "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'",
  "denom":                  "'"$STAKEDENOM"'",
  "distribution_rate":      "'"$RESERVE_DISTRIBUTION_RATE"'",
  "min_period":             '"$RESERVE_MIN_PERIOD"',
  "distribution_contract":  "'"$DISTRIBUTION_CONTRACT_ADDRESS"'",
  "treasury_contract":      "'"$DAO_CONTRACT_ADDRESS"'",
  "vesting_denominator":    "'"$RESERVE_VESTING_DENOMINATOR"'"
}'

DISTRIBUTION_INIT='{
  "main_dao_address":     "'"$DAO_CONTRACT_ADDRESS"'",
  "security_dao_address": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'",
  "denom":                "'"$STAKEDENOM"'"
}'

# VAULTS

NEUTRON_VAULT_INIT='{
  "owner": "'"$DAO_CONTRACT_ADDRESS"'",
  "name":         "'"$NEUTRON_VAULT_NAME"'",
  "denom":        "'"$STAKEDENOM"'",
  "description":  "'"$NEUTRON_VAULT_DESCRIPTION"'"
}'

NEUTRON_INVESTORS_VAULT_INIT='{
     "vesting_contract_address": "'"$NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES"'",
     "owner": "'"$DAO_CONTRACT_ADDRESS"'",
     "description": "'"$NEUTRON_INVESTORS_VAULT_DESCRIPTION"'",
     "name": "'"$NEUTRON_INVESTORS_VAULT_NAME"'"
}'

# VESTING
NEUTRON_VESTING_INVESTORS_INIT='{
    "owner": "'"$ADMIN_ADDRESS"'",
    "token_info_manager": "'"$ADMIN_ADDRESS"'"
}'

# CW4 MODULES FOR SUBDAOS

CW4_VOTE_INIT_MSG='{
  "cw4_group_code_id": '"$CW4_GROUP_CONTRACT_BINARY_ID"',
  "initial_members": [
    {
      "addr": "'"$ADMIN_ADDRESS"'",
      "weight": 1
    },
    {
      "addr": "'"$SECOND_MULTISIG_ADDRESS"'",
      "weight": 1
    }
  ]
}'
CW4_VOTE_INIT_MSG_BASE64=$(json_to_base64 "$CW4_VOTE_INIT_MSG")

# SECURITY_SUBDAO

# SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG will be put into the SECURITY_SUBDAO_PROPOSAL_INIT_MSG
SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG='{
   "open_proposal_submission": false
}'
SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64=$(json_to_base64 "$SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG")

SECURITY_SUBDAO_PROPOSAL_INIT_MSG='{
   "allow_revoting": false,
   "pre_propose_info":{
         "module_may_propose":{
            "info":{
               "admin": {
                     "address": {
                       "addr": "'"$DAO_CONTRACT_ADDRESS"'"
                     }
               },
               "code_id": '"$PRE_PROPOSAL_CONTRACT_BINARY_ID"',
               "msg":     "'"$SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64"'",
               "label":   "'"$SECURITY_SUBDAO_PRE_PROPOSE_LABEL"'"
            }
         }
      },
   "only_members_execute":false,
   "max_voting_period":{
      "height": 1000000000000
   },
   "close_proposal_on_execution_failure":false,
   "threshold":{
      "absolute_count":{
         "threshold": "1"
      }
   }
}'
SECURITY_SUBDAO_PROPOSAL_INIT_MSG_BASE64=$(json_to_base64 "$SECURITY_SUBDAO_PROPOSAL_INIT_MSG")

SECURITY_SUBDAO_CORE_INIT_MSG='{
  "name":         "'"$SECURITY_SUBDAO_CORE_NAME"'",
  "description":  "'"$SECURITY_SUBDAO_CORE_DESCRIPTION"'",
  "vote_module_instantiate_info": {
    "admin": {
      "address": {
        "addr": "'"$DAO_CONTRACT_ADDRESS"'"
      }
    },
    "code_id":  '"$CW4_VOTING_CONTRACT_BINARY_ID"',
    "label":    "'"$SECURITY_SUBDAO_VOTE_LABEL"'",
    "msg":      "'"$CW4_VOTE_INIT_MSG_BASE64"'"
  },
  "proposal_modules_instantiate_info": [
    {
      "admin": {
        "address": {
          "addr": "'"$DAO_CONTRACT_ADDRESS"'"
        }
      },
      "code_id":  '"$SUBDAO_PROPOSAL_BINARY_ID"',
      "label":    "'"$SECURITY_SUBDAO_PROPOSAL_LABEL"'",
      "msg":      "'"$SECURITY_SUBDAO_PROPOSAL_INIT_MSG_BASE64"'"
    }
  ],
  "main_dao":     "'"$DAO_CONTRACT_ADDRESS"'",
  "security_dao": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'"
}'

# GRANTS_SUBDAO

GRANTS_SUBDAO_TIMELOCK_INIT_MSG='{
  "overrule_pre_propose": "'"$PRE_PROPOSAL_OVERRULE_CONTRACT_ADDRESS"'"
}'
GRANTS_SUBDAO_TIMELOCK_INIT_MSG_BASE64=$(json_to_base64 "$GRANTS_SUBDAO_TIMELOCK_INIT_MSG")

GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG='{
  "open_proposal_submission": false,
  "timelock_module_instantiate_info": {
    "admin": {
      "address": {
        "addr": "'"$DAO_CONTRACT_ADDRESS"'"
      }
    },
    "code_id":  '"$SUBDAO_TIMELOCK_BINARY_ID"',
    "label":    "'"$GRANTS_SUBDAO_TIMELOCK_LABEL"'",
    "msg":      "'"$GRANTS_SUBDAO_TIMELOCK_INIT_MSG_BASE64"'"
  }
}'
GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64=$(json_to_base64 "$GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG")

GRANTS_SUBDAO_PROPOSAL_INIT_MSG='{
   "allow_revoting": false,
   "pre_propose_info":{
      "module_may_propose":{
         "info":{
            "admin": {
              "address": {
                "addr": "'"$DAO_CONTRACT_ADDRESS"'"
              }
            },
            "code_id":  '"$SUBDAO_PRE_PROPOSE_BINARY_ID"',
            "msg":      "'"$GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64"'",
            "label":    "'"$GRANTS_SUBDAO_PRE_PROPOSE_LABEL"'"
         }
      }
   },
   "only_members_execute":false,
   "max_voting_period":{
      "height": 1000000000000
   },
   "close_proposal_on_execution_failure":false,
   "threshold":{
      "absolute_count":{
         "threshold": "2"
      }
   }
}'
GRANTS_SUBDAO_PROPOSAL_INIT_MSG_BASE64=$(json_to_base64 "$GRANTS_SUBDAO_PROPOSAL_INIT_MSG")

GRANTS_SUBDAO_CORE_INIT_MSG='{
  "name":         "'"$GRANTS_SUBDAO_CORE_NAME"'",
  "description":  "'"$GRANTS_SUBDAO_CORE_DESCRIPTION"'",
  "vote_module_instantiate_info": {
    "admin": {
      "address": {
        "addr": "'"$DAO_CONTRACT_ADDRESS"'"
      }
    },
    "code_id":  '"$CW4_VOTING_CONTRACT_BINARY_ID"',
    "label":    "'"$GRANTS_SUBDAO_VOTING_MODULE_LABEL"'",
    "msg":      "'"$CW4_VOTE_INIT_MSG_BASE64"'"
  },
  "proposal_modules_instantiate_info": [
    {
      "admin": {
        "address": {
          "addr": "'"$DAO_CONTRACT_ADDRESS"'"
        }
      },
      "code_id":  '"$SUBDAO_PROPOSAL_BINARY_ID"',
      "label":    "'"$GRANTS_SUBDAO_PROPOSAL_LABEL"'",
      "msg":      "'"$GRANTS_SUBDAO_PROPOSAL_INIT_MSG_BASE64"'"
    }
  ],
  "main_dao":     "'"$DAO_CONTRACT_ADDRESS"'",
  "security_dao": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'"
}'

echo "Instantiate contracts"

function init_contract() {
  BINARY_ID=$1
  INIT_MSG=$2
  LABEL=$3
  check_json "$INIT_MSG"
  $BINARY add-wasm-message instantiate-contract "$BINARY_ID" "$INIT_MSG" --label "$LABEL" \\
    --run-as "$DAO_CONTRACT_ADDRESS" --admin "$DAO_CONTRACT_ADDRESS" --home "$CHAIN_DIR"
}

# WARNING!
# The following code is to add contracts instantiations messages to genesis
# It affects the section of predicting contracts addresses at the beginning of the script
# If you're to do any changes, please do it consistently in both sections
init_contract "$NEUTRON_VAULT_CONTRACT_BINARY_ID"            "$NEUTRON_VAULT_INIT"             "$NEUTRON_VAULT_LABEL"
init_contract "$NEUTRON_INVESTORS_VAULT_CONTRACT_BINARY_ID"  "$NEUTRON_INVESTORS_VAULT_INIT"   "$NEUTRON_INVESTORS_VAULT_LABEL"
init_contract "$NEUTRON_VESTING_INVESTORS_BINARY_ID"         "$NEUTRON_VESTING_INVESTORS_INIT"  "$NEUTRON_VESTING_INVESTORS_LABEL"
init_contract "$DAO_CONTRACT_BINARY_ID"                      "$DAO_INIT"                       "$DAO_CORE_LABEL"
init_contract "$RESERVE_CONTRACT_BINARY_ID"                  "$RESERVE_INIT"                   "$RESERVE_LABEL"
init_contract "$DISTRIBUTION_CONTRACT_BINARY_ID"             "$DISTRIBUTION_INIT"              "$DISTRIBUTION_LABEL"
init_contract "$SUBDAO_CORE_BINARY_ID"                       "$SECURITY_SUBDAO_CORE_INIT_MSG"  "$SECURITY_SUBDAO_CORE_LABEL"
init_contract "$SUBDAO_CORE_BINARY_ID"                       "$GRANTS_SUBDAO_CORE_INIT_MSG"    "$GRANTS_SUBDAO_CORE_LABEL"

ADD_SUBDAOS_MSG='{
  "update_sub_daos": {
    "to_add": [
      {
        "addr": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'"
      },
      {
        "addr": "'"$GRANTS_SUBDAO_CORE_CONTRACT_ADDRESS"'"
      }
    ],
    "to_remove": []
  }
}'
check_json "$ADD_SUBDAOS_MSG"

SET_VESTING_TOKEN_MSG='{
    "set_vesting_token": {
      "vesting_token": {
         "native_token": {
           "denom": "'"$STAKEDENOM"'"
         }
      }
    }
}'

REGISTER_VESTING_ACCOUNTS_MSG='{
  "register_vesting_accounts": {
    "vesting_accounts": [
      {
        "address": "'"$ADMIN_ADDRESS"'",
        "schedules": [
          {
            "end_point": {
              "amount": "1000",
              "time": 1814821200
            },
            "start_point": {
              "amount": "0",
              "time": 1720213200
            }
          }
        ]
      }
    ]
  }
}'

$BINARY add-wasm-message execute "$DAO_CONTRACT_ADDRESS" "$ADD_SUBDAOS_MSG" \\
  --run-as "$DAO_CONTRACT_ADDRESS" --home "$CHAIN_DIR"

$BINARY add-wasm-message execute "$NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES" "$SET_VESTING_TOKEN_MSG" \\
  --run-as "$ADMIN_ADDRESS" --home "$CHAIN_DIR"

$BINARY add-wasm-message execute "$NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES" "$REGISTER_VESTING_ACCOUNTS_MSG" \\
  --amount 1000untrn --run-as "$ADMIN_ADDRESS" --home "$CHAIN_DIR"

function set_genesis_param() {
  param_name=$1
  param_value=$2
  sed -i -e "s;\\"$param_name\\":.*;\\"$param_name\\": $param_value;g" "$GENESIS_PATH"
}

function set_genesis_param_jq() {
  param_path=$1
  param_value=$2
  jq "\${param_path} = \${param_value}" > tmp_genesis_file.json < "$GENESIS_PATH" && mv tmp_genesis_file.json "$GENESIS_PATH"
}

function convert_bech32_base64_esc() {
  $BINARY keys parse $1 --output json | jq .bytes | xxd -r -p | base64 | sed -e 's/\\//\\\\\\//g'
}
DAO_CONTRACT_ADDRESS_B64=$(convert_bech32_base64_esc "$DAO_CONTRACT_ADDRESS")
echo $DAO_CONTRACT_ADDRESS_B64

set_genesis_param admins                                 "[\\"$DAO_CONTRACT_ADDRESS\\"]"                    # admin module
set_genesis_param treasury_address                       "\\"$DAO_CONTRACT_ADDRESS\\""                      # feeburner
set_genesis_param fee_collector_address                  "\\"$DAO_CONTRACT_ADDRESS\\""                      # tokenfactory
set_genesis_param security_address                       "\\"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS\\","    # cron
set_genesis_param limit                                  5                                                # cron
#set_genesis_param allow_messages                        "[\\"*\\"]"                                        # interchainaccounts
set_genesis_param signed_blocks_window                   "\\"$SLASHING_SIGNED_BLOCKS_WINDOW\\","            # slashing
set_genesis_param min_signed_per_window                  "\\"$SLASHING_MIN_SIGNED\\","                      # slashing
set_genesis_param slash_fraction_double_sign             "\\"$SLASHING_FRACTION_DOUBLE_SIGN\\","            # slashing
set_genesis_param slash_fraction_downtime                "\\"$SLASHING_FRACTION_DOWNTIME\\""                # slashing
set_genesis_param minimum_gas_prices                     "$MIN_GAS_PRICES,"                               # globalfee
set_genesis_param max_total_bypass_min_fee_msg_gas_usage "\\"$MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE\\""    # globalfee
set_genesis_param_jq ".app_state.globalfee.params.bypass_min_fee_msg_types" "$BYPASS_MIN_FEE_MSG_TYPES"   # globalfee
set_genesis_param proposer_fee                          "\\"0.25\\""                                        # builder(POB)
set_genesis_param escrow_account_address                "\\"$DAO_CONTRACT_ADDRESS_B64\\","                  # builder(POB)
set_genesis_param sudo_call_gas_limit                   "\\"1000000\\""                                     # contractmanager
set_genesis_param max_gas                               "\\"1000000000\\""                                  # consensus_params

if ! jq -e . "$GENESIS_PATH" >/dev/null 2>&1; then
    echo "genesis appears to become incorrect json" >&2
    exit 1
fi

echo "DAO $DAO_CONTRACT_ADDRESS"
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "updateConfig.sh": "#!/bin/bash

STAKEDENOM=\${DENOM:-untrn}
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

P2PPORT=\${P2PPORT:-26656}
RPCPORT=\${RPCPORT:-26657}
RESTPORT=\${RESTPORT:-1317}
ROSETTA=\${ROSETTA:-8080}

set -eux

ls $CHAIN_DIR

sed -i -e 's/timeout_commit = "5s"/timeout_commit = "1s"/g' "$CHAIN_DIR/config/config.toml"
sed -i -e 's/timeout_propose = "3s"/timeout_propose = "1s"/g' "$CHAIN_DIR/config/config.toml"
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' "$CHAIN_DIR/config/config.toml"
sed -i -e 's/enable = false/enable = true/g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's/swagger = false/swagger = true/g' "$CHAIN_DIR/config/app.toml"
sed -i -e "s/minimum-gas-prices = \\"\\"/minimum-gas-prices = \\"0$STAKEDENOM\\"/g" "$CHAIN_DIR/config/app.toml"
sed -i -e 's/enabled = false/enabled = true/g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's/prometheus-retention-time = 0/prometheus-retention-time = 1000/g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' "$CHAIN_DIR/config/app.toml"

sed -i -e 's#"tcp://0.0.0.0:26656"#"tcp://0.0.0.0:'"$P2PPORT"'"#g' "$CHAIN_DIR/config/config.toml"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:'"$RPCPORT"'"#g' "$CHAIN_DIR/config/config.toml"
sed -i -e 's#"tcp://localhost:1317"#"tcp://0.0.0.0:'"$RESTPORT"'"#g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's#"tcp://0.0.0.0:1317"#"tcp://0.0.0.0:'"$RESTPORT"'"#g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's#":8080"#":'"$ROSETTA"'"#g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's#localhost#0.0.0.0#g' "$CHAIN_DIR/config/app.toml"

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml
",
      "updateGenesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-neutron-1",
        "app.kubernetes.io/part-of": "neutron-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "neutron-1",
        "starship.io/chain-name": "neutron",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-neutron-1",
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "neutron-1,cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "neutron,cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/neutron-1",
                  "name": "registry-neutron-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: neutron-1. Waiting for it to start..."
  echo "Checking: http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-neutron-1",
              },
              "name": "registry-neutron-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/neutron-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "neutron",
  "assets": [
    {
      "description": "The native token of Neutron chain.",
      "denom_units": [
        {
          "denom": "untrn",
          "exponent": 0
        },
        {
          "denom": "ntrn",
          "exponent": 6
        }
      ],
      "base": "untrn",
      "name": "Neutron",
      "display": "ntrn",
      "symbol": "NTRN",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/neutron/images/ntrn.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/neutron/images/ntrn.svg"
      },
      "coingecko_id": "neutron"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "neutron",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "neutron-1",
  "pretty_name": "Neutron Devnet",
  "bech32_prefix": "neutron",
  "daemon_name": "neutrond",
  "node_home": "/root/.neutrond",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "untrn",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "untrn"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/neutron-org/neutron",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-neutron-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-neutron-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-neutron-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "neutron-1"
type = "CosmosSdk"
key_name = "neutron-1-cli"
ccv_consumer_chain = true
rpc_addr = "http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://neutron-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "neutron"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "untrn" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "neutron-1"
type = "CosmosSdk"
key_name = "neutron-1"
ccv_consumer_chain = true
rpc_addr = "http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://neutron-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "neutron"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "untrn" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-neutron-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-neutron-cosmos",
    },
  },
  "relayer/hermes-neutron-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-neutron-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-neutron-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-neutron-cosmos",
      },
    },
  },
  "relayer/hermes-neutron-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-neutron-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-neutron-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-neutron-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-neutron-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-neutron-cosmos",
            "app.kubernetes.io/rawname": "neutron-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: neutron-1. Waiting for it to start..."
  echo "Checking: http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for neutron-1..."
hermes keys add \\
  --chain neutron-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name neutron-1 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="untrn"
RLY_ADDR=$(hermes --json keys list --chain neutron-1 | tail -1 | jq -r '.result."neutron-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for neutron-1-cli..."
hermes keys add \\
  --chain neutron-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name neutron-1-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain neutron-1 | tail -1 | jq -r '.result."neutron-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

hermes create channel \\
  --a-connection connection-0 \\
  --channel-version 1 \\
  --order ordered \\
  --a-chain neutron-1 \\
  --a-port consumer \\
  --b-port provider

hermes create channel \\
  --a-connection connection-0 \\
  --a-chain neutron-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-neutron-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: neutron should have proper file organization for neutron: neutron-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "neutron": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "ics-proposal-configmap.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "neutron-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-neutron-cosmos-configmap.yaml",
    "hermes-neutron-cosmos-service.yaml",
    "hermes-neutron-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: neutron should have proper file organization for neutron: neutron-resource-counts 1`] = `
{
  "ConfigMap": 8,
  "Deployment": 1,
  "Service": 4,
  "StatefulSet": 3,
}
`;

exports[`BuilderManager Config Files Tests Config: neutron-relayer should generate valid YAML manifests for neutron-relayer: neutron-relayer-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "gaiad",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "2",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "neutron/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "neutron-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "neutron-1",
        "starship.io/chain-name": "neutron",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "neutron-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "neutron-1-genesis",
      },
    },
  },
  "neutron/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "neutron-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-1-genesis",
        "app.kubernetes.io/part-of": "neutron-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "neutron-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "neutron",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "neutron-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "neutron-1-genesis",
        },
      },
      "serviceName": "neutron-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "neutron-1-genesis",
            "app.kubernetes.io/rawname": "neutron-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "neutron-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "untrn",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000untrn",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/neutron-org/neutron",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "neutron-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron:v3.0.5",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.neutrond",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "neutron-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.neutrond/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.neutrond/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.neutrond/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.neutrond/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.neutrond/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.neutrond",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "untrn",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000untrn",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/neutron-org/neutron",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "neutron-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "2",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron:v3.0.5",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.neutrond",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "untrn",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000untrn",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/neutron-org/neutron",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "neutron-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron:v3.0.5",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.neutrond",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "export

echo "Fetching priv keys from provider exposer"
curl -s http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8081/priv_keys | jq > $CHAIN_DIR/config/provider_priv_validator_key.json
cat $CHAIN_DIR/config/provider_priv_validator_key.json

echo "Replace provider priv validator key with provider keys"
mv $CHAIN_DIR/config/priv_validator_key.json $CHAIN_DIR/config/previous_priv_validator_key.json
mv $CHAIN_DIR/config/provider_priv_validator_key.json $CHAIN_DIR/config/priv_validator_key.json

echo "Create consumer addition proposal"
DENOM=uatom \\
  CHAIN_ID=cosmoshub-4 \\
  CHAIN_BIN=gaiad \\
  NODE_URL=http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657 \\
  PROPOSAL_FILE=/proposal/proposal.json \\
  bash -e /scripts/create-ics.sh

echo "create ccv state file"
gaiad query provider consumer-genesis neutron-1 \\
  --node http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657 \\
  -o json > $CHAIN_DIR/config/ccv-state.json
cat $CHAIN_DIR/config/ccv-state.json | jq

echo "Update genesis file with ccv state"
jq -s '.[0].app_state.ccvconsumer = .[1] | .[0]' $CHAIN_DIR/config/genesis.json $CHAIN_DIR/config/ccv-state.json > $CHAIN_DIR/config/genesis-ccv.json
mv $CHAIN_DIR/config/genesis.json $CHAIN_DIR/config/genesis-no-ccv.json
mv $CHAIN_DIR/config/genesis-ccv.json $CHAIN_DIR/config/genesis.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "untrn",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000untrn",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/neutron-org/neutron",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.neutrond",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "neutrond",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "neutron-1",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-ics",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/proposal",
                  "name": "proposal",
                },
                {
                  "mountPath": "/root/.neutrond",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-neutron-1",
              },
              "name": "scripts",
            },
            {
              "configMap": {
                "name": "consumer-proposal-neutron-1",
              },
              "name": "proposal",
            },
          ],
        },
      },
    },
  },
  "neutron/ics-proposal-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "proposal.json": "{
  "title": "Add neutron consumer chain",
  "summary": "Add neutron consumer chain with id neutron-1",
  "chain_id": "neutron-1",
  "initial_height": {
    "revision_height": 1,
    "revision_number": 1
  },
  "genesis_hash": "d86d756e10118e66e6805e9cc476949da2e750098fcc7634fd0cc77f57a0b2b0",
  "binary_hash": "376cdbd3a222a3d5c730c9637454cd4dd925e2f9e2e0d0f3702fc922928583f1",
  "spawn_time": "2023-02-28T20:40:00.000000Z",
  "unbonding_period": 294000000000,
  "ccv_timeout_period": 259920000000,
  "transfer_timeout_period": 18000000000,
  "consumer_redistribution_fraction": "0.75",
  "blocks_per_distribution_transmission": 10,
  "historical_entries": 100,
  "distribution_transmission_channel": "",
  "top_N": 95,
  "validators_power_cap": 0,
  "validator_set_cap": 0,
  "allowlist": [],
  "denylist": [],
  "deposit": "10000uatom"
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron",
        "app.kubernetes.io/part-of": "neutron-1",
        "app.kubernetes.io/role": "ics-proposal",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "neutron-1",
        "starship.io/chain-name": "neutron",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "consumer-proposal-neutron-1",
    },
  },
  "neutron/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "createGenesis.sh": "#!/bin/bash

DENOM="\${DENOM:=untrn}"
STAKEDENOM=\${DENOM:-untrn}
COINS="\${COINS:=100000000000000000untrn}"
CHAIN_ID="\${CHAIN_ID:=neutron-1}"
BINARY="\${CHAIN_BIN:=neutrond}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.neutrond}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

BRANCH="\${BRANCH:=v3.0.5}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

GENESIS_PATH="$CHAIN_DIR/config/genesis.json"

CONTRACTS_BINARIES_DIR=\${CONTRACTS_BINARIES_DIR:-./contracts}
THIRD_PARTY_CONTRACTS_DIR=\${THIRD_PARTY_CONTRACTS_DIR:-./contracts_thirdparty}

set -euxo pipefail

mkdir -p $CONTRACTS_BINARIES_DIR $THIRD_PARTY_CONTRACTS_DIR

function download_contract() {
    CONTRACT_NAME="$1"  # <type of contract>/<contract name>
    CONTRACT_URI=\${CONTRACT_NAME#"./"}
    curl https://github.com/neutron-org/neutron/raw/$BRANCH/$CONTRACT_URI -L -o $CONTRACT_NAME
}

$BINARY init $CHAIN_ID --chain-id $CHAIN_ID

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $BINARY keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$BINARY add-genesis-account $($BINARY keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $BINARY keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$BINARY add-genesis-account $($BINARY keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $BINARY keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $BINARY add-genesis-account $($BINARY keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

# Add test addresses, admin address
echo "Adding key.... demowallet1"
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $BINARY keys add demowallet1 --index 1 --recover --keyring-backend="test"
$BINARY add-genesis-account $($BINARY keys show -a demowallet1 --keyring-backend="test") $COINS --keyring-backend="test"
# Add test addresses, second multisig address
echo "Adding key.... demowallet2"
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $BINARY keys add demowallet2 --index 2 --recover --keyring-backend="test"
$BINARY add-genesis-account $($BINARY keys show -a demowallet2 --keyring-backend="test") $COINS --keyring-backend="test"
# Add test addresses, second multisig address
echo "Adding key.... demowallet2"
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $BINARY keys add demowallet3 --index 3 --recover --keyring-backend="test"
$BINARY add-genesis-account $($BINARY keys show -a demowallet3 --keyring-backend="test") $COINS --keyring-backend="test"

echo "Update genesis.json file with updated local params"
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

sed -i -e "s/\\"denom\\": \\"stake\\",/\\"denom\\": \\"$DENOM\\",/g" "$GENESIS_PATH"
sed -i -e "s/\\"mint_denom\\": \\"stake\\",/\\"mint_denom\\": \\"$DENOM\\",/g" "$GENESIS_PATH"
sed -i -e "s/\\"bond_denom\\": \\"stake\\"/\\"bond_denom\\": \\"$DENOM\\"/g" "$GENESIS_PATH"

# IMPORTANT! minimum_gas_prices should always contain at least one record, otherwise the chain will not start or halt
MIN_GAS_PRICES_DEFAULT='[{"denom":"untrn","amount":"0"}]'
MIN_GAS_PRICES=\${MIN_GAS_PRICES:-"$MIN_GAS_PRICES_DEFAULT"}

BYPASS_MIN_FEE_MSG_TYPES_DEFAULT='["/ibc.core.channel.v1.Msg/RecvPacket", "/ibc.core.channel.v1.Msg/Acknowledgement", "/ibc.core.client.v1.Msg/UpdateClient"]'
BYPASS_MIN_FEE_MSG_TYPES=\${BYPASS_MIN_FEE_MSG_TYPES:-"$BYPASS_MIN_FEE_MSG_TYPES_DEFAULT"}

MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE_DEFAULT=1000000
MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE=\${MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE:-"$MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE_DEFAULT"}

ADMIN_ADDRESS=$($BINARY keys show demowallet1 -a --keyring-backend="test")
SECOND_MULTISIG_ADDRESS=$($BINARY keys show demowallet2 -a --keyring-backend="test")

ls $CHAIN_DIR/config

# MAIN_DAO
DAO_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_core.wasm
download_contract $DAO_CONTRACT
PRE_PROPOSAL_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_pre_propose_single.wasm
download_contract $PRE_PROPOSAL_CONTRACT
PRE_PROPOSAL_MULTIPLE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_pre_propose_multiple.wasm
download_contract $PRE_PROPOSAL_MULTIPLE_CONTRACT
PRE_PROPOSAL_OVERRULE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_pre_propose_overrule.wasm
download_contract $PRE_PROPOSAL_OVERRULE_CONTRACT
PROPOSAL_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_proposal_single.wasm
download_contract $PROPOSAL_CONTRACT
PROPOSAL_MULTIPLE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_proposal_multiple.wasm
download_contract $PROPOSAL_MULTIPLE_CONTRACT
VOTING_REGISTRY_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_voting_registry.wasm
download_contract $VOTING_REGISTRY_CONTRACT
# VAULTS
NEUTRON_VAULT_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_vault.wasm
download_contract $NEUTRON_VAULT_CONTRACT
NEUTRON_INVESTORS_VAULT=$CONTRACTS_BINARIES_DIR/investors_vesting_vault.wasm
download_contract $NEUTRON_INVESTORS_VAULT
# VESTING
NEUTRON_VESTING_INVESTORS=$CONTRACTS_BINARIES_DIR/vesting_investors.wasm
download_contract $NEUTRON_VESTING_INVESTORS
# RESERVE
RESERVE_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_reserve.wasm
download_contract $RESERVE_CONTRACT
DISTRIBUTION_CONTRACT=$CONTRACTS_BINARIES_DIR/neutron_distribution.wasm
download_contract $DISTRIBUTION_CONTRACT
# SUBDAOS
SUBDAO_CORE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_core.wasm
download_contract $SUBDAO_CORE_CONTRACT
SUBDAO_TIMELOCK_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_timelock_single.wasm
download_contract $SUBDAO_TIMELOCK_CONTRACT
SUBDAO_PRE_PROPOSE_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_pre_propose_single.wasm
download_contract $SUBDAO_PRE_PROPOSE_CONTRACT
SUBDAO_PROPOSAL_CONTRACT=$CONTRACTS_BINARIES_DIR/cwd_subdao_proposal_single.wasm
download_contract $SUBDAO_PROPOSAL_CONTRACT
CW4_VOTING_CONTRACT=$THIRD_PARTY_CONTRACTS_DIR/cw4_voting.wasm
download_contract $CW4_VOTING_CONTRACT
CW4_GROUP_CONTRACT=$THIRD_PARTY_CONTRACTS_DIR/cw4_group.wasm
download_contract $CW4_GROUP_CONTRACT

echo "Add consumer section..."
$BINARY add-consumer-section --home "$CHAIN_DIR"
### PARAMETERS SECTION

## slashing params
SLASHING_SIGNED_BLOCKS_WINDOW=140000
SLASHING_MIN_SIGNED=0.050000000000000000
SLASHING_FRACTION_DOUBLE_SIGN=0.010000000000000000
SLASHING_FRACTION_DOWNTIME=0.000100000000000000

##pre propose single parameters
PRE_PROPOSAL_SINGLE_AMOUNT=1000
PRE_PROPOSAL_SINGLE_REFUND_POLICY="only_passed"
PRE_PROPOSAL_SINGLE_OPEN_PROPOSAL_SUBMISSION=false

## proposal singe params
PROPOSAL_ALLOW_REVOTING=false # should be true for non-testing env
PROPOSAL_SINGLE_ONLY_MEMBERS_EXECUTE=false
PROPOSAL_SINGLE_ONLY_MAX_VOTING_PERIOD=1200 # seconds; should be 2 weeks in production
PROPOSAL_SINGLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE=false
PROPOSAL_SINGLE_QUORUM=0.05 # quorum to consider proposal's result viable [float] < 1
PROPOSAL_SINGLE_THRESHOLD=0.5 # % of votes should vote for the proposal to pass [float] <1
PROPOSAL_SINGLE_LABEL="neutron.proposals.single"
PRE_PROPOSAL_SINGLE_LABEL="neutron.proposals.single.pre_propose"

## propose multiple params
PROPOSAL_MULTIPLE_ALLOW_REVOTING=false # should be true for non-testing env
PROPOSAL_MULTIPLE_ONLY_MEMBERS_EXECUTE=false
PROPOSAL_MULTIPLE_ONLY_MAX_VOTING_PERIOD=1200 # seconds; should be 2 weeks in production
PROPOSAL_MULTIPLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE=false
PROPOSAL_MULTIPLE_QUORUM=0.05 # quorum to consider proposal's result viable [float] < 1
PROPOSAL_MULTIPLE_LABEL="neutron.proposals.multiple"
PRE_PROPOSAL_MULTIPLE_LABEL="neutron.proposals.multiple.pre_propose"

## Propose overrule params
PROPOSAL_OVERRULE_ALLOW_REVOTING=false
PROPOSAL_OVERRULE_ONLY_MEMBERS_EXECUTE=false
PROPOSAL_OVERRULE_ONLY_MAX_VOTING_PERIOD=1200 # seconds; should be 3 days in production
PROPOSAL_OVERRULE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE=false
PROPOSAL_OVERRULE_THRESHOLD=0.005 # around 10 times lower than for regular proposals
PROPOSAL_OVERRULE_LABEL="neutron.proposals.overrule"
PRE_PROPOSE_OVERRULE_LABEL="neutron.proposals.overrule.pre_propose"

## Voting registry
VOTING_REGISTRY_LABEL="neutron.voting"

## DAO
DAO_NAME="Neutron DAO"
DAO_DESCRIPTION="Neutron DAO is a DAO DAO-based governance of Neutron chain"
DAO_CORE_LABEL="neutron.core"

## Neutron vault
NEUTRON_VAULT_NAME="Neutron Vault"
NEUTRON_VAULT_DESCRIPTION="Vault to put NTRN tokens to get voting power"
NEUTRON_VAULT_LABEL="neutron.voting.vaults.neutron"
NEUTRON_INVESTORS_VAULT_NAME="Neutron Investors Vault"
NEUTRON_INVESTORS_VAULT_DESCRIPTION="Vault sourcing voting power form investors vesting"
NEUTRON_INVESTORS_VAULT_LABEL="neutron.voting.vaults.investors"

# VESTING (for tests purposes)
NEUTRON_VESTING_INVESTORS_LABEL="neutron.vesting.investors"

## Reserve
RESERVE_DISTRIBUTION_RATE=0
RESERVE_MIN_PERIOD=10
RESERVE_VESTING_DENOMINATOR=1
RESERVE_LABEL="reserve"

DISTRIBUTION_LABEL="distribution"

## Grants subdao
GRANTS_SUBDAO_CORE_NAME="Grants SubDAO"
GRANTS_SUBDAO_CORE_DESCRIPTION="SubDAO to distribute grants to projects"
GRANTS_SUBDAO_CORE_LABEL="neutron.subdaos.grants.core"
GRANTS_SUBDAO_PROPOSAL_LABEL="neutron.subdaos.grants.proposals.single"
GRANTS_SUBDAO_PRE_PROPOSE_LABEL="neutron.subdaos.grants.proposals.single.pre_propose"
GRANTS_SUBDAO_VOTING_MODULE_LABEL="neutron.subdaos.grants.voting"

## Timelock
GRANTS_SUBDAO_TIMELOCK_LABEL="neutron.subdaos.grants.proposals.single.pre_propose.timelock"

## Security subdao
SECURITY_SUBDAO_CORE_NAME="Security SubDAO"
SECURITY_SUBDAO_CORE_DESCRIPTION="SubDAO with power to pause specific Neutron DAO modules"
SECURITY_SUBDAO_CORE_LABEL="neutron.subdaos.security.core"
SECURITY_SUBDAO_PROPOSAL_LABEL="neutron.subdaos.security.proposals.single"
SECURITY_SUBDAO_PRE_PROPOSE_LABEL="neutron.subdaos.security.proposals.single.pre_propose"
SECURITY_SUBDAO_VOTE_LABEL="neutron.subdaos.security.voting"

echo "Initializing dao contract in genesis..."

function store_binary() {
  CONTRACT_BINARY_PATH=$1
  $BINARY add-wasm-message store "$CONTRACT_BINARY_PATH" \\
    --output json --run-as "\${ADMIN_ADDRESS}" --keyring-backend=test --home "$CHAIN_DIR"
  BINARY_ID=$(jq -r "[.app_state.wasm.gen_msgs[] | select(.store_code != null)] | length" "$CHAIN_DIR/config/genesis.json")
  echo "$BINARY_ID"
}

# Upload the dao contracts
# MAIN_DAO
DAO_CONTRACT_BINARY_ID=$(store_binary                   "$DAO_CONTRACT")
PRE_PROPOSAL_CONTRACT_BINARY_ID=$(store_binary          "$PRE_PROPOSAL_CONTRACT")
PRE_PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID=$(store_binary "$PRE_PROPOSAL_MULTIPLE_CONTRACT")
PRE_PROPOSAL_OVERRULE_CONTRACT_BINARY_ID=$(store_binary "$PRE_PROPOSAL_OVERRULE_CONTRACT")
PROPOSAL_CONTRACT_BINARY_ID=$(store_binary              "$PROPOSAL_CONTRACT")
PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID=$(store_binary     "$PROPOSAL_MULTIPLE_CONTRACT")
VOTING_REGISTRY_CONTRACT_BINARY_ID=$(store_binary       "$VOTING_REGISTRY_CONTRACT")
# VAULTS
NEUTRON_VAULT_CONTRACT_BINARY_ID=$(store_binary         "$NEUTRON_VAULT_CONTRACT")
NEUTRON_INVESTORS_VAULT_CONTRACT_BINARY_ID=$(store_binary "$NEUTRON_INVESTORS_VAULT")
# VESTING
NEUTRON_VESTING_INVESTORS_BINARY_ID=$(store_binary      "$NEUTRON_VESTING_INVESTORS")
# RESERVE
DISTRIBUTION_CONTRACT_BINARY_ID=$(store_binary          "$DISTRIBUTION_CONTRACT")
RESERVE_CONTRACT_BINARY_ID=$(store_binary               "$RESERVE_CONTRACT")
# SUBDAOS
SUBDAO_CORE_BINARY_ID=$(store_binary                    "$SUBDAO_CORE_CONTRACT")
SUBDAO_TIMELOCK_BINARY_ID=$(store_binary                "$SUBDAO_TIMELOCK_CONTRACT")
SUBDAO_PRE_PROPOSE_BINARY_ID=$(store_binary             "$SUBDAO_PRE_PROPOSE_CONTRACT")
SUBDAO_PROPOSAL_BINARY_ID=$(store_binary                "$SUBDAO_PROPOSAL_CONTRACT")
CW4_VOTING_CONTRACT_BINARY_ID=$(store_binary            "$CW4_VOTING_CONTRACT")
CW4_GROUP_CONTRACT_BINARY_ID=$(store_binary             "$CW4_GROUP_CONTRACT")

# WARNING!
# The following code is needed to pre-generate the contract addresses
# Those addresses depend on the ORDER OF CONTRACTS INITIALIZATION
# Thus, this code section depends a lot on the order and content of the instantiate-contract commands at the end script
# It also depends on the implicitly initialized contracts (e.g. DAO core instantiation also instantiate proposals and stuff)
# If you're to do any changes, please do it consistently in both sections
# If you're to do add any implicitly initialized contracts in init messages, please reflect changes here

function genaddr() {
  CODE_ID=$1
  CONTRACT_ADDRESS=$($BINARY debug generate-contract-address "$INSTANCE_ID_COUNTER" "$CODE_ID")
  echo "$CONTRACT_ADDRESS"
}

INSTANCE_ID_COUNTER=1

# VAULTS
NEUTRON_VAULT_CONTRACT_ADDRESS=$(genaddr                "$NEUTRON_VAULT_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
NEUTRON_INVESTORS_VAULT_CONTRACT_ADDRESS=$(genaddr      "$NEUTRON_INVESTORS_VAULT_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

# VESTING
NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES=$(genaddr    "$NEUTRON_VESTING_INVESTORS_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

# MAIN_DAO
DAO_CONTRACT_ADDRESS=$(genaddr                          "$DAO_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
VOTING_REGISTRY_CONTRACT_ADDRESS=$(genaddr              "$VOTING_REGISTRY_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PROPOSAL_SINGLE_CONTRACT_ADDRESS=$(genaddr              "$PROPOSAL_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PRE_PROPOSAL_CONTRACT_ADDRESS=$(genaddr                 "$PRE_PROPOSAL_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PROPOSAL_MULTIPLE_CONTRACT_ADDRESS=$(genaddr            "$PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PRE_PROPOSAL_MULTIPLE_CONTRACT_ADDRESS=$(genaddr        "$PRE_PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PROPOSAL_OVERRULE_CONTRACT_ADDRESS=$(genaddr            "$PROPOSAL_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
PRE_PROPOSAL_OVERRULE_CONTRACT_ADDRESS=$(genaddr        "$PRE_PROPOSAL_OVERRULE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

# RESERVE
RESERVE_CONTRACT_ADDRESS=$(genaddr                     "$RESERVE_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
DISTRIBUTION_CONTRACT_ADDRESS=$(genaddr                "$DISTRIBUTION_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
# SUBDAOS
SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS=$(genaddr        "$SUBDAO_CORE_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
SECURITY_SUBDAO_VOTING_CONTRACT_ADDRESS=$(genaddr      "$CW4_VOTING_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
SECURITY_SUBDAO_GROUP_CONTRACT_ADDRESS=$(genaddr       "$CW4_GROUP_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
SECURITY_SUBDAO_PROPOSAL_CONTRACT_ADDRESS=$(genaddr    "$SUBDAO_PROPOSAL_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
SECURITY_SUBDAO_PRE_PROPOSE_CONTRACT_ADDRESS=$(genaddr "$SUBDAO_PROPOSAL_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_CORE_CONTRACT_ADDRESS=$(genaddr          "$SUBDAO_CORE_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_VOTING_CONTRACT_ADDRESS=$(genaddr        "$CW4_VOTING_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_PROPOSAL_CONTRACT_ADDRESS=$(genaddr      "$SUBDAO_PROPOSAL_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_PRE_PROPOSE_CONTRACT_ADDRESS=$(genaddr   "$SUBDAO_PRE_PROPOSE_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_TIMELOCK_CONTRACT_ADDRESS=$(genaddr      "$SUBDAO_TIMELOCK_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))
GRANTS_SUBDAO_GROUP_CONTRACT_ADDRESS=$(genaddr         "$CW4_GROUP_CONTRACT_BINARY_ID") && (( INSTANCE_ID_COUNTER++ ))

function check_json() {
  MSG=$1
  if ! jq -e . >/dev/null 2>&1 <<<"$MSG"; then
      echo "Failed to parse JSON for $MSG" >&2
      exit 1
  fi
}

function json_to_base64() {
  MSG=$1
  check_json "$MSG"
  echo "$MSG" | base64 | tr -d "\\n"
}

# PRE_PROPOSE_INIT_MSG will be put into the PROPOSAL_SINGLE_INIT_MSG and PROPOSAL_MULTIPLE_INIT_MSG
PRE_PROPOSE_INIT_MSG='{
   "deposit_info":{
      "denom":{
         "token":{
            "denom":{
               "native":"'"$STAKEDENOM"'"
            }
         }
      },
     "amount": "'"$PRE_PROPOSAL_SINGLE_AMOUNT"'",
     "refund_policy":"'"$PRE_PROPOSAL_SINGLE_REFUND_POLICY"'"
   },
   "open_proposal_submission": '"$PRE_PROPOSAL_SINGLE_OPEN_PROPOSAL_SUBMISSION"'
}'
PRE_PROPOSE_INIT_MSG_BASE64=$(json_to_base64 "$PRE_PROPOSE_INIT_MSG")

# -------------------- PROPOSE-SINGLE { PRE-PROPOSE } --------------------

PROPOSAL_SINGLE_INIT_MSG='{
   "allow_revoting":'"$PROPOSAL_ALLOW_REVOTING"',
   "pre_propose_info":{
      "module_may_propose":{
         "info":{
            "admin": {
              "core_module": {}
            },
            "code_id":  '"$PRE_PROPOSAL_CONTRACT_BINARY_ID"',
            "msg":      "'"$PRE_PROPOSE_INIT_MSG_BASE64"'",
            "label":    "'"$PRE_PROPOSAL_SINGLE_LABEL"'"
         }
      }
   },
   "only_members_execute":'"$PROPOSAL_SINGLE_ONLY_MEMBERS_EXECUTE"',
   "max_voting_period":{
      "time":'"$PROPOSAL_SINGLE_ONLY_MAX_VOTING_PERIOD"'
   },
   "close_proposal_on_execution_failure":'"$PROPOSAL_SINGLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE"',
   "threshold":{
      "threshold_quorum":{
         "quorum":{
          "percent":"'"$PROPOSAL_SINGLE_QUORUM"'"
         },
         "threshold":{
            "percent":"'"$PROPOSAL_SINGLE_THRESHOLD"'"
         }
      }
   }
}'
PROPOSAL_SINGLE_INIT_MSG_BASE64=$(json_to_base64 "$PROPOSAL_SINGLE_INIT_MSG")

# -------------------- PROPOSE-MULTIPLE { PRE-PROPOSE } --------------------

PROPOSAL_MULTIPLE_INIT_MSG='{
   "allow_revoting":'"$PROPOSAL_MULTIPLE_ALLOW_REVOTING"',
   "pre_propose_info":{
      "module_may_propose":{
         "info":{
            "admin": {
              "core_module": {}
            },
            "code_id":  '"$PRE_PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID"',
            "msg":      "'"$PRE_PROPOSE_INIT_MSG_BASE64"'",
            "label":    "'"$PRE_PROPOSAL_MULTIPLE_LABEL"'"
         }
      }
   },
   "only_members_execute":'"$PROPOSAL_MULTIPLE_ONLY_MEMBERS_EXECUTE"',
   "max_voting_period":{
      "time":'"$PROPOSAL_MULTIPLE_ONLY_MAX_VOTING_PERIOD"'
   },
   "close_proposal_on_execution_failure": '"$PROPOSAL_MULTIPLE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE"',
   "voting_strategy":{
     "single_choice": {
        "quorum": {
          "percent": "'"$PROPOSAL_MULTIPLE_QUORUM"'"
        }
     }
   }
}'
PROPOSAL_MULTIPLE_INIT_MSG_BASE64=$(json_to_base64 "$PROPOSAL_MULTIPLE_INIT_MSG")

# PRE_PROPOSE_OVERRULE_INIT_MSG will be put into the PROPOSAL_OVERRULE_INIT_MSG
PRE_PROPOSE_OVERRULE_INIT_MSG='{}'
PRE_PROPOSE_OVERRULE_INIT_MSG_BASE64=$(json_to_base64 "$PRE_PROPOSE_OVERRULE_INIT_MSG")


# -------------------- PROPOSE-OVERRULE { PRE-PROPOSE-OVERRULE } --------------------

PROPOSAL_OVERRULE_INIT_MSG='{
   "allow_revoting":'"$PROPOSAL_OVERRULE_ALLOW_REVOTING"',
   "pre_propose_info":{
      "module_may_propose":{
         "info":{
            "admin": {
              "core_module": {}
            },
            "code_id":  '"$PRE_PROPOSAL_OVERRULE_CONTRACT_BINARY_ID"',
            "msg":      "'"$PRE_PROPOSE_OVERRULE_INIT_MSG_BASE64"'",
            "label":    "'"$PRE_PROPOSE_OVERRULE_LABEL"'"
         }
      }
   },
   "only_members_execute": '"$PROPOSAL_OVERRULE_ONLY_MEMBERS_EXECUTE"',
   "max_voting_period":{
      "time": '"$PROPOSAL_OVERRULE_ONLY_MAX_VOTING_PERIOD"'
   },
   "close_proposal_on_execution_failure": '"$PROPOSAL_OVERRULE_CLOSE_PROPOSAL_ON_EXECUTION_FAILURE"',
   "threshold":{
       "absolute_percentage":{
          "percentage":{
            "percent": "'"$PROPOSAL_OVERRULE_THRESHOLD"'"
          }
       }
   }
}'
PROPOSAL_OVERRULE_INIT_MSG_BASE64=$(json_to_base64 "$PROPOSAL_OVERRULE_INIT_MSG")

VOTING_REGISTRY_INIT_MSG='{
  "owner": "'"$DAO_CONTRACT_ADDRESS"'",
  "voting_vaults": [
    "'"$NEUTRON_VAULT_CONTRACT_ADDRESS"'",
    "'"$NEUTRON_INVESTORS_VAULT_CONTRACT_ADDRESS"'"
  ]
}'
VOTING_REGISTRY_INIT_MSG_BASE64=$(json_to_base64 "$VOTING_REGISTRY_INIT_MSG")

DAO_INIT='{
  "description": "'"$DAO_DESCRIPTION"'",
  "name": "'"$DAO_NAME"'",
  "proposal_modules_instantiate_info": [
    {
      "admin": {
        "core_module": {}
      },
      "code_id":  '"$PROPOSAL_CONTRACT_BINARY_ID"',
      "label":    "'"$PROPOSAL_SINGLE_LABEL"'",
      "msg":      "'"$PROPOSAL_SINGLE_INIT_MSG_BASE64"'"
    },
    {
      "admin": {
        "core_module": {}
      },
      "code_id":  '"$PROPOSAL_MULTIPLE_CONTRACT_BINARY_ID"',
      "label":    "'"$PROPOSAL_MULTIPLE_LABEL"'",
      "msg":      "'"$PROPOSAL_MULTIPLE_INIT_MSG_BASE64"'"
    },
    {
      "admin": {
        "core_module": {}
      },
      "code_id":  '"$PROPOSAL_CONTRACT_BINARY_ID"',
      "label":    "'"$PROPOSAL_OVERRULE_LABEL"'",
      "msg":      "'"$PROPOSAL_OVERRULE_INIT_MSG_BASE64"'"
    }
  ],
  "voting_registry_module_instantiate_info": {
    "admin": {
      "core_module": {}
    },
    "code_id":  '"$VOTING_REGISTRY_CONTRACT_BINARY_ID"',
    "label":    "'"$VOTING_REGISTRY_LABEL"'",
    "msg":      "'"$VOTING_REGISTRY_INIT_MSG_BASE64"'"
  }
}'

# RESERVE
RESERVE_INIT='{
  "main_dao_address":       "'"$DAO_CONTRACT_ADDRESS"'",
  "security_dao_address":   "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'",
  "denom":                  "'"$STAKEDENOM"'",
  "distribution_rate":      "'"$RESERVE_DISTRIBUTION_RATE"'",
  "min_period":             '"$RESERVE_MIN_PERIOD"',
  "distribution_contract":  "'"$DISTRIBUTION_CONTRACT_ADDRESS"'",
  "treasury_contract":      "'"$DAO_CONTRACT_ADDRESS"'",
  "vesting_denominator":    "'"$RESERVE_VESTING_DENOMINATOR"'"
}'

DISTRIBUTION_INIT='{
  "main_dao_address":     "'"$DAO_CONTRACT_ADDRESS"'",
  "security_dao_address": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'",
  "denom":                "'"$STAKEDENOM"'"
}'

# VAULTS

NEUTRON_VAULT_INIT='{
  "owner": "'"$DAO_CONTRACT_ADDRESS"'",
  "name":         "'"$NEUTRON_VAULT_NAME"'",
  "denom":        "'"$STAKEDENOM"'",
  "description":  "'"$NEUTRON_VAULT_DESCRIPTION"'"
}'

NEUTRON_INVESTORS_VAULT_INIT='{
     "vesting_contract_address": "'"$NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES"'",
     "owner": "'"$DAO_CONTRACT_ADDRESS"'",
     "description": "'"$NEUTRON_INVESTORS_VAULT_DESCRIPTION"'",
     "name": "'"$NEUTRON_INVESTORS_VAULT_NAME"'"
}'

# VESTING
NEUTRON_VESTING_INVESTORS_INIT='{
    "owner": "'"$ADMIN_ADDRESS"'",
    "token_info_manager": "'"$ADMIN_ADDRESS"'"
}'

# CW4 MODULES FOR SUBDAOS

CW4_VOTE_INIT_MSG='{
  "cw4_group_code_id": '"$CW4_GROUP_CONTRACT_BINARY_ID"',
  "initial_members": [
    {
      "addr": "'"$ADMIN_ADDRESS"'",
      "weight": 1
    },
    {
      "addr": "'"$SECOND_MULTISIG_ADDRESS"'",
      "weight": 1
    }
  ]
}'
CW4_VOTE_INIT_MSG_BASE64=$(json_to_base64 "$CW4_VOTE_INIT_MSG")

# SECURITY_SUBDAO

# SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG will be put into the SECURITY_SUBDAO_PROPOSAL_INIT_MSG
SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG='{
   "open_proposal_submission": false
}'
SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64=$(json_to_base64 "$SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG")

SECURITY_SUBDAO_PROPOSAL_INIT_MSG='{
   "allow_revoting": false,
   "pre_propose_info":{
         "module_may_propose":{
            "info":{
               "admin": {
                     "address": {
                       "addr": "'"$DAO_CONTRACT_ADDRESS"'"
                     }
               },
               "code_id": '"$PRE_PROPOSAL_CONTRACT_BINARY_ID"',
               "msg":     "'"$SECURITY_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64"'",
               "label":   "'"$SECURITY_SUBDAO_PRE_PROPOSE_LABEL"'"
            }
         }
      },
   "only_members_execute":false,
   "max_voting_period":{
      "height": 1000000000000
   },
   "close_proposal_on_execution_failure":false,
   "threshold":{
      "absolute_count":{
         "threshold": "1"
      }
   }
}'
SECURITY_SUBDAO_PROPOSAL_INIT_MSG_BASE64=$(json_to_base64 "$SECURITY_SUBDAO_PROPOSAL_INIT_MSG")

SECURITY_SUBDAO_CORE_INIT_MSG='{
  "name":         "'"$SECURITY_SUBDAO_CORE_NAME"'",
  "description":  "'"$SECURITY_SUBDAO_CORE_DESCRIPTION"'",
  "vote_module_instantiate_info": {
    "admin": {
      "address": {
        "addr": "'"$DAO_CONTRACT_ADDRESS"'"
      }
    },
    "code_id":  '"$CW4_VOTING_CONTRACT_BINARY_ID"',
    "label":    "'"$SECURITY_SUBDAO_VOTE_LABEL"'",
    "msg":      "'"$CW4_VOTE_INIT_MSG_BASE64"'"
  },
  "proposal_modules_instantiate_info": [
    {
      "admin": {
        "address": {
          "addr": "'"$DAO_CONTRACT_ADDRESS"'"
        }
      },
      "code_id":  '"$SUBDAO_PROPOSAL_BINARY_ID"',
      "label":    "'"$SECURITY_SUBDAO_PROPOSAL_LABEL"'",
      "msg":      "'"$SECURITY_SUBDAO_PROPOSAL_INIT_MSG_BASE64"'"
    }
  ],
  "main_dao":     "'"$DAO_CONTRACT_ADDRESS"'",
  "security_dao": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'"
}'

# GRANTS_SUBDAO

GRANTS_SUBDAO_TIMELOCK_INIT_MSG='{
  "overrule_pre_propose": "'"$PRE_PROPOSAL_OVERRULE_CONTRACT_ADDRESS"'"
}'
GRANTS_SUBDAO_TIMELOCK_INIT_MSG_BASE64=$(json_to_base64 "$GRANTS_SUBDAO_TIMELOCK_INIT_MSG")

GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG='{
  "open_proposal_submission": false,
  "timelock_module_instantiate_info": {
    "admin": {
      "address": {
        "addr": "'"$DAO_CONTRACT_ADDRESS"'"
      }
    },
    "code_id":  '"$SUBDAO_TIMELOCK_BINARY_ID"',
    "label":    "'"$GRANTS_SUBDAO_TIMELOCK_LABEL"'",
    "msg":      "'"$GRANTS_SUBDAO_TIMELOCK_INIT_MSG_BASE64"'"
  }
}'
GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64=$(json_to_base64 "$GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG")

GRANTS_SUBDAO_PROPOSAL_INIT_MSG='{
   "allow_revoting": false,
   "pre_propose_info":{
      "module_may_propose":{
         "info":{
            "admin": {
              "address": {
                "addr": "'"$DAO_CONTRACT_ADDRESS"'"
              }
            },
            "code_id":  '"$SUBDAO_PRE_PROPOSE_BINARY_ID"',
            "msg":      "'"$GRANTS_SUBDAO_PRE_PROPOSE_INIT_MSG_BASE64"'",
            "label":    "'"$GRANTS_SUBDAO_PRE_PROPOSE_LABEL"'"
         }
      }
   },
   "only_members_execute":false,
   "max_voting_period":{
      "height": 1000000000000
   },
   "close_proposal_on_execution_failure":false,
   "threshold":{
      "absolute_count":{
         "threshold": "2"
      }
   }
}'
GRANTS_SUBDAO_PROPOSAL_INIT_MSG_BASE64=$(json_to_base64 "$GRANTS_SUBDAO_PROPOSAL_INIT_MSG")

GRANTS_SUBDAO_CORE_INIT_MSG='{
  "name":         "'"$GRANTS_SUBDAO_CORE_NAME"'",
  "description":  "'"$GRANTS_SUBDAO_CORE_DESCRIPTION"'",
  "vote_module_instantiate_info": {
    "admin": {
      "address": {
        "addr": "'"$DAO_CONTRACT_ADDRESS"'"
      }
    },
    "code_id":  '"$CW4_VOTING_CONTRACT_BINARY_ID"',
    "label":    "'"$GRANTS_SUBDAO_VOTING_MODULE_LABEL"'",
    "msg":      "'"$CW4_VOTE_INIT_MSG_BASE64"'"
  },
  "proposal_modules_instantiate_info": [
    {
      "admin": {
        "address": {
          "addr": "'"$DAO_CONTRACT_ADDRESS"'"
        }
      },
      "code_id":  '"$SUBDAO_PROPOSAL_BINARY_ID"',
      "label":    "'"$GRANTS_SUBDAO_PROPOSAL_LABEL"'",
      "msg":      "'"$GRANTS_SUBDAO_PROPOSAL_INIT_MSG_BASE64"'"
    }
  ],
  "main_dao":     "'"$DAO_CONTRACT_ADDRESS"'",
  "security_dao": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'"
}'

echo "Instantiate contracts"

function init_contract() {
  BINARY_ID=$1
  INIT_MSG=$2
  LABEL=$3
  check_json "$INIT_MSG"
  $BINARY add-wasm-message instantiate-contract "$BINARY_ID" "$INIT_MSG" --label "$LABEL" \\
    --run-as "$DAO_CONTRACT_ADDRESS" --admin "$DAO_CONTRACT_ADDRESS" --home "$CHAIN_DIR"
}

# WARNING!
# The following code is to add contracts instantiations messages to genesis
# It affects the section of predicting contracts addresses at the beginning of the script
# If you're to do any changes, please do it consistently in both sections
init_contract "$NEUTRON_VAULT_CONTRACT_BINARY_ID"            "$NEUTRON_VAULT_INIT"             "$NEUTRON_VAULT_LABEL"
init_contract "$NEUTRON_INVESTORS_VAULT_CONTRACT_BINARY_ID"  "$NEUTRON_INVESTORS_VAULT_INIT"   "$NEUTRON_INVESTORS_VAULT_LABEL"
init_contract "$NEUTRON_VESTING_INVESTORS_BINARY_ID"         "$NEUTRON_VESTING_INVESTORS_INIT"  "$NEUTRON_VESTING_INVESTORS_LABEL"
init_contract "$DAO_CONTRACT_BINARY_ID"                      "$DAO_INIT"                       "$DAO_CORE_LABEL"
init_contract "$RESERVE_CONTRACT_BINARY_ID"                  "$RESERVE_INIT"                   "$RESERVE_LABEL"
init_contract "$DISTRIBUTION_CONTRACT_BINARY_ID"             "$DISTRIBUTION_INIT"              "$DISTRIBUTION_LABEL"
init_contract "$SUBDAO_CORE_BINARY_ID"                       "$SECURITY_SUBDAO_CORE_INIT_MSG"  "$SECURITY_SUBDAO_CORE_LABEL"
init_contract "$SUBDAO_CORE_BINARY_ID"                       "$GRANTS_SUBDAO_CORE_INIT_MSG"    "$GRANTS_SUBDAO_CORE_LABEL"

ADD_SUBDAOS_MSG='{
  "update_sub_daos": {
    "to_add": [
      {
        "addr": "'"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS"'"
      },
      {
        "addr": "'"$GRANTS_SUBDAO_CORE_CONTRACT_ADDRESS"'"
      }
    ],
    "to_remove": []
  }
}'
check_json "$ADD_SUBDAOS_MSG"

SET_VESTING_TOKEN_MSG='{
    "set_vesting_token": {
      "vesting_token": {
         "native_token": {
           "denom": "'"$STAKEDENOM"'"
         }
      }
    }
}'

REGISTER_VESTING_ACCOUNTS_MSG='{
  "register_vesting_accounts": {
    "vesting_accounts": [
      {
        "address": "'"$ADMIN_ADDRESS"'",
        "schedules": [
          {
            "end_point": {
              "amount": "1000",
              "time": 1814821200
            },
            "start_point": {
              "amount": "0",
              "time": 1720213200
            }
          }
        ]
      }
    ]
  }
}'

$BINARY add-wasm-message execute "$DAO_CONTRACT_ADDRESS" "$ADD_SUBDAOS_MSG" \\
  --run-as "$DAO_CONTRACT_ADDRESS" --home "$CHAIN_DIR"

$BINARY add-wasm-message execute "$NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES" "$SET_VESTING_TOKEN_MSG" \\
  --run-as "$ADMIN_ADDRESS" --home "$CHAIN_DIR"

$BINARY add-wasm-message execute "$NEUTRON_VESTING_INVESTORS_CONTRACT_ADDRRES" "$REGISTER_VESTING_ACCOUNTS_MSG" \\
  --amount 1000untrn --run-as "$ADMIN_ADDRESS" --home "$CHAIN_DIR"

function set_genesis_param() {
  param_name=$1
  param_value=$2
  sed -i -e "s;\\"$param_name\\":.*;\\"$param_name\\": $param_value;g" "$GENESIS_PATH"
}

function set_genesis_param_jq() {
  param_path=$1
  param_value=$2
  jq "\${param_path} = \${param_value}" > tmp_genesis_file.json < "$GENESIS_PATH" && mv tmp_genesis_file.json "$GENESIS_PATH"
}

function convert_bech32_base64_esc() {
  $BINARY keys parse $1 --output json | jq .bytes | xxd -r -p | base64 | sed -e 's/\\//\\\\\\//g'
}
DAO_CONTRACT_ADDRESS_B64=$(convert_bech32_base64_esc "$DAO_CONTRACT_ADDRESS")
echo $DAO_CONTRACT_ADDRESS_B64

set_genesis_param admins                                 "[\\"$DAO_CONTRACT_ADDRESS\\"]"                    # admin module
set_genesis_param treasury_address                       "\\"$DAO_CONTRACT_ADDRESS\\""                      # feeburner
set_genesis_param fee_collector_address                  "\\"$DAO_CONTRACT_ADDRESS\\""                      # tokenfactory
set_genesis_param security_address                       "\\"$SECURITY_SUBDAO_CORE_CONTRACT_ADDRESS\\","    # cron
set_genesis_param limit                                  5                                                # cron
#set_genesis_param allow_messages                        "[\\"*\\"]"                                        # interchainaccounts
set_genesis_param signed_blocks_window                   "\\"$SLASHING_SIGNED_BLOCKS_WINDOW\\","            # slashing
set_genesis_param min_signed_per_window                  "\\"$SLASHING_MIN_SIGNED\\","                      # slashing
set_genesis_param slash_fraction_double_sign             "\\"$SLASHING_FRACTION_DOUBLE_SIGN\\","            # slashing
set_genesis_param slash_fraction_downtime                "\\"$SLASHING_FRACTION_DOWNTIME\\""                # slashing
set_genesis_param minimum_gas_prices                     "$MIN_GAS_PRICES,"                               # globalfee
set_genesis_param max_total_bypass_min_fee_msg_gas_usage "\\"$MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE\\""    # globalfee
set_genesis_param_jq ".app_state.globalfee.params.bypass_min_fee_msg_types" "$BYPASS_MIN_FEE_MSG_TYPES"   # globalfee
set_genesis_param proposer_fee                          "\\"0.25\\""                                        # builder(POB)
set_genesis_param escrow_account_address                "\\"$DAO_CONTRACT_ADDRESS_B64\\","                  # builder(POB)
set_genesis_param sudo_call_gas_limit                   "\\"1000000\\""                                     # contractmanager
set_genesis_param max_gas                               "\\"1000000000\\""                                  # consensus_params

if ! jq -e . "$GENESIS_PATH" >/dev/null 2>&1; then
    echo "genesis appears to become incorrect json" >&2
    exit 1
fi

echo "DAO $DAO_CONTRACT_ADDRESS"
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "updateConfig.sh": "#!/bin/bash

STAKEDENOM=\${DENOM:-untrn}
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

P2PPORT=\${P2PPORT:-26656}
RPCPORT=\${RPCPORT:-26657}
RESTPORT=\${RESTPORT:-1317}
ROSETTA=\${ROSETTA:-8080}

set -eux

ls $CHAIN_DIR

sed -i -e 's/timeout_commit = "5s"/timeout_commit = "1s"/g' "$CHAIN_DIR/config/config.toml"
sed -i -e 's/timeout_propose = "3s"/timeout_propose = "1s"/g' "$CHAIN_DIR/config/config.toml"
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' "$CHAIN_DIR/config/config.toml"
sed -i -e 's/enable = false/enable = true/g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's/swagger = false/swagger = true/g' "$CHAIN_DIR/config/app.toml"
sed -i -e "s/minimum-gas-prices = \\"\\"/minimum-gas-prices = \\"0$STAKEDENOM\\"/g" "$CHAIN_DIR/config/app.toml"
sed -i -e 's/enabled = false/enabled = true/g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's/prometheus-retention-time = 0/prometheus-retention-time = 1000/g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' "$CHAIN_DIR/config/app.toml"

sed -i -e 's#"tcp://0.0.0.0:26656"#"tcp://0.0.0.0:'"$P2PPORT"'"#g' "$CHAIN_DIR/config/config.toml"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:'"$RPCPORT"'"#g' "$CHAIN_DIR/config/config.toml"
sed -i -e 's#"tcp://localhost:1317"#"tcp://0.0.0.0:'"$RESTPORT"'"#g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's#"tcp://0.0.0.0:1317"#"tcp://0.0.0.0:'"$RESTPORT"'"#g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's#":8080"#":'"$ROSETTA"'"#g' "$CHAIN_DIR/config/app.toml"
sed -i -e 's#localhost#0.0.0.0#g' "$CHAIN_DIR/config/app.toml"

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml
",
      "updateGenesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-neutron-1",
        "app.kubernetes.io/part-of": "neutron-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "neutron-1",
        "starship.io/chain-name": "neutron",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-neutron-1",
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "neutron-1,cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "neutron,cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/neutron-1",
                  "name": "registry-neutron-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: neutron-1. Waiting for it to start..."
  echo "Checking: http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-neutron-1",
              },
              "name": "registry-neutron-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/neutron-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "neutron",
  "assets": [
    {
      "description": "The native token of Neutron chain.",
      "denom_units": [
        {
          "denom": "untrn",
          "exponent": 0
        },
        {
          "denom": "ntrn",
          "exponent": 6
        }
      ],
      "base": "untrn",
      "name": "Neutron",
      "display": "ntrn",
      "symbol": "NTRN",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/neutron/images/ntrn.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/neutron/images/ntrn.svg"
      },
      "coingecko_id": "neutron"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "neutron",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "neutron-1",
  "pretty_name": "Neutron Devnet",
  "bech32_prefix": "neutron",
  "daemon_name": "neutrond",
  "node_home": "/root/.neutrond",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "untrn",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "untrn"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/neutron-org/neutron",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-neutron-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-neutron-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-neutron-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "neutron-1"
type = "CosmosSdk"
key_name = "neutron-1-cli"
ccv_consumer_chain = true
rpc_addr = "http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://neutron-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "neutron"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "untrn" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "neutron-1"
type = "CosmosSdk"
key_name = "neutron-1"
ccv_consumer_chain = true
rpc_addr = "http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://neutron-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "neutron"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "untrn" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-neutron-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-neutron-cosmos",
    },
  },
  "relayer/hermes-neutron-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-neutron-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-neutron-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-neutron-cosmos",
      },
    },
  },
  "relayer/hermes-neutron-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-neutron-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-neutron-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-neutron-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-neutron-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-neutron-cosmos",
            "app.kubernetes.io/rawname": "neutron-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: neutron-1. Waiting for it to start..."
  echo "Checking: http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for neutron-1..."
hermes keys add \\
  --chain neutron-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name neutron-1 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="untrn"
RLY_ADDR=$(hermes --json keys list --chain neutron-1 | tail -1 | jq -r '.result."neutron-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for neutron-1-cli..."
hermes keys add \\
  --chain neutron-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name neutron-1-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain neutron-1 | tail -1 | jq -r '.result."neutron-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

hermes create channel \\
  --a-connection connection-0 \\
  --channel-version 1 \\
  --order ordered \\
  --a-chain neutron-1 \\
  --a-port consumer \\
  --b-port provider

hermes create channel \\
  --a-connection connection-0 \\
  --a-chain neutron-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-neutron-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
  "relayer/neutron-query-relayer-nqr-neutron-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config.json": "{
  "relayer": {
    "neutron_chain": {
      "chain_id": "neutron-1",
      "rpc_addr": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
      "grpc_addr": "http://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:9090",
      "websocket_addr": "ws://neutron-1-genesis.$(NAMESPACE).svc.cluster.local:26657/websocket",
      "account_prefix": "neutron",
      "keyring_backend": "test",
      "gas_prices": "0.025untrn",
      "gas_adjustment": 1.5,
      "connection_id": "connection-0",
      "debug": false,
      "timeout": "10s",
      "tx_memo": "neutron-query-relayer"
    },
    "target_chain": {
      "chain_id": "cosmoshub-4",
      "rpc_addr": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
      "grpc_addr": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9090",
      "websocket_addr": "ws://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657/websocket",
      "account_prefix": "cosmos",
      "keyring_backend": "test",
      "gas_prices": "0.025uatom",
      "gas_adjustment": 1.5,
      "connection_id": "connection-0",
      "debug": false,
      "timeout": "10s",
      "tx_memo": "neutron-query-relayer"
    },
    "queries_file": "/configs/queries.json",
    "check_submitted_tx": true,
    "storage_path": "./storage",
    "log_level": "info"
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-query-relayer-nqr-neutron-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "neutron-query-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "neutron-query-relayer-nqr-neutron-cosmos",
    },
  },
  "relayer/neutron-query-relayer-nqr-neutron-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-query-relayer-nqr-neutron-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "neutron-query-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "neutron-query-relayer-nqr-neutron-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "metrics",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "neutron-query-relayer-nqr-neutron-cosmos",
      },
    },
  },
  "relayer/neutron-query-relayer-nqr-neutron-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "neutron-query-relayer-nqr-neutron-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "neutron-query-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "neutron-query-relayer-nqr-neutron-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "neutron-query-relayer-nqr-neutron-cosmos",
          "app.kubernetes.io/type": "neutron-query-relayer",
        },
      },
      "serviceName": "neutron-query-relayer-nqr-neutron-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "neutron-query-relayer-nqr-neutron-cosmos",
            "app.kubernetes.io/rawname": "nqr-neutron-cosmos",
            "app.kubernetes.io/type": "neutron-query-relayer",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
neutron-query-relayer start --config /configs/config.json",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "CONFIG_PATH",
                  "value": "/configs/config.json",
                },
                {
                  "name": "STORAGE_PATH",
                  "value": "./storage",
                },
                {
                  "name": "LOG_LEVEL",
                  "value": "info",
                },
                {
                  "name": "METRICS_PORT",
                  "value": "9090",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron-query-relayer:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: neutron-1. Waiting for it to start..."
  echo "Checking: http://neutron-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $STORAGE_PATH

NEUTRON_MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
TARGET_MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)


echo "Setting up keys for neutron-1..."
# Keys will be managed through environment variables for neutron-query-relayer

DENOM="untrn"
# For neutron-query-relayer, we need to derive the address from mnemonic
# This will be handled by the relayer binary itself

echo "Chain neutron-1 setup completed"

echo "Setting up keys for cosmoshub-4..."
# Keys will be managed through environment variables for neutron-query-relayer

DENOM="uatom"
# For neutron-query-relayer, we need to derive the address from mnemonic
# This will be handled by the relayer binary itself

echo "Chain cosmoshub-4 setup completed"
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "CONFIG_PATH",
                  "value": "/configs/config.json",
                },
                {
                  "name": "STORAGE_PATH",
                  "value": "./storage",
                },
                {
                  "name": "LOG_LEVEL",
                  "value": "info",
                },
                {
                  "name": "METRICS_PORT",
                  "value": "9090",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/neutron-query-relayer:v0.2.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "neutron-query-relayer-nqr-neutron-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: neutron-relayer should have proper file organization for neutron-relayer: neutron-relayer-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "neutron": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "ics-proposal-configmap.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "neutron-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-neutron-cosmos-configmap.yaml",
    "hermes-neutron-cosmos-service.yaml",
    "hermes-neutron-cosmos-statefulset.yaml",
    "neutron-query-relayer-nqr-neutron-cosmos-configmap.yaml",
    "neutron-query-relayer-nqr-neutron-cosmos-service.yaml",
    "neutron-query-relayer-nqr-neutron-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: neutron-relayer should have proper file organization for neutron-relayer: neutron-relayer-resource-counts 1`] = `
{
  "ConfigMap": 9,
  "Deployment": 1,
  "Service": 5,
  "StatefulSet": 4,
}
`;

exports[`BuilderManager Config Files Tests Config: noble should generate valid YAML manifests for noble: noble-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "gaiad",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "noble/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "noble-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "noble-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "noble-1",
        "starship.io/chain-name": "noble",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "noble-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "noble-1-genesis",
      },
    },
  },
  "noble/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "noble-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "noble-1-genesis",
        "app.kubernetes.io/part-of": "noble-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "noble-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "noble",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "noble-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "noble-1-genesis",
        },
      },
      "serviceName": "noble-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "noble-1-genesis",
            "app.kubernetes.io/rawname": "noble-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "noble-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uusdc",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uusdc,100000000000000ustake",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "nobled",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.noble",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/noble-assets/noble",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.noble",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "nobled",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "noble-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/noble:v7.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.noble",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "noble-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.noble/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.noble/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.noble/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.noble/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.noble/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.noble",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "nobled",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "noble-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uusdc,100000000000000ustake",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/noble:v7.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uusdc",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uusdc,100000000000000ustake",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "nobled",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.noble",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/noble-assets/noble",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.noble",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "nobled",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "noble-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/noble:v7.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.noble",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uusdc",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uusdc,100000000000000ustake",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "nobled",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.noble",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/noble-assets/noble",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.noble",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "nobled",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "noble-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/noble:v7.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.noble",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-noble-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "noble/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "createGenesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uusdc}"
COINS="\${COINS:=100000000000000uusdc,100000000000000ustake}"
CHAIN_ID="\${CHAIN_ID:=noblelocal}"
CHAIN_BIN="\${CHAIN_BIN:=nobled}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.nobled}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# FiatTokenFactory roles
FIATTF_OWNER_KEY="fiattf_owner"
FIATTF_OWNER_MNEMONIC="gesture inject test cycle original hollow east ridge hen combine junk child bacon zero hope comfort vacuum milk pitch cage oppose unhappy lunar seat"

FIATTF_MASTER_MINTER_KEY="fiattf_master_minter"
FIATTF_MASTER_MINTER_MNEMONIC="maximum display century economy unlock van census kite error heart snow filter midnight usage egg venture cash kick motor survey drastic edge muffin visual"

FIATTF_MINTER_CONTROLLER_KEY="fiattf_minter_controller"
FIATTF_MINTER_CONTROLLER_MNEMONIC="keep liar demand upon shed essence tip undo eagle run people strong sense another salute double peasant egg royal hair report winner student diamond"

FIATTF_MINTER_CONTROLLER2_KEY="fiattf_minter_controller2"
FIATTF_MINTER_CONTROLLER2_MNEMONIC="morning person bachelor illegal inner note learn problem cement river half sentence junk evidence mercy intact step nasty cotton elite real unveil business drum"

FIATTF_MINTER_KEY="fiattf_minter"
FIATTF_MINTER_MNEMONIC="shed spike wish soda inside awake satoshi fish length whisper garlic sketch diary trumpet tree nose stove tobacco vague target announce brave alley priority"

FIATTF_BLACKLISTER_KEY="fiattf_blacklister"
FIATTF_BLACKLISTER_MNEMONIC="planet reunion diet obscure curious swim suit kitchen fiscal creek jeans doll disorder color gown sweet have search repair exhaust clap assault dwarf design"

FIATTF_PAUSER_KEY="fiattf_pauser"
FIATTF_PAUSER_MNEMONIC="guilt juice tone exhibit vault stairs mesh often expect face search quality paddle broccoli hundred another elder range horror beef session found loop mobile"

# TokenFactory roles
TF_OWNER_KEY="tf_owner"
TF_OWNER_MNEMONIC="poverty pride inject trumpet candy quiz mixed junk cricket food include involve uphold gasp wish gas save occur genius shoe slight occur sudden cute"

TF_MASTER_MINTER_KEY="tf_master_minter"
TF_MASTER_MINTER_MNEMONIC="belt cream catalog absurd hen toast ethics summer addict kick hood february spatial inmate cycle business double keep gravity private nose obvious phrase birth"

TF_MINTER_CONTROLLER_KEY="tf_minter_controller"
TF_MINTER_CONTROLLER_MNEMONIC="spider silk peasant tobacco cactus range draft merry fashion trick modify scale width omit admit face off property enact upper drink obvious off used"

TF_MINTER_CONTROLLER2_KEY="tf_minter_controller2"
TF_MINTER_CONTROLLER2_MNEMONIC="swear blossom hybrid write crash seven then ship brush market moral renew plug oval focus stairs brisk inner blue main barely broken burden fancy"

TF_MINTER_KEY="tf_minter"
TF_MINTER_MNEMONIC="muffin clog joy echo hello size reform mention patient pumpkin enough inside danger talk wire home doctor bone ensure bind arrest dizzy magnet arrest"

TF_BLACKLISTER_KEY="tf_blacklister"
TF_BLACKLISTER_MNEMONIC="gravity domain nothing stomach cousin print rally door bone ghost tuition opera witness paper color oak mistake toward current coach industry thought acid breeze"

TF_PAUSER_KEY="tf_pauser"
TF_PAUSER_MNEMONIC="sniff tail rotate pelican snap spawn champion thought recycle body caution grain brass armed hawk goat champion sunset soul answer panel present open room"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add FiatTokenFactory role keys
echo "Adding FiatTokenFactory role keys..."
echo "$FIATTF_OWNER_MNEMONIC" | $CHAIN_BIN keys add $FIATTF_OWNER_KEY --recover --keyring-backend="test"
echo "$FIATTF_MASTER_MINTER_MNEMONIC" | $CHAIN_BIN keys add $FIATTF_MASTER_MINTER_KEY --recover --keyring-backend="test"
echo "$FIATTF_MINTER_CONTROLLER_MNEMONIC" | $CHAIN_BIN keys add $FIATTF_MINTER_CONTROLLER_KEY --recover --keyring-backend="test"
echo "$FIATTF_MINTER_CONTROLLER2_MNEMONIC" | $CHAIN_BIN keys add $FIATTF_MINTER_CONTROLLER2_KEY --recover --keyring-backend="test"
echo "$FIATTF_MINTER_MNEMONIC" | $CHAIN_BIN keys add $FIATTF_MINTER_KEY --recover --keyring-backend="test"
echo "$FIATTF_BLACKLISTER_MNEMONIC" | $CHAIN_BIN keys add $FIATTF_BLACKLISTER_KEY --recover --keyring-backend="test"
echo "$FIATTF_PAUSER_MNEMONIC" | $CHAIN_BIN keys add $FIATTF_PAUSER_KEY --recover --keyring-backend="test"

# Add TokenFactory role keys
echo "Adding TokenFactory role keys..."
echo "$TF_OWNER_MNEMONIC" | $CHAIN_BIN keys add $TF_OWNER_KEY --recover --keyring-backend="test"
echo "$TF_MASTER_MINTER_MNEMONIC" | $CHAIN_BIN keys add $TF_MASTER_MINTER_KEY --recover --keyring-backend="test"
echo "$TF_MINTER_CONTROLLER_MNEMONIC" | $CHAIN_BIN keys add $TF_MINTER_CONTROLLER_KEY --recover --keyring-backend="test"
echo "$TF_MINTER_CONTROLLER2_MNEMONIC" | $CHAIN_BIN keys add $TF_MINTER_CONTROLLER2_KEY --recover --keyring-backend="test"
echo "$TF_MINTER_MNEMONIC" | $CHAIN_BIN keys add $TF_MINTER_KEY --recover --keyring-backend="test"
echo "$TF_BLACKLISTER_MNEMONIC" | $CHAIN_BIN keys add $TF_BLACKLISTER_KEY --recover --keyring-backend="test"
echo "$TF_PAUSER_MNEMONIC" | $CHAIN_BIN keys add $TF_PAUSER_KEY --recover --keyring-backend="test"

# Add genesis accounts for FiatTokenFactory roles
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $FIATTF_OWNER_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $FIATTF_MASTER_MINTER_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $FIATTF_MINTER_CONTROLLER_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $FIATTF_MINTER_CONTROLLER2_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $FIATTF_MINTER_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $FIATTF_BLACKLISTER_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $FIATTF_PAUSER_KEY --keyring-backend="test") $COINS --keyring-backend="test"

# Add genesis accounts for TokenFactory roles
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $TF_OWNER_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $TF_MASTER_MINTER_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $TF_MINTER_CONTROLLER_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $TF_MINTER_CONTROLLER2_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $TF_MINTER_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $TF_BLACKLISTER_KEY --keyring-backend="test") $COINS --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $TF_PAUSER_KEY --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "updateGenesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uusdc}"
CHAIN_BIN="\${CHAIN_BIN:=nobled}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.nobled}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"

# Get genesis account to use as primary owner
GENESIS_ADDR=$(jq -r '.app_state.auth.accounts[0].address' $CHAIN_DIR/config/genesis.json)
if [ -z "$GENESIS_ADDR" ]; then
    echo "ERROR: No genesis account found"
    exit 1
fi

# Get FiatTokenFactory role addresses
FIATTF_OWNER_ADDR=$($CHAIN_BIN keys show -a fiattf_owner --keyring-backend="test")
FIATTF_MASTER_MINTER_ADDR=$($CHAIN_BIN keys show -a fiattf_master_minter --keyring-backend="test")
FIATTF_MINTER_CONTROLLER_ADDR=$($CHAIN_BIN keys show -a fiattf_minter_controller --keyring-backend="test")
FIATTF_MINTER_CONTROLLER2_ADDR=$($CHAIN_BIN keys show -a fiattf_minter_controller2 --keyring-backend="test")
FIATTF_MINTER_ADDR=$($CHAIN_BIN keys show -a fiattf_minter --keyring-backend="test")
FIATTF_BLACKLISTER_ADDR=$($CHAIN_BIN keys show -a fiattf_blacklister --keyring-backend="test")
FIATTF_PAUSER_ADDR=$($CHAIN_BIN keys show -a fiattf_pauser --keyring-backend="test")

# Get TokenFactory role addresses
TF_OWNER_ADDR=$($CHAIN_BIN keys show -a tf_owner --keyring-backend="test")
TF_MASTER_MINTER_ADDR=$($CHAIN_BIN keys show -a tf_master_minter --keyring-backend="test")
TF_MINTER_CONTROLLER_ADDR=$($CHAIN_BIN keys show -a tf_minter_controller --keyring-backend="test")
TF_MINTER_CONTROLLER2_ADDR=$($CHAIN_BIN keys show -a tf_minter_controller2 --keyring-backend="test")
TF_MINTER_ADDR=$($CHAIN_BIN keys show -a tf_minter --keyring-backend="test")
TF_BLACKLISTER_ADDR=$($CHAIN_BIN keys show -a tf_blacklister --keyring-backend="test")
TF_PAUSER_ADDR=$($CHAIN_BIN keys show -a tf_pauser --keyring-backend="test")

echo "Configure fiat-tokenfactory module..."
jq --arg owner "$FIATTF_OWNER_ADDR" \\
   --arg master_minter "$FIATTF_MASTER_MINTER_ADDR" \\
   --arg minter_controller "$FIATTF_MINTER_CONTROLLER_ADDR" \\
   --arg minter_controller2 "$FIATTF_MINTER_CONTROLLER2_ADDR" \\
   --arg minter "$FIATTF_MINTER_ADDR" \\
   --arg blacklister "$FIATTF_BLACKLISTER_ADDR" \\
   --arg pauser "$FIATTF_PAUSER_ADDR" \\
   --arg denom "$DENOM" \\
   '.app_state."fiat-tokenfactory" = {
    "mintingDenom": {
        "denom": $denom
    },
    "paused": {
        "paused": false
    },
    "blacklistedList": [],
    "blacklister": {
        "address": $blacklister
    },
    "masterMinter": {
        "address": $master_minter
    },
    "minterControllerList": [
        {
            "minter": $minter,
            "controller": $minter_controller
        },
        {
            "minter": $minter,
            "controller": $minter_controller2
        }
    ],
    "mintersList": [
        {
            "address": $minter,
            "allowance": {
                "denom": $denom,
                "amount": "100000000000000"
            }
        }
    ],
    "owner": {
        "address": $owner
    },
    "pauser": {
        "address": $pauser
    },
    "params": {}
}' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json && mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Configure tokenfactory module..."
jq --arg owner "$TF_OWNER_ADDR" \\
   --arg master_minter "$TF_MASTER_MINTER_ADDR" \\
   --arg minter_controller "$TF_MINTER_CONTROLLER_ADDR" \\
   --arg minter_controller2 "$TF_MINTER_CONTROLLER2_ADDR" \\
   --arg minter "$TF_MINTER_ADDR" \\
   --arg blacklister "$TF_BLACKLISTER_ADDR" \\
   --arg pauser "$TF_PAUSER_ADDR" \\
   '.app_state.tokenfactory = {
    "mintingDenom": {
        "denom": "ufrienzies"
    },
    "paused": {
        "paused": false
    },
    "blacklistedList": [],
    "blacklister": {
        "address": $blacklister
    },
    "masterMinter": {
        "address": $master_minter
    },
    "minterControllerList": [
        {
            "minter": $minter,
            "controller": $minter_controller
        },
        {
            "minter": $minter,
            "controller": $minter_controller2
        }
    ],
    "mintersList": [
        {
            "address": $minter,
            "allowance": {
                "denom": "ufrienzies",
                "amount": "100000000000000"
            }
        }
    ],
    "owner": {
        "address": $owner
    },
    "pauser": {
        "address": $pauser
    },
    "params": {}
}' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json && mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# Add denomination metadata
echo "Add denomination metadata..."
USDC_METADATA='{
  "base": "uusdc",
  "display": "usdc",
  "name": "usdc",
  "symbol": "USDC",
  "denom_units": [
    {
      "denom": "uusdc",
      "aliases": ["microusdc"],
      "exponent": "0"
    },
    {
      "denom": "usdc",
      "exponent": "6"
    }
  ]
}'

FRNZ_METADATA='{
  "base": "ufrienzies",
  "display": "ufrienzies",
  "name": "frienzies",
  "symbol": "FRNZ",
  "denom_units": [
    {
      "denom": "ufrienzies",
      "aliases": ["microfrienzies"],
      "exponent": "0"
    },
    {
      "denom": "mfrienzies",
      "aliases": ["millifrienzies"],
      "exponent": "3"
    },
    {
      "denom": "frienzies",
      "exponent": "6"
    }
  ]
}'

jq --argjson usdc "$USDC_METADATA" --argjson frnz "$FRNZ_METADATA" \\
  '.app_state.bank.denom_metadata += [$usdc, $frnz]' \\
  $CHAIN_DIR/config/genesis.json > /tmp/genesis.json && mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# Configure parameter authority
echo "Configure parameter authority..."
jq --arg addr "$GENESIS_ADDR" '
  .app_state.params.params.authority = $addr |
  .app_state.upgrade.params.authority = $addr
' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json && mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# Configure CCTP module
echo "Configure CCTP module..."
jq --arg addr "$GENESIS_ADDR" '.app_state.cctp = {
    "owner": $addr,
    "attester_manager": $addr,
    "pauser": $addr,
    "token_controller": $addr,
    "attester_list": [],
    "per_message_burn_limit_list": [
        {
            "amount": "99999999",
            "denom": "uusdc"
        }
    ],
    "burning_and_minting_paused": {
        "paused": false
    },
    "sending_and_receiving_messages_paused": {
        "paused": false
    },
    "max_message_body_size": {
        "amount": "8000"
    },
    "next_available_nonce": {
        "nonce": "0"
    },
    "signature_threshold": {
        "amount": "2"
    },
    "token_pair_list": [],
    "used_nonces_list": [],
    "token_messenger_list": []
}' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json && mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# Configure tariff module
echo "Configure tariff module..."
jq --arg addr "$GENESIS_ADDR" '.app_state.tariff.params = {
    "share": "0.8",
    "distribution_entities": [
        {
            "address": $addr,
            "share": "1.0"
        }
    ],
    "transfer_fee_bps": "0",
    "transfer_fee_max": "0",
    "transfer_fee_denom": "uusdc"
}' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json && mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-noble-1",
        "app.kubernetes.io/part-of": "noble-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "noble-1",
        "starship.io/chain-name": "noble",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-noble-1",
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "noble-1,cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "noble,cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://noble-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://noble-1-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://noble-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/noble-1",
                  "name": "registry-noble-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://noble-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: noble-1. Waiting for it to start..."
  echo "Checking: http://noble-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-noble-1",
              },
              "name": "registry-noble-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/noble-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "noble",
  "assets": [
    {
      "base": "uusdc",
      "description": "USD Coin",
      "name": "USDC",
      "display": "usdc",
      "symbol": "USDC",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/noble/images/noble.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/noble/images/noble.svg"
      },
      "denom_units": [
        {
          "denom": "uusdc",
          "exponent": 0
        },
        {
          "denom": "usdc",
          "exponent": 6
        }
      ],
      "coingecko_id": "usdc",
      "keywords": [
        "usdc"
      ]
    },
    {
      "base": "ustake",
      "description": "Permissioned stake token for noble",
      "name": "Stake",
      "display": "stake",
      "symbol": "STAKE",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/noble/images/stake.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/noble/images/stake.svg"
      },
      "denom_units": [
        {
          "denom": "ustake",
          "exponent": 0
        },
        {
          "denom": "stake",
          "exponent": 6
        }
      ],
      "coingecko_id": "stake",
      "keywords": [
        "stake"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "noble",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "noble-1",
  "pretty_name": "Noble Devnet",
  "bech32_prefix": "noble",
  "daemon_name": "nobled",
  "node_home": "/root/.noble",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uusdc",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uusdc"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/noble-assets/noble",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-noble-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-noble-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-noble-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "noble-1"
type = "CosmosSdk"
key_name = "noble-1-cli"

rpc_addr = "http://noble-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://noble-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://noble-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "noble"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uusdc" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "noble-1"
type = "CosmosSdk"
key_name = "noble-1"

rpc_addr = "http://noble-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://noble-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://noble-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "noble"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uusdc" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-noble-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-noble-cosmos",
    },
  },
  "relayer/hermes-noble-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-noble-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-noble-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-noble-cosmos",
      },
    },
  },
  "relayer/hermes-noble-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-noble-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-noble-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-noble-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-noble-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-noble-cosmos",
            "app.kubernetes.io/rawname": "noble-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://noble-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: noble-1. Waiting for it to start..."
  echo "Checking: http://noble-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for noble-1..."
hermes keys add \\
  --chain noble-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name noble-1 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uusdc"
RLY_ADDR=$(hermes --json keys list --chain noble-1 | tail -1 | jq -r '.result."noble-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://noble-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for noble-1-cli..."
hermes keys add \\
  --chain noble-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name noble-1-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain noble-1 | tail -1 | jq -r '.result."noble-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://noble-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain noble-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-noble-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: noble should have proper file organization for noble: noble-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "noble": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "noble-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-noble-cosmos-configmap.yaml",
    "hermes-noble-cosmos-service.yaml",
    "hermes-noble-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: noble should have proper file organization for noble: noble-resource-counts 1`] = `
{
  "ConfigMap": 7,
  "Deployment": 1,
  "Service": 4,
  "StatefulSet": 3,
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain should generate valid YAML manifests for one-chain: one-chain-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "osmosis/genesis-patch-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "genesis.json": "{
  "app_state": {
    "staking": {
      "params": {
        "unbonding_time": "5s"
      }
    },
    "gamm": {
      "params": {
        "pool_creation_fee": [
          {
            "amount": "500000",
            "denom": "uosmo"
          }
        ]
      }
    }
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis-patch",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "patch-osmosis-1",
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
        {
          "name": "metrics",
          "port": 26660,
          "protocol": "TCP",
          "targetPort": 26660,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "2",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "osmosisd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

echo "Adding balance to osmo1e9ucjn5fjmetky5wezzcsccp7hqcwzrrhthpf5"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account osmo1e9ucjn5fjmetky5wezzcsccp7hqcwzrrhthpf5 2000000000000uosmo --keyring-backend="test"

echo "Adding balance to osmo10eykchznjdn8jdlwaj5v9wvlmdsp6kxx7u0hv9"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account osmo10eykchznjdn8jdlwaj5v9wvlmdsp6kxx7u0hv9 2000000000000uosmo --keyring-backend="test"",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

jq -s '.[0] * .[1]' $CHAIN_DIR/config/genesis.json /patch/genesis.json > $CHAIN_DIR/config/genesis.json.tmp && mv $CHAIN_DIR/config/genesis.json.tmp $CHAIN_DIR/config/genesis.json

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
                {
                  "mountPath": "/patch",
                  "name": "patch",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "configMap": {
                "name": "patch-osmosis-1",
              },
              "name": "patch",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
          ],
        },
      },
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain should have proper file organization for one-chain: one-chain-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "osmosis": [
    "genesis-patch-configmap.yaml",
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "deployment.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain should have proper file organization for one-chain: one-chain-resource-counts 1`] = `
{
  "ConfigMap": 5,
  "Deployment": 1,
  "Service": 2,
  "StatefulSet": 1,
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain-cometmock should generate valid YAML manifests for one-chain-cometmock: one-chain-cometmock-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/cometmock-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-cometmock",
        "app.kubernetes.io/role": "cometmock",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-cometmock",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rpc",
          "port": 22331,
          "protocol": "TCP",
          "targetPort": 22331,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-cometmock",
      },
    },
  },
  "cosmoshub/cometmock-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-cometmock",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "cometmock",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-cometmock",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "cosmoshub",
          "app.kubernetes.io/name": "cosmoshub-4-cometmock",
        },
      },
      "serviceName": "cosmoshub-4-cometmock",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "cosmoshub",
            "app.kubernetes.io/name": "cosmoshub-4-cometmock",
            "app.kubernetes.io/rawname": "cosmoshub-4-cometmock",
            "app.kubernetes.io/type": "cometmock",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "NODE_LISTEN_ADDR_STR="tcp://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26658"
NODE_HOME_STR="/chain/genesis"
    
/chain/cometmock --block-time=800 $NODE_LISTEN_ADDR_STR /chain/genesis/config/genesis.json tcp://0.0.0.0:22331 $NODE_HOME_STR grpc",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "comet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 22331,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "300M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "300M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chain",
                  "name": "node",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys"
  sleep 10;
done
    
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-wait",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "mkdir -p /chain/genesis/config
mkdir -p /chain/genesis/data
curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o /chain/genesis/config/genesis.json
echo "Genesis file that we got....."
cat /chain/genesis/config/genesis.json

## fetch priv_validator and priv_validator_state of all validators
curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /chain/genesis/config/priv_validator_key.json
echo '{"height":"0","round":0,"step":0}' > /chain/genesis/data/priv_validator_state.json
    
echo "copy cometmock binary to shared dir"
cp /usr/local/bin/cometmock /chain/cometmock",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
              ],
              "image": "ghcr.io/informalsystems/cometmock:v0.37.x",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-comet",
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "300M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "300M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chain",
                  "name": "node",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""
START_ARGS="--grpc-web.enable=false --transport=grpc --with-tendermint=false --address tcp://0.0.0.0:26658"

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "300M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "300M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "300M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "300M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.3",
                  "memory": "300M",
                },
                "requests": {
                  "cpu": "0.3",
                  "memory": "300M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain-cometmock should have proper file organization for one-chain-cometmock: one-chain-cometmock-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "cometmock-service.yaml",
    "cometmock-statefulset.yaml",
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain-cometmock should have proper file organization for one-chain-cometmock: one-chain-cometmock-resource-counts 1`] = `
{
  "ConfigMap": 3,
  "Service": 2,
  "StatefulSet": 2,
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain-cosmjs-faucet should generate valid YAML manifests for one-chain-cosmjs-faucet: one-chain-cosmjs-faucet-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "export FAUCET_TOKENS=$(printf '%s\\n' \${COINS//[[:digit:]]/})
for coin in \${COINS//,/ }
do
    var="FAUCET_CREDIT_AMOUNT_$(printf '%s\\n' \${coin//[[:digit:]]/} | tr '[:lower:]' '[:upper:]')"
    amt="\${coin//[!0-9]/}"

    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    export $var="$creditAmt"
done

export FAUCET_PATH_PATTERN="\${HD_PATH:0:$((\${#HD_PATH}-1))}a"
export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

echo "FAUCET_MNEMONIC: $FAUCET_MNEMONIC"
echo "FAUCET_PATH_PATTERN: $FAUCET_PATH_PATTERN"

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10;
done

/app/packages/faucet/bin/cosmos-faucet-dist start "http://localhost:26657"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "2",
                },
                {
                  "name": "FAUCET_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_MEMO",
                  "value": "faucet txn",
                },
                {
                  "name": "FAUCET_GAS_PRICE",
                  "value": "1.25uosmo",
                },
                {
                  "name": "FAUCET_GAS_LIMIT",
                  "value": "2000000",
                },
                {
                  "name": "FAUCET_ADDRESS_PREFIX",
                  "value": "osmo",
                },
                {
                  "name": "FAUCET_REFILL_FACTOR",
                  "value": "8",
                },
                {
                  "name": "FAUCET_REFILL_THRESHOLD",
                  "value": "20",
                },
                {
                  "name": "FAUCET_COOLDOWN_TIME",
                  "value": "0",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "HD_PATH",
                  "value": "m/44'/118'/0'/0/0",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
          ],
        },
      },
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain-cosmjs-faucet should have proper file organization for one-chain-cosmjs-faucet: one-chain-cosmjs-faucet-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "deployment.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain-cosmjs-faucet should have proper file organization for one-chain-cosmjs-faucet: one-chain-cosmjs-faucet-resource-counts 1`] = `
{
  "ConfigMap": 4,
  "Deployment": 1,
  "Service": 2,
  "StatefulSet": 1,
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain-custom-scripts should generate valid YAML manifests for one-chain-custom-scripts: one-chain-custom-scripts-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "2",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "osmosisd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "createGenesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eu

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"


# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add relayer key and delegate tokens
echo "Adding key...." $(jq -r ".relayers[0].name" $KEYS_CONFIG)
jq -r ".relayers[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".relayers[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .relayers[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

echo "Creating gentx..."
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) 5000000000$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "createValidator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"

set -eu

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --gas="auto" \\
    --gas-adjustment 1.5 --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator \\
    --pubkey=$($CHAIN_BIN tendermint show-validator) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --min-self-delegation="1000000" \\
    --fees 100000$DENOM \\
    --gas="auto" \\
    --gas-adjustment 1.5 --yes > /validator.log

  cat /validator.log | jq
}

# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transferTokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"

set -eu

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "updateConfig.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eu

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/timeout_commit = "5s"/timeout_commit = "1s"/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/timeout_propose = "3s"/timeout_propose = "1s"/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml


echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's#enabled-unsafe-cors = false#enabled-unsafe-cors = true#g' $CHAIN_DIR/config/app.toml
sed -i -e 's#swagger = false#swagger = true#g' $CHAIN_DIR/config/app.toml

function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Enable defines if the API server should be enabled." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s/enable = false/enable = true/g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Enable defines if the gRPC server should be enabled." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s/enable = false/enable = true/g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  line_number=$(get_next_line_number "other sinks such as Prometheus." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/enabled = false/enabled = true/g" $CHAIN_DIR/config/app.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml
fi

$CHAIN_BIN tendermint show-node-id
",
      "updateGenesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
WASM_PERMISSIONLESS="\${WASM_PERMISSIONLESS:=true}"

set -eu

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

jq -r '.app_state.staking.params.unbonding_time |= "15s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "6s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# Set wasm as permissioned or permissionless based on environment variable
wasm_permission="Nobody"
if [ $WASM_PERMISSIONLESS == "true" ]
then
  wasm_permission="Everybody"
fi

jq -r ".app_state.wasm.params.code_upload_access.permission |= \\"\${wasm_permission}\\"" $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r ".app_state.wasm.params.instantiate_default_permission |= \\"\${wasm_permission}\\"" $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
          ],
        },
      },
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain-custom-scripts should have proper file organization for one-chain-custom-scripts: one-chain-custom-scripts-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "deployment.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: one-chain-custom-scripts should have proper file organization for one-chain-custom-scripts: one-chain-custom-scripts-resource-counts 1`] = `
{
  "ConfigMap": 4,
  "Deployment": 1,
  "Service": 2,
  "StatefulSet": 1,
}
`;

exports[`BuilderManager Config Files Tests Config: one-cosmoshub-cosmjs-faucet should generate valid YAML manifests for one-cosmoshub-cosmjs-faucet: one-cosmoshub-cosmjs-faucet-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "export FAUCET_TOKENS=$(printf '%s\\n' \${COINS//[[:digit:]]/})
for coin in \${COINS//,/ }
do
    var="FAUCET_CREDIT_AMOUNT_$(printf '%s\\n' \${coin//[[:digit:]]/} | tr '[:lower:]' '[:upper:]')"
    amt="\${coin//[!0-9]/}"

    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    export $var="$creditAmt"
done

export FAUCET_PATH_PATTERN="\${HD_PATH:0:$((\${#HD_PATH}-1))}a"
export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

echo "FAUCET_MNEMONIC: $FAUCET_MNEMONIC"
echo "FAUCET_PATH_PATTERN: $FAUCET_PATH_PATTERN"

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10;
done

/app/packages/faucet/bin/cosmos-faucet-dist start "http://localhost:26657"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "2",
                },
                {
                  "name": "FAUCET_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_MEMO",
                  "value": "faucet txn",
                },
                {
                  "name": "FAUCET_GAS_PRICE",
                  "value": "1.25uatom",
                },
                {
                  "name": "FAUCET_GAS_LIMIT",
                  "value": "2000000",
                },
                {
                  "name": "FAUCET_ADDRESS_PREFIX",
                  "value": "cosmos",
                },
                {
                  "name": "FAUCET_REFILL_FACTOR",
                  "value": "8",
                },
                {
                  "name": "FAUCET_REFILL_THRESHOLD",
                  "value": "20",
                },
                {
                  "name": "FAUCET_COOLDOWN_TIME",
                  "value": "0",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "HD_PATH",
                  "value": "m/44'/118'/0'/0/0",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: one-cosmoshub-cosmjs-faucet should have proper file organization for one-cosmoshub-cosmjs-faucet: one-cosmoshub-cosmjs-faucet-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "service.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: one-cosmoshub-cosmjs-faucet should have proper file organization for one-cosmoshub-cosmjs-faucet: one-cosmoshub-cosmjs-faucet-resource-counts 1`] = `
{
  "ConfigMap": 4,
  "Deployment": 1,
  "Service": 2,
  "StatefulSet": 1,
}
`;

exports[`BuilderManager Config Files Tests Config: one-custom-chain should generate valid YAML manifests for one-custom-chain: one-custom-chain-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "custom/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "custom-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "custom-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "custom-1",
        "starship.io/chain-name": "custom",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "custom-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "custom-1-genesis",
      },
    },
  },
  "custom/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "custom-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "custom-1-genesis",
        "app.kubernetes.io/part-of": "custom-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "custom-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "custom",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "custom-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "custom-1-genesis",
        },
      },
      "serviceName": "custom-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "custom-1-genesis",
            "app.kubernetes.io/rawname": "custom-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "custom-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "custom-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "anmol1696/osmosis:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "custom-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "osmosisd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "custom-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
              ],
              "image": "anmol1696/osmosis:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "custom-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "anmol1696/osmosis:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "custom-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "anmol1696/osmosis:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-custom-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "custom/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-custom-1",
        "app.kubernetes.io/part-of": "custom-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "custom-1",
        "starship.io/chain-name": "custom",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-custom-1",
    },
  },
  "registry/custom-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "custom-1",
  "assets": [
    {
      "description": "The denom for token uosmo",
      "base": "uosmo",
      "name": "uosmo",
      "display": "uosmo",
      "symbol": "UOSMO",
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "uosmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "custom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "custom-1",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "custom-1",
  "pretty_name": "undefined Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-custom-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-custom-1",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "custom-1",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "custom",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://custom-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://custom-1-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://custom-1-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/custom-1",
                  "name": "registry-custom-1",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://custom-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: custom-1. Waiting for it to start..."
  echo "Checking: http://custom-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-custom-1",
              },
              "name": "registry-custom-1",
            },
          ],
        },
      },
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: one-custom-chain should have proper file organization for one-custom-chain: one-custom-chain-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "custom": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "custom-1-configmap.yaml",
    "deployment.yaml",
    "service.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: one-custom-chain should have proper file organization for one-custom-chain: one-custom-chain-resource-counts 1`] = `
{
  "ConfigMap": 4,
  "Deployment": 1,
  "Service": 2,
  "StatefulSet": 1,
}
`;

exports[`BuilderManager Config Files Tests Config: simapp should generate valid YAML manifests for simapp: simapp-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "simapp",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "simapp",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://simapp-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://localhost:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://simapp-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/simapp",
                  "name": "registry-simapp",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://simapp-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: simapp. Waiting for it to start..."
  echo "Checking: http://simapp-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "Always",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-simapp",
              },
              "name": "registry-simapp",
            },
          ],
        },
      },
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "registry/simapp-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "simapp",
  "assets": [
    {
      "description": "The denom for token stake",
      "base": "stake",
      "name": "stake",
      "display": "stake",
      "symbol": "STAKE",
      "denom_units": [
        {
          "denom": "stake",
          "exponent": 0
        },
        {
          "denom": "stake",
          "exponent": 6
        }
      ],
      "coingecko_id": "simapp"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "simapp",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "simapp",
  "pretty_name": "Sim App Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "simd",
  "node_home": "/root/.simapp",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "stake",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "stake"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/cosmos-sdk/tree/main/simapp",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-simapp",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-simapp",
    },
  },
  "simapp/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "simapp-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "simapp-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "simapp",
        "starship.io/chain-name": "simapp",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "simapp-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "simapp-genesis",
      },
    },
  },
  "simapp/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "simapp",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "simapp-genesis",
        "app.kubernetes.io/part-of": "simapp",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "simapp-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "simapp",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "simapp-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "simapp-genesis",
        },
      },
      "serviceName": "simapp-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "simapp-genesis",
            "app.kubernetes.io/rawname": "simapp",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "simapp",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "stake",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000stake",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.simapp",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/cosmos-sdk/tree/main/simapp",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.simapp",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "simapp",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/simapp:v0.47.3",
              "imagePullPolicy": "Always",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.simapp",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "simapp-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.simapp/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.simapp/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.simapp/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.simapp/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.simapp/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "Always",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.simapp",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "2",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "simd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "simapp",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000stake",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/simapp:v0.47.3",
              "imagePullPolicy": "Always",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "stake",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000stake",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.simapp",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/cosmos-sdk/tree/main/simapp",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.simapp",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "simapp",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/simapp:v0.47.3",
              "imagePullPolicy": "Always",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.simapp",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "stake",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000stake",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.simapp",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/cosmos-sdk/tree/main/simapp",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.simapp",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "simapp",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/simapp:v0.47.3",
              "imagePullPolicy": "Always",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.simapp",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-simapp",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "simapp/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-simapp",
        "app.kubernetes.io/part-of": "simapp",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "simapp",
        "starship.io/chain-name": "simapp",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-simapp",
    },
  },
  "simapp/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "simapp-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "simapp-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "simapp",
        "starship.io/chain-name": "simapp",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "simapp-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "simapp-validator",
      },
    },
  },
  "simapp/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "simapp",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "simapp-validator",
        "app.kubernetes.io/part-of": "simapp",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "simapp-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "simapp",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "simapp-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "simapp-validator",
        },
      },
      "serviceName": "simapp-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "simapp-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "simapp",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "stake",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000stake",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.simapp",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/cosmos-sdk/tree/main/simapp",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.simapp",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "simapp",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "simapp-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/simapp:v0.47.3",
              "imagePullPolicy": "Always",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.simapp",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "stake",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000stake",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.simapp",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/cosmos-sdk/tree/main/simapp",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.simapp",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "simapp",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "simapp-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.simapp/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.simapp/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.simapp/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.simapp/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "Always",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.simapp",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://simapp-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: simapp. Waiting for it to start..."
  echo "Checking: http://simapp-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "Always",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "stake",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000stake",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.simapp",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/cosmos-sdk/tree/main/simapp",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.simapp",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "simapp",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "simapp-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/simapp:v0.47.3",
              "imagePullPolicy": "Always",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.simapp",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "stake",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000stake",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.simapp",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/cosmos-sdk/tree/main/simapp",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.simapp",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "simd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "simapp",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "simapp-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/simapp:v0.47.3",
              "imagePullPolicy": "Always",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.simapp",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-simapp",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: simapp should have proper file organization for simapp: simapp-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "registry": [
    "deployment.yaml",
    "service.yaml",
    "simapp-configmap.yaml",
  ],
  "simapp": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: simapp should have proper file organization for simapp: simapp-resource-counts 1`] = `
{
  "ConfigMap": 4,
  "Deployment": 1,
  "Service": 3,
  "StatefulSet": 2,
}
`;

exports[`BuilderManager Config Files Tests Config: three-chain should generate valid YAML manifests for three-chain: three-chain-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "juno/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "juno-2-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "juno-2-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "juno-2",
        "starship.io/chain-name": "juno",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "juno-2-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "juno-2-genesis",
      },
    },
  },
  "juno/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "juno-2",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "juno-2-genesis",
        "app.kubernetes.io/part-of": "juno-2",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "juno-2-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "juno",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "juno-2-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "juno-2-genesis",
        },
      },
      "serviceName": "juno-2-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "juno-2-genesis",
            "app.kubernetes.io/rawname": "juno-2",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "juno-2",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "ujuno",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000ujuno",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.juno",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/CosmosContracts/juno",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.juno",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "juno-2",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/juno:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.juno",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "juno-2-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.juno/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.juno/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.juno/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.juno/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.juno/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.juno",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "ujuno",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000ujuno",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.juno",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/CosmosContracts/juno",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.juno",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "juno-2",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/juno:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.juno",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "ujuno",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000ujuno",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.juno",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/CosmosContracts/juno",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.juno",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "junod",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "juno-2",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/juno:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.juno",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-juno-2",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "juno/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-juno-2",
        "app.kubernetes.io/part-of": "juno-2",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "juno-2",
        "starship.io/chain-name": "juno",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-juno-2",
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1,cosmoshub-4,juno-2",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis,cosmoshub,juno",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657,http://juno-2-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657,http://localhost:26658",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091,http://juno-2-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317,http://localhost:1318",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081,http://juno-2-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
                {
                  "mountPath": "/chains/juno-2",
                  "name": "registry-juno-2",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://juno-2-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: juno-2. Waiting for it to start..."
  echo "Checking: http://juno-2-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
            {
              "configMap": {
                "name": "registry-juno-2",
              },
              "name": "registry-juno-2",
            },
          ],
        },
      },
    },
  },
  "registry/juno-2-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "juno",
  "assets": [
    {
      "base": "ujuno",
      "description": "The native token of JUNO Chain",
      "name": "Juno",
      "display": "juno",
      "symbol": "JUNO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/juno.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/juno/images/juno.svg"
      },
      "denom_units": [
        {
          "denom": "ujuno",
          "exponent": 0
        },
        {
          "denom": "juno",
          "exponent": 6
        }
      ],
      "coingecko_id": "juno-network"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "juno",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "juno-2",
  "pretty_name": "Juno Devnet",
  "bech32_prefix": "juno",
  "daemon_name": "junod",
  "node_home": "/root/.juno",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "ujuno",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "ujuno"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/CosmosContracts/juno",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-juno-2",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-juno-2",
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-relayer-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1-cli"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }

[[chains]]
id = "juno-2"
type = "CosmosSdk"
key_name = "juno-2-cli"

rpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "juno"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "ujuno" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }

[[chains]]
id = "juno-2"
type = "CosmosSdk"
key_name = "juno-2"

rpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://juno-2-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://juno-2-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "juno"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "ujuno" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-relayer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-relayer",
    },
  },
  "relayer/hermes-relayer-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-relayer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-relayer",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-relayer",
      },
    },
  },
  "relayer/hermes-relayer-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-relayer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-relayer",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-relayer",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-relayer",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-relayer",
            "app.kubernetes.io/rawname": "relayer",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://juno-2-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: juno-2. Waiting for it to start..."
  echo "Checking: http://juno-2-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for osmosis-1..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name osmosis-1 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uosmo"
RLY_ADDR=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for osmosis-1-cli..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name osmosis-1-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for juno-2..."
hermes keys add \\
  --chain juno-2 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name juno-2 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="ujuno"
RLY_ADDR=$(hermes --json keys list --chain juno-2 | tail -1 | jq -r '.result."juno-2".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://juno-2-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for juno-2-cli..."
hermes keys add \\
  --chain juno-2 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name juno-2-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain juno-2 | tail -1 | jq -r '.result."juno-2-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://juno-2-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain osmosis-1 \\
  --a-port transfer \\
  --b-port transfer

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain juno-2 \\
  --a-chain osmosis-1 \\
  --a-port transfer \\
  --b-port transfer

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain juno-2 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-relayer",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: three-chain should have proper file organization for three-chain: three-chain-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "juno": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "juno-2-configmap.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-relayer-configmap.yaml",
    "hermes-relayer-service.yaml",
    "hermes-relayer-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: three-chain should have proper file organization for three-chain: three-chain-resource-counts 1`] = `
{
  "ConfigMap": 9,
  "Deployment": 1,
  "Service": 5,
  "StatefulSet": 4,
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain should generate valid YAML manifests for two-chain: two-chain-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "cosmoshub/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-validator",
      },
    },
  },
  "cosmoshub/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-validator",
        },
      },
      "serviceName": "cosmoshub-4-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "explorer/configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "cosmoshub-4.json": "{"chain_name":"cosmoshub-4","coingecko":"cosmoshub","api":"http://localhost:1317","rpc":["http://localhost:26657"],"snapshot_provider":"","sdk_version":"0.45.6","coin_type":118,"min_tx_fee":"3000","addr_prefix":"cosmos","logo":"","assets":[{"base":"uatom","symbol":"COSMOS","exponent":"6","coingecko_id":"cosmoshub-4","logo":""}]}",
      "osmosis-1.json": "{"chain_name":"osmosis-1","coingecko":"osmosis","api":"http://localhost:1313","rpc":["http://localhost:26653"],"snapshot_provider":"","sdk_version":"0.45.6","coin_type":118,"min_tx_fee":"3000","addr_prefix":"osmo","logo":"","assets":[{"base":"uosmo","symbol":"OSMO","exponent":"6","coingecko_id":"osmosis-1","logo":""}]}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "explorer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "explorer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "explorer",
    },
  },
  "explorer/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "explorer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "explorer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "explorer",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "explorer",
          "app.kubernetes.io/name": "explorer",
        },
      },
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "explorer",
            "app.kubernetes.io/name": "explorer",
            "app.kubernetes.io/rawname": "explorer",
            "app.kubernetes.io/type": "ping-pub",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "CHAINS_CONFIG_PATH",
                  "value": "/explorer",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/ping-pub:6b7b0d096946b6bcd75d15350c7345da0d4576db",
              "imagePullPolicy": "IfNotPresent",
              "name": "explorer",
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": 1,
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": 1,
                  "memory": "1Gi",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/explorer",
                  "name": "explorer-config",
                },
              ],
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "explorer",
              },
              "name": "explorer-config",
            },
          ],
        },
      },
    },
  },
  "explorer/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "explorer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "explorer",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "explorer",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "protocol": "TCP",
          "targetPort": 8080,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "explorer",
      },
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "osmosisd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "osmosis/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-validator",
      },
    },
  },
  "osmosis/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-validator",
        },
      },
      "serviceName": "osmosis-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  },
  "explorers": [
    {
      "kind": "ping-pub",
      "url": "http://localhost:8080"
    }
  ]
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1,cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis,cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  },
  "explorers": [
    {
      "kind": "ping-pub",
      "url": "http://localhost:8080"
    }
  ]
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-osmos-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = false
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1-cli"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = false
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
  },
  "relayer/hermes-osmos-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
      },
    },
  },
  "relayer/hermes-osmos-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-osmos-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-osmos-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-osmos-cosmos",
            "app.kubernetes.io/rawname": "osmos-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/hermes:1.12.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/hermes:1.12.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for osmosis-1..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name osmosis-1 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uosmo"
RLY_ADDR=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for osmosis-1-cli..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name osmosis-1-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain osmosis-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/hermes:1.12.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-osmos-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain should have proper file organization for two-chain: two-chain-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "explorer": [
    "configmap.yaml",
    "deployment.yaml",
    "service.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-osmos-cosmos-configmap.yaml",
    "hermes-osmos-cosmos-service.yaml",
    "hermes-osmos-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain should have proper file organization for two-chain: two-chain-resource-counts 1`] = `
{
  "ConfigMap": 8,
  "Deployment": 2,
  "Service": 7,
  "StatefulSet": 5,
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-cometmock should generate valid YAML manifests for two-chain-cometmock: two-chain-cometmock-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/cometmock-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-cometmock",
        "app.kubernetes.io/role": "cometmock",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-cometmock",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rpc",
          "port": 22331,
          "protocol": "TCP",
          "targetPort": 22331,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-cometmock",
      },
    },
  },
  "cosmoshub/cometmock-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-cometmock",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "cometmock",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-cometmock",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "cosmoshub",
          "app.kubernetes.io/name": "cosmoshub-4-cometmock",
        },
      },
      "serviceName": "cosmoshub-4-cometmock",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "cosmoshub",
            "app.kubernetes.io/name": "cosmoshub-4-cometmock",
            "app.kubernetes.io/rawname": "cosmoshub-4-cometmock",
            "app.kubernetes.io/type": "cometmock",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "NODE_LISTEN_ADDR_STR="tcp://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26658"
NODE_HOME_STR="/chain/genesis"
    
/chain/cometmock --block-time=800 $NODE_LISTEN_ADDR_STR /chain/genesis/config/genesis.json tcp://0.0.0.0:22331 $NODE_HOME_STR grpc",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "comet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 22331,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chain",
                  "name": "node",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys"
  sleep 10;
done
    
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-wait",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "mkdir -p /chain/genesis/config
mkdir -p /chain/genesis/data
curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o /chain/genesis/config/genesis.json
echo "Genesis file that we got....."
cat /chain/genesis/config/genesis.json

## fetch priv_validator and priv_validator_state of all validators
curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /chain/genesis/config/priv_validator_key.json
echo '{"height":"0","round":0,"step":0}' > /chain/genesis/data/priv_validator_state.json
    
echo "copy cometmock binary to shared dir"
cp /usr/local/bin/cometmock /chain/cometmock",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
              ],
              "image": "ghcr.io/informalsystems/cometmock:v0.37.x",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-comet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chain",
                  "name": "node",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""
START_ARGS="--grpc-web.enable=false --transport=grpc --with-tendermint=false --address tcp://0.0.0.0:26658"

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "osmosis/cometmock-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-cometmock",
        "app.kubernetes.io/role": "cometmock",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-cometmock",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rpc",
          "port": 22331,
          "protocol": "TCP",
          "targetPort": 22331,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-cometmock",
      },
    },
  },
  "osmosis/cometmock-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-cometmock",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "cometmock",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-cometmock",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "osmosis",
          "app.kubernetes.io/name": "osmosis-1-cometmock",
        },
      },
      "serviceName": "osmosis-1-cometmock",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "osmosis",
            "app.kubernetes.io/name": "osmosis-1-cometmock",
            "app.kubernetes.io/rawname": "osmosis-1-cometmock",
            "app.kubernetes.io/type": "cometmock",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "NODE_LISTEN_ADDR_STR="tcp://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26658"
NODE_HOME_STR="/chain/genesis"
    
for i in $(seq 0 0); do
  NODE_LISTEN_ADDR_STR="tcp://osmosis-1-validator-$i.osmosis-1-validator.$NAMESPACE.svc.cluster.local:26658,$NODE_LISTEN_ADDR_STR"
  NODE_HOME_STR="/chain/validator-$i,$NODE_HOME_STR"
done
      
/chain/cometmock --block-time=800 $NODE_LISTEN_ADDR_STR /chain/genesis/config/genesis.json tcp://0.0.0.0:22331 $NODE_HOME_STR grpc",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "set -eux

sleep 10

for i in $(seq 0 0); do
  $CHAIN_BIN keys list --keyring-backend test --home /chain/validator-$i --output json | jq
  VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
  echo "Create validator.... $VAL_KEY_NAME"
  VAL_NAME=$VAL_KEY_NAME \\
    NODE_URL="http://0.0.0.0:22331" \\
    NODE_ARGS="--home /chain/validator-$i" \\
    GAS="1000000" \\
    bash -e /scripts/create-validator.sh
done",
                    ],
                  },
                },
              },
              "name": "comet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 22331,
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chain",
                  "name": "node",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "for i in $(seq 0 0); do
  mkdir -p /chain/validator-$i/config /chain/validator-$i/data
  VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
  echo "Adding validator key.... $VAL_KEY_NAME"
  jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test" --home /chain/validator-$i
done",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chain",
                  "name": "node",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys"
  sleep 10;
done
    
for i in $(seq 0 0); do
  while [ $(curl -sw '%{http_code}' http://osmosis-1-validator-$i.osmosis-1-validator.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /dev/null) -ne 200 ]; do
    echo "Validator does not seem to be ready for: osmosis-1 validator-$i. Waiting for it to start..."
    echo "Checking: http://osmosis-1-validator-$i.osmosis-1-validator.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys"
    sleep 10;
  done
done
      
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-wait",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "mkdir -p /chain/genesis/config
mkdir -p /chain/genesis/data
curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o /chain/genesis/config/genesis.json
echo "Genesis file that we got....."
cat /chain/genesis/config/genesis.json

## fetch priv_validator and priv_validator_state of all validators
curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /chain/genesis/config/priv_validator_key.json
echo '{"height":"0","round":0,"step":0}' > /chain/genesis/data/priv_validator_state.json
    
for i in $(seq 0 0); do
  mkdir -p /chain/validator-$i/config
  mkdir -p /chain/validator-$i/data
  curl http://osmosis-1-validator-$i.osmosis-1-validator.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_key -o /chain/validator-$i/config/node_key.json
  curl http://osmosis-1-validator-$i.osmosis-1-validator.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /chain/validator-$i/config/priv_validator_key.json
  echo '{"height":"0","round":0,"step":0}' > /chain/validator-$i/data/priv_validator_state.json
done
      
echo "copy cometmock binary to shared dir"
cp /usr/local/bin/cometmock /chain/cometmock",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
              ],
              "image": "ghcr.io/informalsystems/cometmock:v0.37.x",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-comet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chain",
                  "name": "node",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""
START_ARGS="--grpc-web.enable=false --transport=grpc --with-tendermint=false --address tcp://0.0.0.0:26658"

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "osmosis/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-validator",
      },
    },
  },
  "osmosis/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-validator",
        },
      },
      "serviceName": "osmosis-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""
START_ARGS="--grpc-web.enable=false --transport=grpc --with-tendermint=false --address tcp://0.0.0.0:26658"

# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-cometmock should have proper file organization for two-chain-cometmock: two-chain-cometmock-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "cometmock-service.yaml",
    "cometmock-statefulset.yaml",
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
  "osmosis": [
    "cometmock-service.yaml",
    "cometmock-statefulset.yaml",
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-cometmock should have proper file organization for two-chain-cometmock: two-chain-cometmock-resource-counts 1`] = `
{
  "ConfigMap": 4,
  "Service": 5,
  "StatefulSet": 5,
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-cosmos should generate valid YAML manifests for two-chain-cosmos: two-chain-cosmos-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "gaiad",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "cosmoshub/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-validator",
      },
    },
  },
  "cosmoshub/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-validator",
        },
      },
      "serviceName": "cosmoshub-4-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "osmosisd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "osmosis/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-validator",
      },
    },
  },
  "osmosis/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-validator",
        },
      },
      "serviceName": "osmosis-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1,cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis,cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-osmos-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "error"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = false
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1-cli"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "error"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = false
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'pull', interval = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
  },
  "relayer/hermes-osmos-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
      },
    },
  },
  "relayer/hermes-osmos-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-osmos-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-osmos-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-osmos-cosmos",
            "app.kubernetes.io/rawname": "osmos-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for osmosis-1..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name osmosis-1 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uosmo"
RLY_ADDR=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for osmosis-1-cli..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name osmosis-1-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain osmosis-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-osmos-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-cosmos should have proper file organization for two-chain-cosmos: two-chain-cosmos-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-osmos-cosmos-configmap.yaml",
    "hermes-osmos-cosmos-service.yaml",
    "hermes-osmos-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-cosmos should have proper file organization for two-chain-cosmos: two-chain-cosmos-resource-counts 1`] = `
{
  "ConfigMap": 7,
  "Deployment": 1,
  "Service": 6,
  "StatefulSet": 5,
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-gorelayer should generate valid YAML manifests for two-chain-gorelayer: two-chain-gorelayer-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "gaiad",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "cosmoshub/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-validator",
      },
    },
  },
  "cosmoshub/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-validator",
        },
      },
      "serviceName": "cosmoshub-4-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v18.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "5",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "osmosisd",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "osmosis/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-validator",
      },
    },
  },
  "osmosis/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-validator",
        },
      },
      "serviceName": "osmosis-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "false",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1,cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis,cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/go-relayer-osmos-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "cosmoshub-4.json": "{
  "type": "cosmos",
  "value": {
    "key": "cosmoshub-4",
    "chain-id": "cosmoshub-4",
    "rpc-addr": "http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
    "account-prefix": "cosmos",
    "keyring-backend": "test",
    "gas-adjustment": 1.2,
    "gas-prices": "0.01uatom",
    "min-gas-amount": 0,
    "debug": false,
    "timeout": "20s",
    "block-timeout": "",
    "output-format": "json",
    "sign-mode": "direct",
    "extra-codecs": []
  }
}",
      "osmosis-1.json": "{
  "type": "cosmos",
  "value": {
    "key": "osmosis-1",
    "chain-id": "osmosis-1",
    "rpc-addr": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
    "account-prefix": "osmo",
    "keyring-backend": "test",
    "gas-adjustment": 1.2,
    "gas-prices": "0.01uosmo",
    "min-gas-amount": 0,
    "debug": false,
    "timeout": "20s",
    "block-timeout": "",
    "output-format": "json",
    "sign-mode": "direct",
    "extra-codecs": []
  }
}",
      "path.json": "{
  "paths": {
    "path0": {
      "src": {
        "chain-id": "osmosis-1",
        "client-id": "",
        "connection-id": "",
        "channel-id": "",
        "port-id": "transfer"
      },
      "dst": {
        "chain-id": "cosmoshub-4",
        "client-id": "",
        "connection-id": "",
        "channel-id": "",
        "port-id": "transfer"
      },
      "src-channel-filter": {
        "rule": null,
        "channel-list": []
      }
    }
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "go-relayer-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "go-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "go-relayer-osmos-cosmos",
    },
  },
  "relayer/go-relayer-osmos-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "go-relayer-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "go-relayer",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "go-relayer-osmos-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "go-relayer-osmos-cosmos",
          "app.kubernetes.io/type": "go-relayer",
        },
      },
      "serviceName": "go-relayer-osmos-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "go-relayer-osmos-cosmos",
            "app.kubernetes.io/rawname": "osmos-cosmos",
            "app.kubernetes.io/type": "go-relayer",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
rly start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.relayer",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/go-relayer:v2.4.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR/config
cp /configs/path.json $RELAYER_DIR/config/

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)


echo "Setting up chain osmosis-1..."
cp /configs/osmosis-1.json $RELAYER_DIR/config/
rly chains add --file /configs/osmosis-1.json osmosis-1

echo "Creating key for osmosis-1..."
echo "$MNEMONIC" | rly keys restore osmosis-1 osmosis-1 --restore-key-type secp256k1 --coin-type 118

DENOM="uosmo"
RLY_ADDR=$(rly keys show osmosis-1 osmosis-1)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Setting up chain cosmoshub-4..."
cp /configs/cosmoshub-4.json $RELAYER_DIR/config/
rly chains add --file /configs/cosmoshub-4.json cosmoshub-4

echo "Creating key for cosmoshub-4..."
echo "$MNEMONIC" | rly keys restore cosmoshub-4 cosmoshub-4 --restore-key-type secp256k1 --coin-type 118

DENOM="uatom"
RLY_ADDR=$(rly keys show cosmoshub-4 cosmoshub-4)

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "true" || true

echo "Adding paths..."
rly paths add --file /configs/path.json


echo "Creating client, connection and channel for path0..."
rly tx link path0 --src-port transfer --dst-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.relayer",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/go-relayer:v2.4.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "go-relayer-osmos-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-gorelayer should have proper file organization for two-chain-gorelayer: two-chain-gorelayer-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "go-relayer-osmos-cosmos-configmap.yaml",
    "go-relayer-osmos-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-gorelayer should have proper file organization for two-chain-gorelayer: two-chain-gorelayer-resource-counts 1`] = `
{
  "ConfigMap": 7,
  "Deployment": 1,
  "Service": 5,
  "StatefulSet": 5,
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-monitoring should generate valid YAML manifests for two-chain-monitoring: two-chain-monitoring-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts",
    },
  },
  "cosmoshub/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
        {
          "name": "metrics",
          "port": 26660,
          "protocol": "TCP",
          "targetPort": 26660,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
      },
    },
  },
  "cosmoshub/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-genesis",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-genesis",
        },
      },
      "serviceName": "cosmoshub-4-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-genesis",
            "app.kubernetes.io/rawname": "cosmoshub-4",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.gaia/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "cosmoshub/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-cosmoshub-4",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-cosmoshub-4",
    },
  },
  "cosmoshub/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "cosmoshub-4",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
        {
          "name": "metrics",
          "port": 26660,
          "protocol": "TCP",
          "targetPort": 26660,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "cosmoshub-4-validator",
      },
    },
  },
  "cosmoshub/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "cosmoshub-4",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "cosmoshub-4-validator",
        "app.kubernetes.io/part-of": "cosmoshub-4",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "cosmoshub-4-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "cosmoshub",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "cosmoshub-4-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "cosmoshub-4-validator",
        },
      },
      "serviceName": "cosmoshub-4-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "cosmoshub-4-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "cosmoshub-4",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.gaia/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.gaia/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.gaia/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.gaia/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uatom",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uatom",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.gaia",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/cosmos/gaia",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.gaia",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "gaiad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "cosmoshub-4",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "cosmoshub-4-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/gaia:v10.0.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.gaia",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-cosmoshub-4",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "monitoring/grafana-dashboard-providers-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "default.yaml": "{
  "apiVersion": 1,
  "providers": [
    {
      "name": "chain-dashboard",
      "orgId": 1,
      "type": "file",
      "allowUiUpdates": true,
      "options": {
        "path": "/var/lib/grafana/dashboards"
      }
    }
  ]
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "grafana-dashboard-providers",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "grafana-dashboard-providers",
    },
  },
  "monitoring/grafana-dashboards-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "chains.json": "{
  "__inputs": [],
  "__elements": {},
  "__requires": [
    {
      "type": "panel",
      "id": "bargauge",
      "name": "Bar gauge",
      "version": ""
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "10.0.0"
    },
    {
      "type": "panel",
      "id": "graph",
      "name": "Graph (old)",
      "version": ""
    },
    {
      "type": "datasource",
      "id": "prometheus",
      "name": "Prometheus",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 3
      },
      "id": 37,
      "panels": [],
      "title": "Tendermint Metrics",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.lineWidth",
                "value": 1
              },
              {
                "id": "custom.fillOpacity",
                "value": 10
              },
              {
                "id": "max"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 4
      },
      "id": 2,
      "links": [],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_missing_validators\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "instant": false,
          "interval": "",
          "legendFormat": "missing validators",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "avg by (network) ({__name__=~\\"^(tendermint|cometbft)_consensus_validators\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "interval": "",
          "legendFormat": "total validators",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "avg by (network) ({__name__=~\\"^(tendermint|cometbft)_consensus_missing_validators$\\",network=\\"$network\\",instance=\\"$instance\\"}) / avg by (network) ({__name__=~\\"^(tendermint|cometbft)_consensus_validators$\\",network=\\"$network\\",instance=\\"$instance\\"}) * 100",
          "hide": false,
          "interval": "",
          "legendFormat": "missing %",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Number of Validators",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "D"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 4
      },
      "id": 12,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "max by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_validators_power\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "hide": false,
          "legendFormat": "Total",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "max by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_validator_power\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "hide": true,
          "interval": "1s",
          "legendFormat": "Validator",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "max by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_missing_validators_power\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "hide": false,
          "legendFormat": "Missing",
          "range": true,
          "refId": "C"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "max by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_missing_validators_power$\\",network=\\"$network\\",instance=\\"$instance\\"}) / max by (network,instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_validators_power$\\",network=\\"$network\\",instance=\\"$instance\\"}) * 100",
          "hide": false,
          "legendFormat": "Missing %",
          "range": true,
          "refId": "D"
        }
      ],
      "title": "Voting power",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "blue",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 10
      },
      "id": 8,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "8.3.6",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "max by (instance) ({__name__=~\\"^(tendermint|cometbft)_consensus_latest_block_height\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "format": "time_series",
          "instant": false,
          "interval": "1s",
          "legendFormat": "{{instance}}",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "max by (network) ({__name__=~\\"^(tendermint|cometbft)_consensus_validator_last_signed_height\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "hide": false,
          "legendFormat": "Validator last signed",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Consensus Height",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "green",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 10
      },
      "id": 14,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "{__name__=~\\"^(tendermint|cometbft)_p2p_peers\\",network=\\"$network\\",instance=\\"$instance\\"}",
          "interval": "1s",
          "legendFormat": "peers {{instance}}",
          "queryType": "randomWalk",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "P2P connections",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "s"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "D"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 16
      },
      "id": 18,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "avg by (network) (rate({__name__=~\\"^(tendermint|cometbft)_state_block_processing_time_sum\\",network=\\"$network\\",instance=\\"$instance\\"}[1m]))",
          "hide": true,
          "interval": "",
          "legendFormat": "block processing time (1m)",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "avg by (network) (1/rate({__name__=~\\"^(tendermint|cometbft)_consensus_height\\",network=\\"$network\\",instance=\\"$instance\\"}[1m]))",
          "hide": false,
          "legendFormat": "1m",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "avg by (network) (1/rate({__name__=~\\"^(tendermint|cometbft)_consensus_height\\",network=\\"$network\\",instance=\\"$instance\\"}[1h]))",
          "hide": false,
          "legendFormat": "1h",
          "range": true,
          "refId": "C"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "avg by (network) (1/rate({__name__=~\\"^(tendermint|cometbft)_consensus_height\\",network=\\"$network\\",instance=\\"$instance\\"}[1d]))",
          "hide": false,
          "legendFormat": "1d",
          "range": true,
          "refId": "D"
        }
      ],
      "title": "Block Time",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "line"
            }
          },
          "links": [],
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              }
            ]
          },
          "unit": "short"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "custom.fillOpacity",
                "value": 20
              },
              {
                "id": "custom.lineWidth",
                "value": 1
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 16
      },
      "id": 25,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.5.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "max by (network) ({__name__=~\\"^(tendermint|cometbft)_consensus_validator_missed_blocks\\",network=\\"$network\\",instance=\\"$instance\\"})",
          "interval": "",
          "legendFormat": "total",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "expr": "max by (network) (delta({__name__=~\\"^(tendermint|cometbft)_consensus_validator_missed_blocks\\",network=\\"$network\\",instance=\\"$instance\\"}[1h]))",
          "hide": false,
          "legendFormat": "1h",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Validator Missed Blocks",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "green",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "bytes"
              },
              {
                "id": "min"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 22
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "{__name__=~\\"^(tendermint|cometbft)_mempool_size\\",network=\\"$network\\",instance=\\"$instance\\"}",
          "interval": "1s",
          "legendFormat": "{{instance}} - Total Txs",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "rate({__name__=~\\"^(tendermint|cometbft)_mempool_tx_size_bytes_sum\\",network=\\"$network\\",instance=\\"$instance\\"}[1m])",
          "hide": false,
          "interval": "1s",
          "legendFormat": "{{instance}} - Tx Size Inflow (1min)",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Mempool",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "green",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "custom.pointSize",
                "value": 1
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 22
      },
      "id": 56,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_total_txs\\",network=\\"$network\\",instance=\\"$instance\\"}[1m])",
          "interval": "1s",
          "legendFormat": "Confirmed (1min)",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_mempool_failed_txs\\",network=\\"$network\\",instance=\\"$instance\\"}[1m])",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Failed (1min)",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_mempool_failed_txs$\\",network=\\"$network\\",instance=\\"$instance\\"}[1m]) / (increase({__name__=~\\"^(tendermint|cometbft)_mempool_failed_txs$\\",network=\\"$network\\",instance=\\"$instance\\"}[1m]) + increase({__name__=~\\"^(tendermint|cometbft)_consensus_total_txs$\\",network=\\"$network\\",instance=\\"$instance\\"}[1m])) * 100",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Total % (1min)",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Finalized Transactions",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "green",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 28
      },
      "id": 57,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_block_gossip_parts_received\\",network=\\"$network\\",matches_current=\\"true\\",instance=\\"$instance\\"}[1m])",
          "interval": "1s",
          "legendFormat": "Parts Received - Matching current (1m)",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_block_gossip_parts_received\\",network=\\"$network\\",matches_current=\\"false\\",instance=\\"$instance\\"}[1m])",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Parts Received - Not matching (1m)",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Block Parts",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 28
      },
      "id": 58,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "{__name__=~\\"^(tendermint|cometbft)_consensus_block_size_bytes\\",network=\\"$network\\",instance=\\"$instance\\"}",
          "interval": "1s",
          "legendFormat": "Block Size",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Block Size",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 0,
        "y": 34
      },
      "id": 59,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "{__name__=~\\"^(tendermint|cometbft)_consensus_rounds\\",network=\\"$network\\",instance=\\"$instance\\"}",
          "interval": "1s",
          "legendFormat": "Consensus Rounds",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Consensus Rounds",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 12,
        "y": 34
      },
      "id": 60,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_step_duration_seconds_sum\\",network=\\"$network\\",step=\\"Prevote\\",instance=\\"$instance\\"}[1m]) / 100",
          "interval": "1s",
          "legendFormat": "Prevote",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_step_duration_seconds_sum\\",network=\\"$network\\",step=\\"Precommit\\",instance=\\"$instance\\"}[1m]) / 100",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Precommit",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_step_duration_seconds_sum\\",network=\\"$network\\",step=\\"Commit\\",instance=\\"$instance\\"}[1m]) / 100",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Commit",
          "range": true,
          "refId": "C"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_step_duration_seconds_sum\\",network=\\"$network\\",step=\\"NewHeight\\",instance=\\"$instance\\"}[1m]) / 100",
          "hide": false,
          "interval": "1s",
          "legendFormat": "New Height",
          "range": true,
          "refId": "D"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_consensus_step_duration_seconds_sum\\",network=\\"$network\\",step=\\"Propose\\",instance=\\"$instance\\"}[1m]) / 100",
          "hide": false,
          "interval": "1s",
          "legendFormat": "Propose",
          "range": true,
          "refId": "E"
        }
      ],
      "title": "Step duration",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "binBps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 0,
        "y": 39
      },
      "id": 62,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_p2p_message_receive_bytes_total\\",network=\\"$network\\",instance=\\"$instance\\"}[1m]) / 600",
          "interval": "1s",
          "legendFormat": "{{message_type}}",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Bytes received / s",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "binBps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 12,
        "y": 39
      },
      "id": 63,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_p2p_message_send_bytes_total\\",network=\\"$network\\",instance=\\"$instance\\"}[1m])/600",
          "interval": "1s",
          "legendFormat": "{{message_type}}",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Bytes sent / s",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 20,
        "w": 12,
        "x": 0,
        "y": 44
      },
      "id": 64,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_p2p_message_receive_bytes_total\\",network=\\"$network\\",instance=\\"$instance\\"}[1d])",
          "interval": "1s",
          "legendFormat": "{{message_type}}",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Bytes received (1d)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 20,
        "w": 12,
        "x": 12,
        "y": 44
      },
      "id": 65,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "editorMode": "code",
          "exemplar": true,
          "expr": "increase({__name__=~\\"^(tendermint|cometbft)_p2p_message_send_bytes_total\\",network=\\"$network\\",instance=\\"$instance\\"}[1d])",
          "interval": "1s",
          "legendFormat": "{{message_type}}",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Bytes sent (1d)",
      "type": "timeseries"
    }
  ],
  "refresh": "",
  "revision": 1,
  "schemaVersion": 38,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "definition": "label_values({__name__=~\\"^(tendermint|cometbft)_consensus_latest_block_height\\",network=~\\".*\\"},network)",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "network",
        "options": [],
        "query": {
          "query": "label_values({__name__=~\\"^(tendermint|cometbft)_consensus_latest_block_height\\",network=~\\".*\\"},network)",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "definition": "label_values(up{network=\\"$network\\"},instance)",
        "hide": 0,
        "includeAll": false,
        "label": "instance",
        "multi": false,
        "name": "instance",
        "options": [],
        "query": {
          "query": "label_values(up{network=\\"$network\\"},instance)",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-15m",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Chain Dashboard",
  "uid": "1jUwLdghefUwnk-starship-chain",
  "version": 8,
  "weekStart": ""
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "grafana-dashboards",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "grafana-dashboards",
    },
  },
  "monitoring/grafana-datasources-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "prometheus.yaml": "{
  "apiVersion": 1,
  "datasources": [
    {
      "access": "proxy",
      "editable": true,
      "name": "prometheus",
      "orgId": 1,
      "type": "prometheus",
      "url": "http://prometheus.aws-starship.svc:9090",
      "version": 1
    }
  ]
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "grafana-datasources",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "grafana-datasources",
    },
  },
  "monitoring/grafana-deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "grafana",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "grafana",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/instance": "monitoring",
            "app.kubernetes.io/name": "grafana",
          },
          "name": "grafana",
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "GF_SERVER_HTTP_PORT",
                  "value": "8080",
                },
                {
                  "name": "GF_SERVER_HTTP_ADDR",
                  "value": "0.0.0.0",
                },
                {
                  "name": "GF_AUTH_DISABLE_LOGIN_FORM",
                  "value": "true",
                },
                {
                  "name": "GF_AUTH_ANONYMOUS_ENABLED",
                  "value": "true",
                },
                {
                  "name": "GF_AUTH_ANONYMOUS_ORG_NAME",
                  "value": "Main Org.",
                },
                {
                  "name": "GF_AUTH_ANONYMOUS_ORG_ROLE",
                  "value": "Editor",
                },
              ],
              "image": "grafana/grafana:latest",
              "name": "grafana",
              "ports": [
                {
                  "containerPort": 3000,
                  "name": "grafana",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/var/lib/grafana",
                  "name": "grafana-storage",
                },
                {
                  "mountPath": "/etc/grafana/provisioning/datasources",
                  "name": "grafana-datasources",
                  "readOnly": false,
                },
                {
                  "mountPath": "/etc/grafana/provisioning/dashboards",
                  "name": "grafana-dashboard-providers",
                  "readOnly": false,
                },
                {
                  "mountPath": "/var/lib/grafana/dashboards",
                  "name": "grafana-dashboards",
                  "readOnly": false,
                },
              ],
            },
          ],
          "volumes": [
            {
              "configMap": {
                "defaultMode": 420,
                "name": "grafana-datasources",
              },
              "name": "grafana-datasources",
            },
            {
              "configMap": {
                "defaultMode": 420,
                "name": "grafana-dashboard-providers",
              },
              "name": "grafana-dashboard-providers",
            },
            {
              "configMap": {
                "name": "grafana-dashboards",
              },
              "name": "grafana-dashboards",
            },
            {
              "emptyDir": {},
              "name": "grafana-storage",
            },
          ],
        },
      },
    },
  },
  "monitoring/grafana-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "prometheus.io/port": "8080",
        "prometheus.io/scrape": "true",
      },
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "grafana",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "grafana",
      },
    },
  },
  "monitoring/prometheus-clusterrole.yaml": {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "prometheus",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "prometheus",
    },
    "rules": [
      {
        "apiGroups": [
          "",
        ],
        "resources": [
          "nodes",
          "nodes/proxy",
          "services",
          "endpoints",
          "pods",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
        ],
      },
      {
        "apiGroups": [
          "extensions",
        ],
        "resources": [
          "ingresses",
        ],
        "verbs": [
          "get",
          "list",
          "watch",
        ],
      },
      {
        "nonResourceURLs": [
          "/metrics",
        ],
        "verbs": [
          "get",
        ],
      },
    ],
  },
  "monitoring/prometheus-clusterrolebinding.yaml": {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "prometheus",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "prometheus",
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "prometheus",
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "default",
        "namespace": "$(NAMESPACE)",
      },
    ],
  },
  "monitoring/prometheus-config-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "prometheus.yml": "# my global config
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).
scrape_configs:
  # The job name is added as a label \`job=<job_name>\` to any timeseries scraped from this config.
  - job_name: 'kubernetes-apiservers'

    kubernetes_sd_configs:
      - role: endpoints
    scheme: https

    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  - job_name: 'kubernetes-nodes'

    scheme: https

    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

    kubernetes_sd_configs:
      - role: node

    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/\${1}/proxy/metrics

  - job_name: 'kubernetes-pods'

    kubernetes_sd_configs:
      - role: pod

    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\\d+)?;(\\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  - job_name: 'kube-state-metrics'
    static_configs:
      - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']

  - job_name: kubernetes-nodes-cadvisor
    scrape_interval: 10s
    scrape_timeout: 10s
    scheme: https  # remove if you want to scrape metrics on insecure port
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      # Only for Kubernetes ^1.7.3.
      # See: https://github.com/prometheus/prometheus/issues/2916
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/\${1}/proxy/metrics/cadvisor
    metric_relabel_configs:
      - action: replace
        source_labels: [id]
        regex: '^/machine\\.slice/machine-rkt\\\\x2d([^\\\\]+)\\\\.+/([^/]+)\\.service$'
        target_label: rkt_container_name
        replacement: '\${2}-\${1}'
      - action: replace
        source_labels: [id]
        regex: '^/system\\.slice/(.+)\\.service$'
        target_label: systemd_service_name
        replacement: '\${1}'

  - job_name: 'kubernetes-service-endpoints'

    kubernetes_sd_configs:
      - role: endpoints

    relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\\d+)?;(\\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
  
  - job_name: 'prometheus'
    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.
    static_configs:
      - targets: ['localhost:9090']
  
  - job_name: 'osmosis-genesis'
    static_configs:
      - targets: ['osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26660']
        labels:
          instance: genesis
          type: genesis
          network: "osmosis"
  - job_name: 'osmosis-validator-0'
    static_configs:
      - targets: ['osmosis-1-validator-0.osmosis-1-validator.$(NAMESPACE).svc.cluster.local:26660']
        labels:
          instance: "validator-0"
          type: validator
          network: "osmosis"
  - job_name: 'cosmoshub-genesis'
    static_configs:
      - targets: ['cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26660']
        labels:
          instance: genesis
          type: genesis
          network: "cosmoshub"
  - job_name: 'cosmoshub-validator-0'
    static_configs:
      - targets: ['cosmoshub-4-validator-0.cosmoshub-4-validator.$(NAMESPACE).svc.cluster.local:26660']
        labels:
          instance: "validator-0"
          type: validator
          network: "cosmoshub"
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "prometheus-config",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "prometheus-config",
    },
  },
  "monitoring/prometheus-deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "prometheus",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "prometheus",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "prometheus",
        },
      },
      "template": {
        "metadata": {
          "annotations": {
            "prometheus.io/port": "9090",
            "prometheus.io/scrape": "true",
          },
          "labels": {
            "app.kubernetes.io/instance": "monitoring",
            "app.kubernetes.io/name": "prometheus",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "--storage.tsdb.retention=6h",
                "--storage.tsdb.path=/prometheus",
                "--config.file=/etc/prometheus/prometheus.yml",
              ],
              "image": "prom/prometheus",
              "name": "prometheus",
              "ports": [
                {
                  "containerPort": 9090,
                  "name": "web",
                },
              ],
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "400M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/prometheus",
                  "name": "prometheus-config-volume",
                },
                {
                  "mountPath": "/prometheus",
                  "name": "prometheus-storage-volume",
                },
              ],
            },
          ],
          "restartPolicy": "Always",
          "volumes": [
            {
              "configMap": {
                "defaultMode": 420,
                "name": "prometheus-config",
              },
              "name": "prometheus-config-volume",
            },
            {
              "emptyDir": {},
              "name": "prometheus-storage-volume",
            },
          ],
        },
      },
    },
  },
  "monitoring/prometheus-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "prometheus.io/port": "9090",
        "prometheus.io/scrape": "true",
      },
      "labels": {
        "app.kubernetes.io/component": "monitoring",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "prometheus",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "prometheus",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "prometheus",
      },
    },
  },
  "osmosis/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
        {
          "name": "metrics",
          "port": 26660,
          "protocol": "TCP",
          "targetPort": 26660,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-genesis",
      },
    },
  },
  "osmosis/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-genesis",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-genesis",
        },
      },
      "serviceName": "osmosis-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-genesis",
            "app.kubernetes.io/rawname": "osmosis-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.osmosisd/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "2",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "1",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "osmosis/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "update-genesis.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

# overrides for older sdk versions, before 0.47
function gov_overrides_sdk_v46() {
  jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

# overrides for newer sdk versions, post 0.47
function gov_overrides_sdk_v47() {
  jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
}

if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
  jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
  jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
fi

if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
  gov_overrides_sdk_v46
else
  gov_overrides_sdk_v47
fi

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-osmosis-1",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "setup-scripts-osmosis-1",
    },
  },
  "osmosis/validator-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "osmosis-1",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
        {
          "name": "metrics",
          "port": 26660,
          "protocol": "TCP",
          "targetPort": 26660,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "osmosis-1-validator",
      },
    },
  },
  "osmosis/validator-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "osmosis-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "osmosis-1-validator",
        "app.kubernetes.io/part-of": "osmosis-1",
        "app.kubernetes.io/role": "validator",
        "app.kubernetes.io/type": "osmosis-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "osmosis",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "osmosis-1-validator",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "starship-e2e-tests",
          "app.kubernetes.io/name": "osmosis-1-validator",
        },
      },
      "serviceName": "osmosis-1-validator",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "starship-e2e-tests",
            "app.kubernetes.io/name": "osmosis-1-validator",
            "app.kubernetes.io/role": "validator",
            "app.kubernetes.io/type": "osmosis-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "set -eux
START_ARGS=""


# Starting the chain

$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "bash",
                      "-c",
                      "-e",
                      "until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

set -eux
export
VAL_INDEX=\${HOSTNAME##*-}
VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
bash -e /scripts/transfer-tokens.sh \\
  $VAL_ADDR \\
  $DENOM \\
  http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

$CHAIN_BIN keys list --keyring-backend test | jq
VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh",
                    ],
                  },
                },
              },
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.osmosisd/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.osmosisd/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.osmosisd/config/node_key.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.osmosisd/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting early"
  exit 0
fi

VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

echo "Recover validator $VAL_NAME"
$CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
echo "Genesis file that we got....."
cat $CHAIN_DIR/config/genesis.json

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "false",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-validator",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"


echo "Running setup config script..."
bash -e /scripts/update-config.sh

curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
if [[ $NODE_ID == "" ]]; then
  echo "Node ID is null, exiting early"
  exit 1
fi

GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
echo "Node P2P: $GENESIS_NODE_P2P"
sed -i "s/persistent_peers = \\"\\"/persistent_peers = \\"$GENESIS_NODE_P2P\\"/g" $CHAIN_DIR/config/config.toml

echo "Printing the whole config.toml file"
cat $CHAIN_DIR/config/config.toml",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "uosmo",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000uosmo,100000000000000uion",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/osmosis-labs/osmosis",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.osmosisd",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "osmosisd",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "osmosis-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "GENESIS_HOST",
                  "value": "osmosis-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/osmosis:v25.0.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.osmosisd",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-osmosis-1",
              },
              "name": "scripts",
            },
          ],
        },
      },
    },
  },
  "registry/cosmoshub-4-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "cosmoshub",
  "assets": [
    {
      "base": "uatom",
      "description": "The native staking and governance token of the Cosmos Hub.",
      "name": "Cosmos Hub Atom",
      "display": "atom",
      "symbol": "ATOM",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.svg"
      },
      "denom_units": [
        {
          "denom": "uatom",
          "exponent": 0
        },
        {
          "denom": "atom",
          "exponent": 6
        }
      ],
      "coingecko_id": "atom"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "cosmoshub",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "cosmoshub-4",
  "pretty_name": "Cosmos Hub Devnet",
  "bech32_prefix": "cosmos",
  "daemon_name": "gaiad",
  "node_home": "/root/.gaia",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uatom",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uatom"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/cosmos/gaia",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-cosmoshub-4",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-cosmoshub-4",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "starship-e2e-tests",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "osmosis-1,cosmoshub-4",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "osmosis,cosmoshub",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:26657,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26653,http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:9091,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:9091",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1313,http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://osmosis-1-genesis.$(NAMESPACE).svc.cluster.local:8081,http://cosmoshub-4-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/osmosis-1",
                  "name": "registry-osmosis-1",
                },
                {
                  "mountPath": "/chains/cosmoshub-4",
                  "name": "registry-cosmoshub-4",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-osmosis-1",
              },
              "name": "registry-osmosis-1",
            },
            {
              "configMap": {
                "name": "registry-cosmoshub-4",
              },
              "name": "registry-cosmoshub-4",
            },
          ],
        },
      },
    },
  },
  "registry/osmosis-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "osmosis",
  "assets": [
    {
      "base": "uosmo",
      "description": "The native token of Osmosis",
      "name": "Osmosis",
      "display": "osmo",
      "symbol": "OSMO",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/osmo.svg"
      },
      "denom_units": [
        {
          "denom": "uosmo",
          "exponent": 0
        },
        {
          "denom": "osmo",
          "exponent": 6
        }
      ],
      "coingecko_id": "osmosis",
      "keywords": [
        "staking",
        "dex"
      ]
    },
    {
      "base": "uion",
      "name": "Ion",
      "display": "ion",
      "symbol": "ION",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/osmosis/images/ion.svg"
      },
      "denom_units": [
        {
          "denom": "uion",
          "exponent": 0
        },
        {
          "denom": "ion",
          "exponent": 6
        }
      ],
      "coingecko_id": "ion",
      "keywords": [
        "memecoin"
      ]
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "osmosis",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "osmosis-1",
  "pretty_name": "Osmosis Devnet",
  "bech32_prefix": "osmo",
  "daemon_name": "osmosisd",
  "node_home": "/root/.osmosisd",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "118",
  "fees": {
    "fee_tokens": [
      {
        "denom": "uosmo",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "uosmo"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/osmosis-labs/osmosis",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-osmosis-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry-osmosis-1",
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "relayer/hermes-osmos-cosmos-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "config-cli.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1-cli"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4-cli"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
      "config.toml": "# The global section has parameters that apply globally to the relayer operation.
[global]
log_level = "info"

[mode]
[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = true

[mode.channels]
enabled = true

[mode.packets]
enabled = true
clear_interval = 100
clear_on_start = true
tx_confirmation = true

[rest]
enabled = true
host = "0.0.0.0"
port = 3000

[telemetry]
enabled = true
host = "0.0.0.0"
port = 3001


[[chains]]
id = "osmosis-1"
type = "CosmosSdk"
key_name = "osmosis-1"

rpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "osmo"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uosmo" }

[[chains]]
id = "cosmoshub-4"
type = "CosmosSdk"
key_name = "cosmoshub-4"

rpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657"
grpc_addr = "http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:9090"
event_source = { mode = 'push', url = "ws://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:26657/websocket", batch_delay = '500ms' }
trusted_node = false
account_prefix = "cosmos"
default_gas = 500000000
max_gas = 1000000000
rpc_timeout = "10s"
store_prefix = "ibc"
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = "5s"
max_block_time = "30s"
trusting_period = "75s"
trust_threshold = { numerator = "2", denominator = "3" }
address_type = { derivation = 'cosmos' }
gas_price = { price = 1.25, denom = "uatom" }
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
  },
  "relayer/hermes-osmos-cosmos-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "rest",
          "port": 3000,
          "protocol": "TCP",
          "targetPort": 3000,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
      },
    },
  },
  "relayer/hermes-osmos-cosmos-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "relayer",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "hermes-osmos-cosmos",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/role": "hermes",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "starship-e2e-tests",
      },
      "name": "hermes-osmos-cosmos",
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "relayer",
          "app.kubernetes.io/name": "hermes-osmos-cosmos",
          "app.kubernetes.io/type": "hermes",
        },
      },
      "serviceName": "hermes-osmos-cosmos",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "relayer",
            "app.kubernetes.io/name": "hermes-osmos-cosmos",
            "app.kubernetes.io/rawname": "osmos-cosmos",
            "app.kubernetes.io/type": "hermes",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "args": [
                "RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"
hermes start",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
              ],
            },
            {
              "args": [
                "/exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsUser": 0,
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "args": [
                "# Install exposer binary from the image
cp /bin/exposer /exposer/exposer
chmod +x /exposer/exposer",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-exposer",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/exposer",
                  "name": "exposer",
                },
              ],
            },
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: osmosis-1. Waiting for it to start..."
  echo "Checking: http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done

while [ $(curl -sw '%{http_code}' http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: cosmoshub-4. Waiting for it to start..."
  echo "Checking: http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
            {
              "args": [
                "set -ux

RLY_INDEX=\${HOSTNAME##*-}
echo "Relayer Index: $RLY_INDEX"

mkdir -p $RELAYER_DIR
cp /configs/config.toml $RELAYER_DIR/config.toml
cp /configs/config-cli.toml $RELAYER_DIR/config-cli.toml

# Replace namespace placeholder with actual namespace environment variable
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config.toml
sed -i "s|\\$NAMESPACE|$NAMESPACE|g" $RELAYER_DIR/config-cli.toml

MNEMONIC=$(jq -r ".relayers[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC > $RELAYER_DIR/mnemonic.txt
MNEMONIC_CLI=$(jq -r ".relayers_cli[$RLY_INDEX].mnemonic" $KEYS_CONFIG)
echo $MNEMONIC_CLI > $RELAYER_DIR/mnemonic-cli.txt


echo "Creating key for osmosis-1..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name osmosis-1 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uosmo"
RLY_ADDR=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for osmosis-1-cli..."
hermes keys add \\
  --chain osmosis-1 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name osmosis-1-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain osmosis-1 | tail -1 | jq -r '.result."osmosis-1-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://osmosis-1-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic.txt \\
  --key-name cosmoshub-4 \\
  --hd-path "m/44'/118'/0'/0/0"
DENOM="uatom"
RLY_ADDR=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4".account')

echo "Transfer tokens to address $RLY_ADDR"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

echo "Creating key for cosmoshub-4-cli..."
hermes keys add \\
  --chain cosmoshub-4 \\
  --mnemonic-file $RELAYER_DIR/mnemonic-cli.txt \\
  --key-name cosmoshub-4-cli \\
  --hd-path "m/44'/118'/0'/0/0"
RLY_ADDR_CLI=$(hermes --json keys list --chain cosmoshub-4 | tail -1 | jq -r '.result."cosmoshub-4-cli".account')

echo "Transfer tokens to address $RLY_ADDR_CLI"
bash -e /scripts/transfer-tokens.sh \\
  $RLY_ADDR_CLI \\
  $DENOM \\
  http://cosmoshub-4-genesis.$NAMESPACE.svc.cluster.local:8000/credit \\
  "false" || true

hermes create channel \\
  --new-client-connection --yes \\
  --b-chain cosmoshub-4 \\
  --a-chain osmosis-1 \\
  --a-port transfer \\
  --b-port transfer
",
              ],
              "command": [
                "bash",
                "-c",
              ],
              "env": [
                {
                  "name": "KEYS_CONFIG",
                  "value": "/keys/keys.json",
                },
                {
                  "name": "RELAYER_DIR",
                  "value": "/root/.hermes",
                },
                {
                  "name": "RELAYER_INDEX",
                  "value": "\${HOSTNAME##*-}",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "ghcr.io/cosmology-tech/starship/hermes:1.10.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-relayer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root",
                  "name": "relayer",
                },
                {
                  "mountPath": "/configs",
                  "name": "relayer-config",
                },
                {
                  "mountPath": "/keys",
                  "name": "keys",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "relayer",
            },
            {
              "configMap": {
                "name": "hermes-osmos-cosmos",
              },
              "name": "relayer-config",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "keys",
            },
            {
              "configMap": {
                "name": "setup-scripts",
              },
              "name": "scripts",
            },
            {
              "emptyDir": {},
              "name": "exposer",
            },
          ],
        },
      },
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-monitoring should have proper file organization for two-chain-monitoring: two-chain-monitoring-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "cosmoshub": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "monitoring": [
    "grafana-dashboard-providers-configmap.yaml",
    "grafana-dashboards-configmap.yaml",
    "grafana-datasources-configmap.yaml",
    "grafana-deployment.yaml",
    "grafana-service.yaml",
    "prometheus-clusterrole.yaml",
    "prometheus-clusterrolebinding.yaml",
    "prometheus-config-configmap.yaml",
    "prometheus-deployment.yaml",
    "prometheus-service.yaml",
  ],
  "osmosis": [
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
    "validator-service.yaml",
    "validator-statefulset.yaml",
  ],
  "registry": [
    "cosmoshub-4-configmap.yaml",
    "deployment.yaml",
    "osmosis-1-configmap.yaml",
    "service.yaml",
  ],
  "relayer": [
    "hermes-osmos-cosmos-configmap.yaml",
    "hermes-osmos-cosmos-service.yaml",
    "hermes-osmos-cosmos-statefulset.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: two-chain-monitoring should have proper file organization for two-chain-monitoring: two-chain-monitoring-resource-counts 1`] = `
{
  "ClusterRole": 1,
  "ClusterRoleBinding": 1,
  "ConfigMap": 11,
  "Deployment": 3,
  "Service": 8,
  "StatefulSet": 5,
}
`;

exports[`BuilderManager Config Files Tests Config: xpla should generate valid YAML manifests for xpla: xpla-yaml-files 1`] = `
{
  "configmaps/keys.yaml": {
    "apiVersion": "v1",
    "data": {
      "keys.json": "{
  "genesis": [
    {
      "name": "genesis",
      "type": "local",
      "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
    }
  ],
  "validators": [
    {
      "name": "validator",
      "type": "local",
      "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
    }
  ],
  "faucet": [
    {
      "name": "faucet",
      "type": "local",
      "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
    }
  ],
  "keys": [
    {
      "name": "test1",
      "type": "local",
      "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
    },
    {
      "name": "test2",
      "type": "local",
      "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
    },
    {
      "name": "test3",
      "type": "local",
      "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
    }
  ],
  "relayers": [
    {
      "name": "relayer1",
      "type": "local",
      "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
    },
    {
      "name": "relayer2",
      "type": "local",
      "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
    },
    {
      "name": "relayer3",
      "type": "local",
      "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
    },
    {
      "name": "relayer4",
      "type": "local",
      "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
    },
    {
      "name": "relayer5",
      "type": "local",
      "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
    }
  ],
  "relayers_cli": [
    {
      "name": "relayer-cli-1",
      "type": "local",
      "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
    },
    {
      "name": "relayer-cli-2",
      "type": "local",
      "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
    },
    {
      "name": "relayer-cli-3",
      "type": "local",
      "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
    },
    {
      "name": "relayer-cli-4",
      "type": "local",
      "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
    },
    {
      "name": "relayer-cli-5",
      "type": "local",
      "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
    }
  ]
}
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "keys",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "xpla",
      },
      "name": "keys",
    },
  },
  "configmaps/setup-scripts.yaml": {
    "apiVersion": "v1",
    "data": {
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "configmap",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts",
        "app.kubernetes.io/part-of": "global",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "xpla",
      },
      "name": "setup-scripts",
    },
  },
  "registry/deployment.yaml": {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "xpla",
      },
      "name": "registry",
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "registry",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/component": "registry",
            "app.kubernetes.io/managed-by": "starship",
            "app.kubernetes.io/name": "registry",
            "app.kubernetes.io/part-of": "starship",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
            "starship.io/name": "xpla",
          },
        },
        "spec": {
          "containers": [
            {
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_IDS",
                  "value": "xpla_1-1",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_NAMES",
                  "value": "xpla",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_RPCS",
                  "value": "http://xpla-1-1-genesis.$(NAMESPACE).svc.cluster.local:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RPCS",
                  "value": "http://localhost:26657",
                },
                {
                  "name": "REGISTRY_CHAIN_API_GRPCS",
                  "value": "http://localhost:9090",
                },
                {
                  "name": "REGISTRY_CHAIN_API_RESTS",
                  "value": "http://localhost:1317",
                },
                {
                  "name": "REGISTRY_CHAIN_CLIENT_EXPOSERS",
                  "value": "http://xpla-1-1-genesis.$(NAMESPACE).svc.cluster.local:8081",
                },
                {
                  "name": "REGISTRY_CHAIN_REGISTRY",
                  "value": "/chains",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/registry:20250205-544757d",
              "livenessProbe": {
                "initialDelaySeconds": 15,
                "periodSeconds": 20,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "name": "registry",
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "tcpSocket": {
                  "port": 8080,
                },
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/chains/xpla_1-1",
                  "name": "registry-xpla-1-1",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "
while [ $(curl -sw '%{http_code}' http://xpla-1-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
  echo "Genesis validator does not seem to be ready for: xpla_1-1. Waiting for it to start..."
  echo "Checking: http://xpla-1-1-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
  sleep 10;
done
echo "Ready to start"
exit 0",
              ],
              "env": [
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
              ],
              "image": "curlimages/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "name": "wait-for-chains",
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "100M",
                },
              },
            },
          ],
          "volumes": [
            {
              "configMap": {
                "name": "registry-xpla-1-1",
              },
              "name": "registry-xpla-1-1",
            },
          ],
        },
      },
    },
  },
  "registry/service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "xpla",
      },
      "name": "registry",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080,
        },
        {
          "name": "grpc",
          "port": 9090,
          "targetPort": 9090,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "registry",
      },
    },
  },
  "registry/xpla-1-1-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "assetlist.json": "{
  "$schema": "../assetlist.schema.json",
  "chain_name": "xpla",
  "assets": [
    {
      "base": "axpla",
      "description": "The XPLA token is the native governance token for the XPLA chain.",
      "denom_units": [
        {
          "denom": "axpla",
          "exponent": 0
        }
      ],
      "name": "XPLA",
      "display": "XPLA",
      "symbol": "XPLA",
      "logo_URIs": {
        "png": "https://raw.githubusercontent.com/cosmos/chain-registry/master/xpla/images/xpla.png",
        "svg": "https://raw.githubusercontent.com/cosmos/chain-registry/master/xpla/images/xpla.svg"
      },
      "coingecko_id": "xpla"
    }
  ]
}",
      "chain.json": "{
  "$schema": "../chain.schema.json",
  "chain_name": "xpla",
  "status": "live",
  "network_type": "devnet",
  "chain_id": "xpla_1-1",
  "pretty_name": "XPLA Chain Devnet",
  "bech32_prefix": "xpla",
  "daemon_name": "xplad",
  "node_home": "/root/.xpla",
  "key_algos": [
    "secp256k1"
  ],
  "slip44": "60",
  "fees": {
    "fee_tokens": [
      {
        "denom": "axpla",
        "fixed_min_gas_price": 0,
        "low_gas_price": 0,
        "average_gas_price": 0.025,
        "high_gas_price": 0.04
      }
    ]
  },
  "staking": {
    "staking_tokens": [
      {
        "denom": "axpla"
      }
    ],
    "lock_duration": {
      "time": "1209600s"
    }
  },
  "codebase": {
    "git_repo": "https://github.com/xpladev/xpla",
    "compatible_versions": [],
    "binaries": {},
    "ics_enabled": [],
    "versions": [],
    "consensus": {
      "type": "tendermint"
    }
  },
  "peers": {
    "seeds": [],
    "persistent_peers": []
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "registry",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "registry-xpla-1-1",
        "app.kubernetes.io/part-of": "starship",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/name": "xpla",
      },
      "name": "registry-xpla-1-1",
    },
  },
  "xpla/genesis-patch-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "genesis.json": "{
  "app_state": {
    "staking": {
      "params": {
        "unbonding_time": "300s"
      }
    }
  }
}",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "xpla",
        "app.kubernetes.io/part-of": "xpla_1-1",
        "app.kubernetes.io/role": "genesis-patch",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "xpla_1-1",
        "starship.io/chain-name": "xpla",
        "starship.io/name": "xpla",
      },
      "name": "patch-xpla-1-1",
    },
  },
  "xpla/genesis-service.yaml": {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "xpla_1-1-genesis",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "xpla_1-1-service",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "xpla_1-1",
        "starship.io/chain-name": "xpla",
        "starship.io/name": "xpla",
      },
      "name": "xpla-1-1-genesis",
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "address",
          "port": 26658,
          "protocol": "TCP",
          "targetPort": 26658,
        },
        {
          "name": "grpc",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090,
        },
        {
          "name": "grpc-web",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091,
        },
        {
          "name": "p2p",
          "port": 26656,
          "protocol": "TCP",
          "targetPort": 26656,
        },
        {
          "name": "rest",
          "port": 1317,
          "protocol": "TCP",
          "targetPort": 1317,
        },
        {
          "name": "rpc",
          "port": 26657,
          "protocol": "TCP",
          "targetPort": 26657,
        },
        {
          "name": "exposer",
          "port": 8081,
          "protocol": "TCP",
          "targetPort": 8081,
        },
        {
          "name": "faucet",
          "port": 8000,
          "protocol": "TCP",
          "targetPort": 8000,
        },
        {
          "name": "metrics",
          "port": 26660,
          "protocol": "TCP",
          "targetPort": 26660,
        },
      ],
      "selector": {
        "app.kubernetes.io/name": "xpla_1-1-genesis",
      },
    },
  },
  "xpla/genesis-statefulset.yaml": {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/id": "xpla_1-1",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "xpla_1-1-genesis",
        "app.kubernetes.io/part-of": "xpla_1-1",
        "app.kubernetes.io/role": "genesis",
        "app.kubernetes.io/type": "xpla_1-1-statefulset",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-name": "xpla",
        "starship.io/name": "xpla",
      },
      "name": "xpla-1-1-genesis",
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/instance": "xpla",
          "app.kubernetes.io/name": "xpla_1-1-genesis",
        },
      },
      "serviceName": "xpla-1-1-genesis",
      "template": {
        "metadata": {
          "annotations": {
            "quality": "release",
            "role": "api-gateway",
            "sla": "high",
            "tier": "gateway",
          },
          "labels": {
            "app.kubernetes.io/instance": "xpla",
            "app.kubernetes.io/name": "xpla_1-1-genesis",
            "app.kubernetes.io/rawname": "xpla_1-1",
            "app.kubernetes.io/role": "genesis",
            "app.kubernetes.io/type": "xpla_1-1",
            "app.kubernetes.io/version": "4.0.0-alpha.0",
          },
        },
        "spec": {
          "containers": [
            {
              "command": [
                "bash",
                "-c",
                "#!/bin/bash
set -euo pipefail

START_ARGS=""


$CHAIN_BIN start $START_ARGS",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "axpla",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000axpla",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "xplad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.xpla",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/xpladev/xpla",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.xpla",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "xplad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "xpla_1-1",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "SLOGFILE",
                  "value": "slog.slog",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/xpla:main",
              "imagePullPolicy": "IfNotPresent",
              "name": "validator",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-e",
                    "/scripts/chain-rpc-ready.sh",
                    "http://localhost:26657",
                  ],
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 15,
              },
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.xpla",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "exposer",
              ],
              "env": [
                {
                  "name": "GENESIS_HOST",
                  "value": "xpla-1-1-genesis",
                },
                {
                  "name": "GENESIS_PORT",
                  "value": "8081",
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace",
                    },
                  },
                },
                {
                  "name": "EXPOSER_HTTP_PORT",
                  "value": "8081",
                },
                {
                  "name": "EXPOSER_GRPC_PORT",
                  "value": "9099",
                },
                {
                  "name": "EXPOSER_GENESIS_FILE",
                  "value": "/root/.xpla/config/genesis.json",
                },
                {
                  "name": "EXPOSER_MNEMONIC_FILE",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_FILE",
                  "value": "/root/.xpla/config/priv_validator_key.json",
                },
                {
                  "name": "EXPOSER_NODE_KEY_FILE",
                  "value": "/root/.xpla/config/node_key.json",
                },
                {
                  "name": "EXPOSER_NODE_ID_FILE",
                  "value": "/root/.xpla/config/node_id.json",
                },
                {
                  "name": "EXPOSER_PRIV_VAL_STATE_FILE",
                  "value": "/root/.xpla/data/priv_validator_state.json",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/exposer:20250205-544757d",
              "imagePullPolicy": "IfNotPresent",
              "name": "exposer",
              "resources": {
                "limits": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
                "requests": {
                  "cpu": "0.2",
                  "memory": "200M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.xpla",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "CREDIT_COINS=""
FEES=""
for coin in \${COINS//,/ }
do
    amt="\${coin//[!0-9]/}"
    denom="\${coin//[0-9]/}"

    # Calculate the order of magnitude
    if [ \${#amt} -gt 18 ]; then
      creditAmt=$(echo $amt | sed -e "s/000000$//")
      feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
    else
      creditAmt=$(echo $amt | sed -e "s/0000$//")
      feesAmt=$(echo $amt | sed -e "s/00000000$//")
    fi

    if [[ $CREDIT_COINS == "" ]]
    then
      CREDIT_COINS="$creditAmt$denom"
      FEES="$feesAmt$denom"
    else
      CREDIT_COINS="\${CREDIT_COINS},$creditAmt$denom"
    fi
done

export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

export | grep "FAUCET"

until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
  sleep 10
done

/faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"",
              ],
              "env": [
                {
                  "name": "FAUCET_CONCURRENCY",
                  "value": "2",
                },
                {
                  "name": "FAUCET_HTTP_PORT",
                  "value": "8000",
                },
                {
                  "name": "FAUCET_CHAIN_BINARY",
                  "value": "xplad",
                },
                {
                  "name": "FAUCET_CHAIN_ID",
                  "value": "xpla_1-1",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000axpla",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/xpla:main",
              "imagePullPolicy": "IfNotPresent",
              "name": "faucet",
              "readinessProbe": {
                "httpGet": {
                  "path": "/status",
                  "port": 8000,
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
              },
              "resources": {
                "limits": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
                "requests": {
                  "cpu": "0.1",
                  "memory": "128M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
          ],
          "initContainers": [
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

if [ -f $CHAIN_DIR/config/genesis.json ]; then
  echo "Genesis file exists, exiting init container"
  exit 0
fi

echo "Running setup genesis script..."
bash -e /scripts/create-genesis.sh
bash -e /scripts/update-genesis.sh

echo "Create node id json file"
NODE_ID=$($CHAIN_BIN tendermint show-node-id)
echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

echo "Create consensus key json file"
$CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
cat $CHAIN_DIR/config/consensus_key.json

echo "Add custom accounts and balances"
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

echo "Adding balance to xpla1cmywl3ff3vfsdp2s87v25v75qjxs4up35tk45g"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account xpla1cmywl3ff3vfsdp2s87v25v75qjxs4up35tk45g 100000000000000000000000axpla --keyring-backend="test"",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "axpla",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000axpla",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "xplad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.xpla",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/xpladev/xpla",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.xpla",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "xplad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "xpla_1-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "FAUCET_ENABLED",
                  "value": "true",
                },
                {
                  "name": "NUM_VALIDATORS",
                  "value": "1",
                },
                {
                  "name": "NUM_RELAYERS",
                  "value": "0",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/xpla:main",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-genesis",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.xpla",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "VAL_INDEX=\${HOSTNAME##*-}
echo "Validator Index: $VAL_INDEX"

echo "Running setup config script..."

jq -s '.[0] * .[1]' $CHAIN_DIR/config/genesis.json /patch/genesis.json > $CHAIN_DIR/config/genesis.json.tmp && mv $CHAIN_DIR/config/genesis.json.tmp $CHAIN_DIR/config/genesis.json

bash -e /scripts/update-config.sh",
              ],
              "env": [
                {
                  "name": "DENOM",
                  "value": "axpla",
                },
                {
                  "name": "COINS",
                  "value": "100000000000000000000000000axpla",
                },
                {
                  "name": "CHAIN_BIN",
                  "value": "xplad",
                },
                {
                  "name": "CHAIN_DIR",
                  "value": "/root/.xpla",
                },
                {
                  "name": "CODE_REPO",
                  "value": "https://github.com/xpladev/xpla",
                },
                {
                  "name": "DAEMON_HOME",
                  "value": "/root/.xpla",
                },
                {
                  "name": "DAEMON_NAME",
                  "value": "xplad",
                },
                {
                  "name": "CHAIN_ID",
                  "value": "xpla_1-1",
                },
                {
                  "name": "TIME_IOTA_MS",
                  "value": "10",
                },
                {
                  "name": "TIMEOUT_PROPOSE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PROPOSE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PREVOTE_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_PRECOMMIT_DELTA",
                  "value": "400ms",
                },
                {
                  "name": "TIMEOUT_COMMIT",
                  "value": "800ms",
                },
                {
                  "name": "KEYS_CONFIG",
                  "value": "/configs/keys.json",
                },
                {
                  "name": "METRICS",
                  "value": "true",
                },
              ],
              "image": "ghcr.io/hyperweb-io/starship/xpla:main",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-config",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/root/.xpla",
                  "name": "node",
                },
                {
                  "mountPath": "/configs",
                  "name": "addresses",
                },
                {
                  "mountPath": "/scripts",
                  "name": "scripts",
                },
                {
                  "mountPath": "/patch",
                  "name": "patch",
                },
              ],
            },
            {
              "command": [
                "bash",
                "-c",
                "cp /bin/faucet /faucet/faucet && chmod +x /faucet/faucet",
              ],
              "image": "ghcr.io/hyperweb-io/starship/faucet:20250325-2207109",
              "imagePullPolicy": "IfNotPresent",
              "name": "init-faucet",
              "resources": {
                "limits": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
                "requests": {
                  "cpu": "0.5",
                  "memory": "500M",
                },
              },
              "volumeMounts": [
                {
                  "mountPath": "/faucet",
                  "name": "faucet",
                },
              ],
            },
          ],
          "volumes": [
            {
              "emptyDir": {},
              "name": "node",
            },
            {
              "configMap": {
                "name": "keys",
              },
              "name": "addresses",
            },
            {
              "configMap": {
                "name": "setup-scripts-xpla-1-1",
              },
              "name": "scripts",
            },
            {
              "configMap": {
                "name": "patch-xpla-1-1",
              },
              "name": "patch",
            },
            {
              "emptyDir": {},
              "name": "faucet",
            },
          ],
        },
      },
    },
  },
  "xpla/setup-scripts-configmap.yaml": {
    "apiVersion": "v1",
    "data": {
      "build-chain.sh": "#!/bin/bash

set -euxo pipefail

mkdir -p /tmp/chains $UPGRADE_DIR

echo "Fetching code from tag"
mkdir -p /tmp/chains/$CHAIN_NAME
cd /tmp/chains/$CHAIN_NAME

if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
  echo "Trying to fetch code from commit hash"
  curl -LO $CODE_REPO/archive/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG}
elif [[ $CODE_TAG = v* ]]; then
  echo "Trying to fetch code from tag with 'v' prefix"
  curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
  unzip $CODE_TAG.zip
  code_dir=\${CODE_REPO##*/}-\${CODE_TAG#"v"}
else
  echo "Trying to fetch code from tag or branch"
  if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
    unzip $CODE_TAG.zip
    code_dir=\${CODE_REPO##*/}-$CODE_TAG
  elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
    unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
    code_dir=\${CODE_REPO##*/}-\${CODE_TAG/\\//-}
  else
    echo "Tag or branch '$CODE_TAG' not found"
    exit 1
  fi
fi

echo "Fetch wasmvm if needed"
cd /tmp/chains/$CHAIN_NAME/$code_dir
WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
if [[ WASM_VERSION != "" ]]; then
  mkdir -p /tmp/chains/libwasmvm_muslc
  cd /tmp/chains/libwasmvm_muslc
  curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
  cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
fi

echo "Build chain binary"
cd /tmp/chains/$CHAIN_NAME/$code_dir
CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install

echo "Copy created binary to the upgrade directories"
if [[ $UPGRADE_NAME == "genesis" ]]; then
  mkdir -p $UPGRADE_DIR/genesis/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
else
  mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
  cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
fi

echo "Cleanup"
rm -rf /tmp/chains/$CHAIN_NAME
",
      "chain-rpc-ready.sh": "#!/bin/bash
# chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
# Usage: chain-rpc-ready.sh [RPC_URL]

set -euo pipefail

RPC_URL=\${1:-"http://localhost:26657"}

echo 1>&2 "Checking if $RPC_URL is ready..."

# Check if the RPC URL is reachable,
json=$(curl -s --connect-timeout 2 "$RPC_URL/status")

# and the bootstrap block state has been validated,
if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
  echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
  exit 1
fi

# and the node is not catching up.
if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
  echo 1>&2 "$RPC_URL is not ready: node is catching up"
  exit 1
fi

echo "$json" | jq -r .result
exit 0
",
      "create-genesis.sh": "#!/bin/bash

set -eux

DENOM="\${DENOM:=uosmo}"
COINS="\${COINS:=100000000000000000uosmo}"
CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

FAUCET_ENABLED="\${FAUCET_ENABLED:=true}"
NUM_VALIDATORS="\${NUM_VALIDATORS:=1}"
NUM_RELAYERS="\${NUM_RELAYERS:=0}"

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

CHAIN_INIT_ID="$CHAIN_ID"
if [ "$CHAIN_BIN" == "osmosisd" ]; then
  CHAIN_INIT_ID="test-1"
fi
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json

# Add genesis keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add faucet key to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

# Add test keys to the keyring and self delegate initial coins
echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
$CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"

if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
then
  ## Add relayers keys and delegate tokens
  for i in $(seq 0 $NUM_RELAYERS);
  do
    # Add relayer key and delegate tokens
    RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer key.... $RELAYER_KEY_NAME"
    jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
    # Add relayer-cli key and delegate tokens
    RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
    echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
    jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

## if faucet not enabled then add validator and relayer with index as keys and into gentx
if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
then
  ## Add validators key and delegate tokens
  for i in $(seq 0 $NUM_VALIDATORS);
  do
    VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
    echo "Adding validator key.... $VAL_KEY_NAME"
    jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
  done
fi

echo "Creating gentx..."
COIN=$(echo $COINS | cut -d ',' -f1)
AMT=$(echo \${COIN//[!0-9]/} | sed -e "s/0000$//")
$CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID

echo "Output of gentx"
cat $CHAIN_DIR/config/gentx/*.json | jq

echo "Running collect-gentxs"
$CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs

ls $CHAIN_DIR/config
",
      "create-ics.sh": "#!/bin/bash

set -euxo pipefail

DENOM="\${DENOM:=uatom}"
CHAIN_ID="\${CHAIN_ID:=cosmoshub-1}"
CHAIN_BIN="\${CHAIN_BIN:=gaiad}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

PROPOSAL_FILE="\${PROPOSAL_FILE}"
KEY_NAME="ics-setup"
MAX_RETRIES=3
RETRY_INTERVAL=30
SUBMIT_PROPOSAL_CMD=""

add_key() {
  # Add test keys to the keyring and self delegate initial coins
  echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
  jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
  echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
}

get_validator_address() {
  echo "Getting validator address..."
  VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
  echo "Selected validator address: $VALIDATOR_ADDRESS"
}

stake_tokens() {
  COINS="10000000$DENOM"
  echo "Staking tokens..."
  $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

determine_proposal_command() {
  echo "Determining the correct command to submit proposals..."
  HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
  if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
    SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
  else
    SUBMIT_PROPOSAL_CMD="submit-proposal"
  fi
  echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
}

submit_proposal() {
  echo "Get all proposals"
  PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
  if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
    echo "No existing proposals found. Proceeding to submit a new proposal."
  else
    echo "Existing proposals: $PROPOSALS_OUTPUT"
  fi

  echo "Submit gov proposal on chain"
  PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes)
  echo $PROPOSAL_TX

  # Extract JSON part from the output
  TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
  if [ -n "$TX_HASH" ]; then
    echo "Transaction hash: $TX_HASH"
  else
    echo "Failed to submit proposal. Output was not as expected."
    exit 1
  fi

  sleep 5
}

get_proposal_id() {
  echo "Getting proposal ID"
  PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
  LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
  if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
    PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
    if [ -n "$PROPOSAL_ID" ]; then
      echo "Proposal ID: $PROPOSAL_ID"
      return 0
    fi
  fi
  echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
  exit 1
}

vote_proposal() {
  echo "Voting on proposal"
  $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \\
    --from $KEY_NAME \\
    --chain-id $CHAIN_ID \\
    --node $NODE_URL \\
    --keyring-backend="test" \\
    --gas auto --gas-adjustment 2 \\
    --output json \\
    --yes
  sleep 5
}

wait_for_proposal_to_pass() {
  echo "Waiting for proposal to pass"
  for ((i=1; i<=$MAX_RETRIES; i++)); do
    STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
    if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
      echo "Proposal has passed!"
      return 0
    else
      echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
      sleep $RETRY_INTERVAL
    fi
  done
  echo "Proposal did not pass after $MAX_RETRIES attempts."
  exit 1
}

main() {
  add_key
  get_validator_address
  stake_tokens
  determine_proposal_command
  submit_proposal
  get_proposal_id
  vote_proposal
  wait_for_proposal_to_pass
}

main
",
      "create-validator.sh": "#!/bin/bash

DENOM="\${DENOM:=uosmo}"
CHAIN_BIN="\${CHAIN_BIN:=osmosisd}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"
VAL_NAME="\${VAL_NAME:=osmosis}"
NODE_URL="\${NODE_URL:=http://0.0.0.0:26657}"
NODE_ARGS="\${NODE_ARGS}"
GAS="\${GAS:=auto}"

set -eux

# Wait for the node to be synced
max_tries=10
while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
do
  if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
  echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 30
done

# Function to compare version numbers
version_compare() {
    version1="$1"
    version2="$2"
    if [[ "$(printf '%s\\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
        return 1 # version1 is greater
    else
        return 0 # version2 is greater or equal
    fi
}

# Check if cosmos_sdk_version is greater than a specified version
is_greater() {
    version_compare "$1" "$2"
    return $?
}

function cosmos-sdk-version-v50() {
  # Content for the validator.json file
  json_content='{
    "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
    "amount": "5000000000'$DENOM'",
    "moniker": "'$VAL_NAME'",
    "commission-rate": "0.1",
    "commission-max-rate": "0.2",
    "commission-max-change-rate": "0.01",
    "min-self-delegation": "1000000"
  }'
  echo "$json_content" > /validator.json
  cat /validator.json

  # Run create validator tx command
  echo "Running txn for create-validator"
  $CHAIN_BIN tx staking create-validator /validator.json \\
    --node $NODE_URL \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --fees 100000$DENOM \\
    --keyring-backend="test" \\
    --output json \\
    --gas $GAS \\
    --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

function cosmos-sdk-version-default() {
  # Run create validator tx command
  echo "Running txn for create-validator"
  args=''
  if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
  then
    args+='--min-self-delegation=1000000'
  fi
  $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
  $CHAIN_BIN tx staking create-validator \\
    --node $NODE_URL \\
    --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \\
    --moniker $VAL_NAME \\
    --amount 5000000000$DENOM \\
    --chain-id $CHAIN_ID \\
    --from $VAL_NAME \\
    --commission-rate="0.10" \\
    --commission-max-rate="0.20" \\
    --commission-max-change-rate="0.01" \\
    --keyring-backend test \\
    --home $CHAIN_DIR \\
    --fees 100000$DENOM \\
    --gas $GAS \\
    --output json \\
    --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log

  cat /validator.log | jq
}

set +e
# Fetch the cosmos-sdk version to be able to perform the create-validator tx
cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \\(.*\\)/\\1/p')
echo "cosmos_sdk_version: $cosmos_sdk_version"
set -e

if is_greater "$cosmos_sdk_version" "v0.50.0"; then
  echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
  cosmos-sdk-version-v50
else
  echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
  cosmos-sdk-version-default
fi
",
      "ibc-connection.sh": "#!/bin/bash

REGISTRY_URL="$1"
CHAIN_1="$2"
CHAIN_2="$3"

set -eux

function connection_id() {
  CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
  echo $CONNECTION_ID
}

echo "Try to get connection id, if failed, wait for 2 seconds and try again"
max_tries=20
while [[ max_tries -gt 0 ]]
do
  id=$(connection_id)
  if [[ -n "$id" ]]; then
    echo "Found connection id: $id"
    exit 0
  fi
  echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 10
done
",
      "transfer-tokens.sh": "#!/bin/bash

ADDRESS="$1"
DENOM="$2"
FAUCET_URL="$3"
FAUCET_ENABLED="$4"

set -eux

function transfer_token() {
  status_code=$(curl --header "Content-Type: application/json" \\
    --request POST --write-out %{http_code} --silent --output /dev/null \\
    --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \\
    $FAUCET_URL)
  echo $status_code
}

if [[ $FAUCET_ENABLED == "false" ]];
then
  echo "Faucet not enabled... skipping transfer token from faucet"
  exit 0
fi

echo "Try to send tokens, if failed, wait for 5 seconds and try again"
max_tries=5
while [[ max_tries -gt 0 ]]
do
  status_code=$(transfer_token)
  if [[ "$status_code" -eq 200 ]]; then
    echo "Successfully sent tokens"
    exit 0
  fi
  echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
  ((max_tries--))
  sleep 2
done
",
      "update-config.sh": "#!/bin/bash

CHAIN_ID="\${CHAIN_ID:=osmosis}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.osmosisd}"
KEYS_CONFIG="\${KEYS_CONFIG:=configs/keys.json}"

set -eux

ls $CHAIN_DIR


echo "Update config.toml file"
sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
sed -i -e 's#cors_allowed_origins = \\[\\]#cors_allowed_origins = \\["*"\\]#g' $CHAIN_DIR/config/config.toml
sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml

echo "Update client.toml file"
sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
sed -i -e "s#chain-id = \\"\\"#chain-id = \\"$CHAIN_ID\\"#g" $CHAIN_DIR/config/client.toml


echo "Update app.toml file"
sed -i -e "s#minimum-gas-prices = \\".*\\"#minimum-gas-prices = \\"0$DENOM\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e "s#pruning = \\".*\\"#pruning = \\"default\\"#g" $CHAIN_DIR/config/app.toml
sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml


function get_next_line_number() {
  local txt=$1
  local file=$2
  local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
  echo $((line_number + 1))
}

line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"tcp://0.0.0.0:1317\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9090\\"#g" $CHAIN_DIR/config/app.toml

line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
sed -i -e "\${line_number}s#address = \\".*\\"#address = \\"0.0.0.0:9091\\"#g" $CHAIN_DIR/config/app.toml

if [ "$METRICS" == "true" ]; then
  sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml

  line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
  sed -i -e "\${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
fi

echo "Update consensus params in config.toml"
sed -i -e "s#timeout_propose = \\".*\\"#timeout_propose = \\"$TIMEOUT_PROPOSE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_propose_delta = \\".*\\"#timeout_propose_delta = \\"$TIMEOUT_PROPOSE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote = \\".*\\"#timeout_prevote = \\"$TIMEOUT_PREVOTE\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_prevote_delta = \\".*\\"#timeout_prevote_delta = \\"$TIMEOUT_PREVOTE_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit = \\".*\\"#timeout_precommit = \\"$TIMEOUT_PRECOMMIT\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_precommit_delta = \\".*\\"#timeout_precommit_delta = \\"$TIMEOUT_PRECOMMIT_DELTA\\"#g" $CHAIN_DIR/config/config.toml
sed -i -e "s#timeout_commit = \\".*\\"#timeout_commit = \\"$TIMEOUT_COMMIT\\"#g" $CHAIN_DIR/config/config.toml
",
      "updateGenesis.sh": "#!/bin/bash

DENOM="\${DENOM:=axpla}"
CHAIN_BIN="\${CHAIN_BIN:=xplad}"
CHAIN_DIR="\${CHAIN_DIR:=$HOME/.xpla}"

set -eux

ls $CHAIN_DIR/config

echo "Update genesis.json file with updated local params"
sed -i -e "s/\\"stake\\"/\\"$DENOM\\"/g" $CHAIN_DIR/config/genesis.json
sed -i "s/\\"time_iota_ms\\": \\".*\\"/\\"time_iota_ms\\": \\"$TIME_IOTA_MS\\"/" $CHAIN_DIR/config/genesis.json

echo "Update max gas param"
jq -r '.consensus.params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update staking unbonding time and slashing jail time"
jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update gov params"
jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

echo "Update evm params"
jq -r '.app_state.evm.params.evm_denom |= "'$DENOM'"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json

$CHAIN_BIN tendermint show-node-id
",
    },
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app.kubernetes.io/component": "chain",
        "app.kubernetes.io/managed-by": "starship",
        "app.kubernetes.io/name": "setup-scripts-xpla-1-1",
        "app.kubernetes.io/part-of": "xpla_1-1",
        "app.kubernetes.io/role": "setup-scripts",
        "app.kubernetes.io/version": "4.0.0-alpha.0",
        "starship.io/chain-id": "xpla_1-1",
        "starship.io/chain-name": "xpla",
        "starship.io/name": "xpla",
      },
      "name": "setup-scripts-xpla-1-1",
    },
  },
}
`;

exports[`BuilderManager Config Files Tests Config: xpla should have proper file organization for xpla: xpla-file-structure 1`] = `
{
  "configmaps": [
    "keys.yaml",
    "setup-scripts.yaml",
  ],
  "registry": [
    "deployment.yaml",
    "service.yaml",
    "xpla-1-1-configmap.yaml",
  ],
  "xpla": [
    "genesis-patch-configmap.yaml",
    "genesis-service.yaml",
    "genesis-statefulset.yaml",
    "setup-scripts-configmap.yaml",
  ],
}
`;

exports[`BuilderManager Config Files Tests Config: xpla should have proper file organization for xpla: xpla-resource-counts 1`] = `
{
  "ConfigMap": 5,
  "Deployment": 1,
  "Service": 2,
  "StatefulSet": 1,
}
`;

exports[`BuilderManager Config Files Tests Cross-Config Analysis should maintain consistent file organization patterns across all configs: all-configs-file-structures 1`] = `
{
  "agoric": {
    "agoric": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "agoric-3-configmap.yaml",
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-agoric-cosmos-configmap.yaml",
      "hermes-agoric-cosmos-service.yaml",
      "hermes-agoric-cosmos-statefulset.yaml",
    ],
  },
  "build-chain": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "persistencecore": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "registry": [
      "core-1-configmap.yaml",
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-persistence-cosmos-configmap.yaml",
      "hermes-persistence-cosmos-service.yaml",
      "hermes-persistence-cosmos-statefulset.yaml",
    ],
  },
  "eth": {
    "ethereum": [
      "config-configmap.yaml",
      "ethereum-statefulset.yaml",
      "service-service.yaml",
    ],
  },
  "eth-lite": {
    "ethereum": [
      "config-configmap.yaml",
      "ethereum-statefulset.yaml",
      "service-service.yaml",
    ],
  },
  "evmos": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "evmos": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "evmos-9000-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-evmos-cosmos-configmap.yaml",
      "hermes-evmos-cosmos-service.yaml",
      "hermes-evmos-cosmos-statefulset.yaml",
    ],
  },
  "hyperweb": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "frontend": [
      "playground-deployment.yaml",
      "playground-service.yaml",
    ],
    "hyperweb": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "registry": [
      "deployment.yaml",
      "service.yaml",
      "test-hyperweb-1-configmap.yaml",
    ],
  },
  "ingress-monitoring-full": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "explorer": [
      "configmap.yaml",
      "deployment.yaml",
      "service.yaml",
    ],
    "frontend": [
      "web-app-deployment.yaml",
      "web-app-service.yaml",
    ],
    "ingress": [
      "letsencrypt-prod-issuer.yaml",
      "nginx-ingress-ingress.yaml",
    ],
    "monitoring": [
      "grafana-dashboard-providers-configmap.yaml",
      "grafana-dashboards-configmap.yaml",
      "grafana-datasources-configmap.yaml",
      "grafana-deployment.yaml",
      "grafana-service.yaml",
      "prometheus-clusterrole.yaml",
      "prometheus-clusterrolebinding.yaml",
      "prometheus-config-configmap.yaml",
      "prometheus-deployment.yaml",
      "prometheus-service.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-osmos-cosmos-configmap.yaml",
      "hermes-osmos-cosmos-service.yaml",
      "hermes-osmos-cosmos-statefulset.yaml",
    ],
  },
  "ingress-only": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "explorer": [
      "configmap.yaml",
      "deployment.yaml",
      "service.yaml",
    ],
    "frontend": [
      "my-app-deployment.yaml",
      "my-app-service.yaml",
    ],
    "ingress": [
      "cert-issuer-issuer.yaml",
      "nginx-ingress-ingress.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "deployment.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
  },
  "injective": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "injective": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "injective-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-injective-cosmos-configmap.yaml",
      "hermes-injective-cosmos-service.yaml",
      "hermes-injective-cosmos-statefulset.yaml",
    ],
  },
  "multi-relayer": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "juno": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "juno-2-configmap.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-juno-cosmos-configmap.yaml",
      "hermes-juno-cosmos-service.yaml",
      "hermes-juno-cosmos-statefulset.yaml",
      "hermes-osmos-cosmos-configmap.yaml",
      "hermes-osmos-cosmos-service.yaml",
      "hermes-osmos-cosmos-statefulset.yaml",
      "hermes-osmosis-juno-configmap.yaml",
      "hermes-osmosis-juno-service.yaml",
      "hermes-osmosis-juno-statefulset.yaml",
    ],
  },
  "multi-validator": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "registry": [
      "deployment.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
  },
  "multi-validator-starship-faucet": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "registry": [
      "deployment.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
  },
  "neutron": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "neutron": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "ics-proposal-configmap.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "neutron-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-neutron-cosmos-configmap.yaml",
      "hermes-neutron-cosmos-service.yaml",
      "hermes-neutron-cosmos-statefulset.yaml",
    ],
  },
  "neutron-relayer": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "neutron": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "ics-proposal-configmap.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "neutron-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-neutron-cosmos-configmap.yaml",
      "hermes-neutron-cosmos-service.yaml",
      "hermes-neutron-cosmos-statefulset.yaml",
      "neutron-query-relayer-nqr-neutron-cosmos-configmap.yaml",
      "neutron-query-relayer-nqr-neutron-cosmos-service.yaml",
      "neutron-query-relayer-nqr-neutron-cosmos-statefulset.yaml",
    ],
  },
  "noble": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "noble": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "noble-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-noble-cosmos-configmap.yaml",
      "hermes-noble-cosmos-service.yaml",
      "hermes-noble-cosmos-statefulset.yaml",
    ],
  },
  "one-chain": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "osmosis": [
      "genesis-patch-configmap.yaml",
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "deployment.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
  },
  "one-chain-cometmock": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "cometmock-service.yaml",
      "cometmock-statefulset.yaml",
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
  },
  "one-chain-cosmjs-faucet": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "deployment.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
  },
  "one-chain-custom-scripts": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "deployment.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
  },
  "one-cosmoshub-cosmjs-faucet": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "service.yaml",
    ],
  },
  "one-custom-chain": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "custom": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "custom-1-configmap.yaml",
      "deployment.yaml",
      "service.yaml",
    ],
  },
  "simapp": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "registry": [
      "deployment.yaml",
      "service.yaml",
      "simapp-configmap.yaml",
    ],
    "simapp": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
  },
  "three-chain": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "juno": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "juno-2-configmap.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-relayer-configmap.yaml",
      "hermes-relayer-service.yaml",
      "hermes-relayer-statefulset.yaml",
    ],
  },
  "two-chain": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "explorer": [
      "configmap.yaml",
      "deployment.yaml",
      "service.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-osmos-cosmos-configmap.yaml",
      "hermes-osmos-cosmos-service.yaml",
      "hermes-osmos-cosmos-statefulset.yaml",
    ],
  },
  "two-chain-cometmock": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "cometmock-service.yaml",
      "cometmock-statefulset.yaml",
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
    "osmosis": [
      "cometmock-service.yaml",
      "cometmock-statefulset.yaml",
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
  },
  "two-chain-cosmos": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-osmos-cosmos-configmap.yaml",
      "hermes-osmos-cosmos-service.yaml",
      "hermes-osmos-cosmos-statefulset.yaml",
    ],
  },
  "two-chain-gorelayer": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "go-relayer-osmos-cosmos-configmap.yaml",
      "go-relayer-osmos-cosmos-statefulset.yaml",
    ],
  },
  "two-chain-monitoring": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "cosmoshub": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "monitoring": [
      "grafana-dashboard-providers-configmap.yaml",
      "grafana-dashboards-configmap.yaml",
      "grafana-datasources-configmap.yaml",
      "grafana-deployment.yaml",
      "grafana-service.yaml",
      "prometheus-clusterrole.yaml",
      "prometheus-clusterrolebinding.yaml",
      "prometheus-config-configmap.yaml",
      "prometheus-deployment.yaml",
      "prometheus-service.yaml",
    ],
    "osmosis": [
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
      "validator-service.yaml",
      "validator-statefulset.yaml",
    ],
    "registry": [
      "cosmoshub-4-configmap.yaml",
      "deployment.yaml",
      "osmosis-1-configmap.yaml",
      "service.yaml",
    ],
    "relayer": [
      "hermes-osmos-cosmos-configmap.yaml",
      "hermes-osmos-cosmos-service.yaml",
      "hermes-osmos-cosmos-statefulset.yaml",
    ],
  },
  "xpla": {
    "configmaps": [
      "keys.yaml",
      "setup-scripts.yaml",
    ],
    "registry": [
      "deployment.yaml",
      "service.yaml",
      "xpla-1-1-configmap.yaml",
    ],
    "xpla": [
      "genesis-patch-configmap.yaml",
      "genesis-service.yaml",
      "genesis-statefulset.yaml",
      "setup-scripts-configmap.yaml",
    ],
  },
}
`;

exports[`BuilderManager Config Files Tests Cross-Config Analysis should maintain consistent file organization patterns across all configs: all-configs-resource-counts 1`] = `
{
  "agoric": {
    "ConfigMap": 7,
    "Deployment": 1,
    "Service": 4,
    "StatefulSet": 3,
  },
  "build-chain": {
    "ConfigMap": 7,
    "Deployment": 1,
    "Service": 6,
    "StatefulSet": 5,
  },
  "eth": {
    "ConfigMap": 1,
    "Service": 1,
    "StatefulSet": 1,
  },
  "eth-lite": {
    "ConfigMap": 1,
    "Service": 1,
    "StatefulSet": 1,
  },
  "evmos": {
    "ConfigMap": 7,
    "Deployment": 1,
    "Service": 5,
    "StatefulSet": 4,
  },
  "hyperweb": {
    "ConfigMap": 4,
    "Deployment": 2,
    "Service": 4,
    "StatefulSet": 2,
  },
  "ingress-monitoring-full": {
    "ClusterRole": 1,
    "ClusterRoleBinding": 1,
    "ConfigMap": 12,
    "Deployment": 5,
    "Ingress": 1,
    "Issuer": 1,
    "Service": 10,
    "StatefulSet": 5,
  },
  "ingress-only": {
    "ConfigMap": 5,
    "Deployment": 3,
    "Ingress": 1,
    "Issuer": 1,
    "Service": 4,
    "StatefulSet": 1,
  },
  "injective": {
    "ConfigMap": 7,
    "Deployment": 1,
    "Service": 5,
    "StatefulSet": 4,
  },
  "multi-relayer": {
    "ConfigMap": 11,
    "Deployment": 1,
    "Service": 7,
    "StatefulSet": 6,
  },
  "multi-validator": {
    "ConfigMap": 4,
    "Deployment": 1,
    "Service": 3,
    "StatefulSet": 2,
  },
  "multi-validator-starship-faucet": {
    "ConfigMap": 4,
    "Deployment": 1,
    "Service": 3,
    "StatefulSet": 2,
  },
  "neutron": {
    "ConfigMap": 8,
    "Deployment": 1,
    "Service": 4,
    "StatefulSet": 3,
  },
  "neutron-relayer": {
    "ConfigMap": 9,
    "Deployment": 1,
    "Service": 5,
    "StatefulSet": 4,
  },
  "noble": {
    "ConfigMap": 7,
    "Deployment": 1,
    "Service": 4,
    "StatefulSet": 3,
  },
  "one-chain": {
    "ConfigMap": 5,
    "Deployment": 1,
    "Service": 2,
    "StatefulSet": 1,
  },
  "one-chain-cometmock": {
    "ConfigMap": 3,
    "Service": 2,
    "StatefulSet": 2,
  },
  "one-chain-cosmjs-faucet": {
    "ConfigMap": 4,
    "Deployment": 1,
    "Service": 2,
    "StatefulSet": 1,
  },
  "one-chain-custom-scripts": {
    "ConfigMap": 4,
    "Deployment": 1,
    "Service": 2,
    "StatefulSet": 1,
  },
  "one-cosmoshub-cosmjs-faucet": {
    "ConfigMap": 4,
    "Deployment": 1,
    "Service": 2,
    "StatefulSet": 1,
  },
  "one-custom-chain": {
    "ConfigMap": 4,
    "Deployment": 1,
    "Service": 2,
    "StatefulSet": 1,
  },
  "simapp": {
    "ConfigMap": 4,
    "Deployment": 1,
    "Service": 3,
    "StatefulSet": 2,
  },
  "three-chain": {
    "ConfigMap": 9,
    "Deployment": 1,
    "Service": 5,
    "StatefulSet": 4,
  },
  "two-chain": {
    "ConfigMap": 8,
    "Deployment": 2,
    "Service": 7,
    "StatefulSet": 5,
  },
  "two-chain-cometmock": {
    "ConfigMap": 4,
    "Service": 5,
    "StatefulSet": 5,
  },
  "two-chain-cosmos": {
    "ConfigMap": 7,
    "Deployment": 1,
    "Service": 6,
    "StatefulSet": 5,
  },
  "two-chain-gorelayer": {
    "ConfigMap": 7,
    "Deployment": 1,
    "Service": 5,
    "StatefulSet": 5,
  },
  "two-chain-monitoring": {
    "ClusterRole": 1,
    "ClusterRoleBinding": 1,
    "ConfigMap": 11,
    "Deployment": 3,
    "Service": 8,
    "StatefulSet": 5,
  },
  "xpla": {
    "ConfigMap": 5,
    "Deployment": 1,
    "Service": 2,
    "StatefulSet": 1,
  },
}
`;

exports[`BuilderManager Config Files Tests Cross-Config Analysis should validate that ingress and monitoring configs generate expected resources: ingress-monitoring-analysis 1`] = `
{
  "ingress-monitoring-full": {
    "clusterRoleCount": 1,
    "grafanaResourceCount": 1,
    "hasIngress": true,
    "hasMonitoring": true,
    "ingressResourceCount": 1,
    "issuerResourceCount": 1,
    "prometheusResourceCount": 1,
  },
  "ingress-only": {
    "clusterRoleCount": 0,
    "grafanaResourceCount": 0,
    "hasIngress": true,
    "hasMonitoring": undefined,
    "ingressResourceCount": 1,
    "issuerResourceCount": 1,
    "prometheusResourceCount": 0,
  },
  "two-chain-monitoring": {
    "clusterRoleCount": 1,
    "grafanaResourceCount": 1,
    "hasIngress": undefined,
    "hasMonitoring": true,
    "ingressResourceCount": 0,
    "issuerResourceCount": 0,
    "prometheusResourceCount": 1,
  },
}
`;
