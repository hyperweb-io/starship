---
# Source: devnet/templates/chains/cosmos/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: setup-scripts-simapp
data:
  build-chain.sh: |-
    #!/bin/bash
    
    set -euxo pipefail
    
    mkdir -p /tmp/chains $UPGRADE_DIR
    
    echo "Fetching code from tag"
    mkdir -p /tmp/chains/$CHAIN_NAME
    cd /tmp/chains/$CHAIN_NAME
    
    if [[ $CODE_TAG =~ ^[0-9a-fA-F]{40}$ ]]; then
      echo "Trying to fetch code from commit hash"
      curl -LO $CODE_REPO/archive/$CODE_TAG.zip
      unzip $CODE_TAG.zip
      code_dir=${CODE_REPO##*/}-${CODE_TAG}
    elif [[ $CODE_TAG = v* ]]; then
      echo "Trying to fetch code from tag with 'v' prefix"
      curl -LO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip
      unzip $CODE_TAG.zip
      code_dir=${CODE_REPO##*/}-${CODE_TAG#"v"}
    else
      echo "Trying to fetch code from tag or branch"
      if curl -fsLO $CODE_REPO/archive/refs/tags/$CODE_TAG.zip; then
        unzip $CODE_TAG.zip
        code_dir=${CODE_REPO##*/}-$CODE_TAG
      elif curl -fsLO $CODE_REPO/archive/refs/heads/$CODE_TAG.zip; then
        unzip $(echo $CODE_TAG | rev | cut -d "/" -f 1 | rev).zip
        code_dir=${CODE_REPO##*/}-${CODE_TAG/\//-}
      else
        echo "Tag or branch '$CODE_TAG' not found"
        exit 1
      fi
    fi
    
    echo "Fetch wasmvm if needed"
    cd /tmp/chains/$CHAIN_NAME/$code_dir
    WASM_VERSION=$(cat go.mod | grep -oe "github.com/CosmWasm/wasmvm v[0-9.]*" | cut -d ' ' -f 2)
    if [[ WASM_VERSION != "" ]]; then
      mkdir -p /tmp/chains/libwasmvm_muslc
      cd /tmp/chains/libwasmvm_muslc
      curl -LO https://github.com/CosmWasm/wasmvm/releases/download/$WASM_VERSION/libwasmvm_muslc.x86_64.a
      cp libwasmvm_muslc.x86_64.a /lib/libwasmvm_muslc.a
    fi
    
    echo "Build chain binary"
    cd /tmp/chains/$CHAIN_NAME/$code_dir
    CGO_ENABLED=1 BUILD_TAGS="muslc linkstatic" LINK_STATICALLY=true LEDGER_ENABLED=false make install
    
    echo "Copy created binary to the upgrade directories"
    if [[ $UPGRADE_NAME == "genesis" ]]; then
      mkdir -p $UPGRADE_DIR/genesis/bin
      cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/genesis/bin
    else
      mkdir -p $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
      cp $GOBIN/$CHAIN_BIN $UPGRADE_DIR/upgrades/$UPGRADE_NAME/bin
    fi
    
    echo "Cleanup"
    rm -rf /tmp/chains/$CHAIN_NAME
    
  chain-rpc-ready.sh: |-
    #!/bin/bash
    # chain-rpc-ready.sh - Check if a CometBFT or Tendermint RPC service is ready
    # Usage: chain-rpc-ready.sh [RPC_URL]
    
    set -euo pipefail
    
    RPC_URL=${1:-"http://localhost:26657"}
    
    echo 1>&2 "Checking if $RPC_URL is ready..."
    
    # Check if the RPC URL is reachable,
    json=$(curl -s --connect-timeout 2 "$RPC_URL/status")
    
    # and the bootstrap block state has been validated,
    if [ "$(echo "$json" | jq -r '.result.sync_info | (.earliest_block_height < .latest_block_height)')" != true ]; then
      echo 1>&2 "$RPC_URL is not ready: bootstrap block state has not been validated"
      exit 1
    fi
    
    # and the node is not catching up.
    if [ "$(echo "$json" | jq -r .result.sync_info.catching_up)" != false ]; then
      echo 1>&2 "$RPC_URL is not ready: node is catching up"
      exit 1
    fi
    
    echo "$json" | jq -r .result
    exit 0
    
  create-genesis.sh: |-
    #!/bin/bash
    
    set -eux
    
    DENOM="${DENOM:=uosmo}"
    COINS="${COINS:=100000000000000000uosmo}"
    CHAIN_ID="${CHAIN_ID:=osmosis}"
    CHAIN_BIN="${CHAIN_BIN:=osmosisd}"
    CHAIN_DIR="${CHAIN_DIR:=$HOME/.osmosisd}"
    KEYS_CONFIG="${KEYS_CONFIG:=configs/keys.json}"
    
    FAUCET_ENABLED="${FAUCET_ENABLED:=true}"
    NUM_VALIDATORS="${NUM_VALIDATORS:=1}"
    NUM_RELAYERS="${NUM_RELAYERS:=0}"
    
    # check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
    CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")
    
    CHAIN_INIT_ID="$CHAIN_ID"
    if [ "$CHAIN_BIN" == "osmosisd" ]; then
      CHAIN_INIT_ID="test-1"
    fi
    jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN init $CHAIN_ID --chain-id $CHAIN_INIT_ID --recover
    sed -i -e "s/$CHAIN_INIT_ID/$CHAIN_ID/g" $CHAIN_DIR/config/genesis.json
    
    # Add genesis keys to the keyring and self delegate initial coins
    echo "Adding key...." $(jq -r ".genesis[0].name" $KEYS_CONFIG)
    jq -r ".genesis[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".genesis[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .genesis[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"
    
    # Add faucet key to the keyring and self delegate initial coins
    echo "Adding key...." $(jq -r ".faucet[0].name" $KEYS_CONFIG)
    jq -r ".faucet[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".faucet[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .faucet[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"
    
    # Add test keys to the keyring and self delegate initial coins
    echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
    jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $(jq -r ".keys[0].name" $KEYS_CONFIG) --recover --keyring-backend="test"
    $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $(jq -r .keys[0].name $KEYS_CONFIG) --keyring-backend="test") $COINS --keyring-backend="test"
    
    if [[ $FAUCET_ENABLED == "false" && $NUM_RELAYERS -gt "-1" ]];
    then
      ## Add relayers keys and delegate tokens
      for i in $(seq 0 $NUM_RELAYERS);
      do
        # Add relayer key and delegate tokens
        RELAYER_KEY_NAME="$(jq -r ".relayers[$i].name" $KEYS_CONFIG)"
        echo "Adding relayer key.... $RELAYER_KEY_NAME"
        jq -r ".relayers[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_KEY_NAME --recover --keyring-backend="test"
        $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
        # Add relayer-cli key and delegate tokens
        RELAYER_CLI_KEY_NAME="$(jq -r ".relayers_cli[$i].name" $KEYS_CONFIG)"
        echo "Adding relayer-cli key.... $RELAYER_CLI_KEY_NAME"
        jq -r ".relayers_cli[$i].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $RELAYER_CLI_KEY_NAME --recover --keyring-backend="test"
        $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $RELAYER_CLI_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
      done
    fi
    
    ## if faucet not enabled then add validator and relayer with index as keys and into gentx
    if [[ $FAUCET_ENABLED == "false" && $NUM_VALIDATORS -gt "1" ]];
    then
      ## Add validators key and delegate tokens
      for i in $(seq 0 $NUM_VALIDATORS);
      do
        VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
        echo "Adding validator key.... $VAL_KEY_NAME"
        jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test"
        $CHAIN_BIN $CHAIN_GENESIS_CMD add-genesis-account $($CHAIN_BIN keys show -a $VAL_KEY_NAME --keyring-backend="test") $COINS --keyring-backend="test"
      done
    fi
    
    echo "Creating gentx..."
    COIN=$(echo $COINS | cut -d ',' -f1)
    AMT=$(echo ${COIN//[!0-9]/} | sed -e "s/0000$//")
    $CHAIN_BIN $CHAIN_GENESIS_CMD gentx $(jq -r ".genesis[0].name" $KEYS_CONFIG) $AMT$DENOM --keyring-backend="test" --chain-id $CHAIN_ID
    
    echo "Output of gentx"
    cat $CHAIN_DIR/config/gentx/*.json | jq
    
    echo "Running collect-gentxs"
    $CHAIN_BIN $CHAIN_GENESIS_CMD collect-gentxs
    
    ls $CHAIN_DIR/config
    
  create-ics.sh: |-
    #!/bin/bash
    
    set -euxo pipefail
    
    DENOM="${DENOM:=uatom}"
    CHAIN_ID="${CHAIN_ID:=cosmoshub-1}"
    CHAIN_BIN="${CHAIN_BIN:=gaiad}"
    NODE_URL="${NODE_URL:=http://0.0.0.0:26657}"
    KEYS_CONFIG="${KEYS_CONFIG:=configs/keys.json}"
    
    PROPOSAL_FILE="${PROPOSAL_FILE}"
    KEY_NAME="ics-setup"
    MAX_RETRIES=3
    RETRY_INTERVAL=30
    SUBMIT_PROPOSAL_CMD=""
    
    add_key() {
      # Add test keys to the keyring and self delegate initial coins
      echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
      jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
      echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
    }
    
    get_validator_address() {
      echo "Getting validator address..."
      VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
      echo "Selected validator address: $VALIDATOR_ADDRESS"
    }
    
    stake_tokens() {
      COINS="10000000$DENOM"
      echo "Staking tokens..."
      $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes
      sleep 5
    }
    
    determine_proposal_command() {
      echo "Determining the correct command to submit proposals..."
      HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
      if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
        SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
      else
        SUBMIT_PROPOSAL_CMD="submit-proposal"
      fi
      echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
    }
    
    submit_proposal() {
      echo "Get all proposals"
      PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
      if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
        echo "No existing proposals found. Proceeding to submit a new proposal."
      else
        echo "Existing proposals: $PROPOSALS_OUTPUT"
      fi
    
      echo "Submit gov proposal on chain"
      PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes)
      echo $PROPOSAL_TX
    
      # Extract JSON part from the output
      TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
      if [ -n "$TX_HASH" ]; then
        echo "Transaction hash: $TX_HASH"
      else
        echo "Failed to submit proposal. Output was not as expected."
        exit 1
      fi
    
      sleep 5
    }
    
    get_proposal_id() {
      echo "Getting proposal ID"
      PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
      LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
      if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
        PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
        if [ -n "$PROPOSAL_ID" ]; then
          echo "Proposal ID: $PROPOSAL_ID"
          return 0
        fi
      fi
      echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
      exit 1
    }
    
    vote_proposal() {
      echo "Voting on proposal"
      $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes
      sleep 5
    }
    
    wait_for_proposal_to_pass() {
      echo "Waiting for proposal to pass"
      for ((i=1; i<=$MAX_RETRIES; i++)); do
        STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
        if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
          echo "Proposal has passed!"
          return 0
        else
          echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
          sleep $RETRY_INTERVAL
        fi
      done
      echo "Proposal did not pass after $MAX_RETRIES attempts."
      exit 1
    }
    
    main() {
      add_key
      get_validator_address
      stake_tokens
      determine_proposal_command
      submit_proposal
      get_proposal_id
      vote_proposal
      wait_for_proposal_to_pass
    }
    
    main
    
  create-validator.sh: |-
    #!/bin/bash
    
    DENOM="${DENOM:=uosmo}"
    CHAIN_BIN="${CHAIN_BIN:=osmosisd}"
    CHAIN_DIR="${CHAIN_DIR:=$HOME/.osmosisd}"
    KEYS_CONFIG="${KEYS_CONFIG:=configs/keys.json}"
    VAL_NAME="${VAL_NAME:=osmosis}"
    NODE_URL="${NODE_URL:=http://0.0.0.0:26657}"
    NODE_ARGS="${NODE_ARGS}"
    GAS="${GAS:=auto}"
    
    set -eux
    
    # Wait for the node to be synced
    max_tries=10
    while [[ $($CHAIN_BIN status --output json --node $NODE_URL 2>&1 | jq ".SyncInfo.catching_up") == true ]]
    do
      if [[ max_tries -lt 0 ]]; then echo "Not able to sync with genesis node"; exit 1; fi
      echo "Still syncing... Sleeping for 15 secs. Tries left $max_tries"
      ((max_tries--))
      sleep 30
    done
    
    # Function to compare version numbers
    version_compare() {
        version1="$1"
        version2="$2"
        if [[ "$(printf '%s\n' "$version1" "$version2" | sort -V | head -n 1)" == "$version1" ]]; then
            return 1 # version1 is greater
        else
            return 0 # version2 is greater or equal
        fi
    }
    
    # Check if cosmos_sdk_version is greater than a specified version
    is_greater() {
        version_compare "$1" "$2"
        return $?
    }
    
    function cosmos-sdk-version-v50() {
      # Content for the validator.json file
      json_content='{
        "pubkey": '$($CHAIN_BIN tendermint show-validator $NODE_ARGS)',
        "amount": "5000000000'$DENOM'",
        "moniker": "'$VAL_NAME'",
        "commission-rate": "0.1",
        "commission-max-rate": "0.2",
        "commission-max-change-rate": "0.01",
        "min-self-delegation": "1000000"
      }'
      echo "$json_content" > /validator.json
      cat /validator.json
    
      # Run create validator tx command
      echo "Running txn for create-validator"
      $CHAIN_BIN tx staking create-validator /validator.json \
        --node $NODE_URL \
        --chain-id $CHAIN_ID \
        --from $VAL_NAME \
        --fees 100000$DENOM \
        --keyring-backend="test" \
        --output json \
        --gas $GAS \
        --gas-adjustment 1.5 $NODE_ARGS --yes > /validator.log
    
      cat /validator.log | jq
    }
    
    function cosmos-sdk-version-default() {
      # Run create validator tx command
      echo "Running txn for create-validator"
      args=''
      if [[ $($CHAIN_BIN tx staking create-validator --help | grep -c "min-self-delegation") -gt 0 ]];
      then
        args+='--min-self-delegation=1000000'
      fi
      $CHAIN_BIN keys list --keyring-backend test --output json --home $CHAIN_DIR | jq
      $CHAIN_BIN tx staking create-validator \
        --node $NODE_URL \
        --pubkey=$($CHAIN_BIN tendermint show-validator $NODE_ARGS) \
        --moniker $VAL_NAME \
        --amount 5000000000$DENOM \
        --chain-id $CHAIN_ID \
        --from $VAL_NAME \
        --commission-rate="0.10" \
        --commission-max-rate="0.20" \
        --commission-max-change-rate="0.01" \
        --keyring-backend test \
        --home $CHAIN_DIR \
        --fees 100000$DENOM \
        --gas $GAS \
        --output json \
        --gas-adjustment 1.5 $args $NODE_ARGS --yes > /validator.log
    
      cat /validator.log | jq
    }
    
    set +e
    # Fetch the cosmos-sdk version to be able to perform the create-validator tx
    cosmos_sdk_version=$($CHAIN_BIN version --long | sed -n 's/cosmos_sdk_version: \(.*\)/\1/p')
    echo "cosmos_sdk_version: $cosmos_sdk_version"
    set -e
    
    if is_greater "$cosmos_sdk_version" "v0.50.0"; then
      echo "cosmos_sdk_version is greater than v0.50.0, running create-validator tx with new format"
      cosmos-sdk-version-v50
    else
      echo "cosmos_sdk_version is less than v0.50.0, running create-validator tx with old format"
      cosmos-sdk-version-default
    fi
    
  ibc-connection.sh: |-
    #!/bin/bash
    
    REGISTRY_URL="$1"
    CHAIN_1="$2"
    CHAIN_2="$3"
    
    set -eux
    
    function connection_id() {
      CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
      echo $CONNECTION_ID
    }
    
    echo "Try to get connection id, if failed, wait for 2 seconds and try again"
    max_tries=20
    while [[ max_tries -gt 0 ]]
    do
      id=$(connection_id)
      if [[ -n "$id" ]]; then
        echo "Found connection id: $id"
        exit 0
      fi
      echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
      ((max_tries--))
      sleep 10
    done
    
  transfer-tokens.sh: |-
    #!/bin/bash
    
    ADDRESS="$1"
    DENOM="$2"
    FAUCET_URL="$3"
    FAUCET_ENABLED="$4"
    
    set -eux
    
    function transfer_token() {
      status_code=$(curl --header "Content-Type: application/json" \
        --request POST --write-out %{http_code} --silent --output /dev/null \
        --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \
        $FAUCET_URL)
      echo $status_code
    }
    
    if [[ $FAUCET_ENABLED == "false" ]];
    then
      echo "Faucet not enabled... skipping transfer token from faucet"
      exit 0
    fi
    
    echo "Try to send tokens, if failed, wait for 5 seconds and try again"
    max_tries=5
    while [[ max_tries -gt 0 ]]
    do
      status_code=$(transfer_token)
      if [[ "$status_code" -eq 200 ]]; then
        echo "Successfully sent tokens"
        exit 0
      fi
      echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
      ((max_tries--))
      sleep 2
    done
    
  update-config.sh: |-
    #!/bin/bash
    
    CHAIN_ID="${CHAIN_ID:=osmosis}"
    CHAIN_DIR="${CHAIN_DIR:=$HOME/.osmosisd}"
    KEYS_CONFIG="${KEYS_CONFIG:=configs/keys.json}"
    
    set -eux
    
    ls $CHAIN_DIR
    
    
    echo "Update config.toml file"
    sed -i -e 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $CHAIN_DIR/config/config.toml
    sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
    sed -i -e 's/seeds = ".*"/seeds = ""/g' $CHAIN_DIR/config/config.toml
    sed -i -e 's#cors_allowed_origins = \[\]#cors_allowed_origins = \["*"\]#g' $CHAIN_DIR/config/config.toml
    sed -i -e 's/index_all_keys = false/index_all_keys = true/g' $CHAIN_DIR/config/config.toml
    
    echo "Update client.toml file"
    sed -i -e 's#keyring-backend = "os"#keyring-backend = "test"#g' $CHAIN_DIR/config/client.toml
    sed -i -e 's#output = "text"#output = "json"#g' $CHAIN_DIR/config/client.toml
    sed -i -e "s#chain-id = \"\"#chain-id = \"$CHAIN_ID\"#g" $CHAIN_DIR/config/client.toml
    
    
    echo "Update app.toml file"
    sed -i -e "s#minimum-gas-prices = \".*\"#minimum-gas-prices = \"0$DENOM\"#g" $CHAIN_DIR/config/app.toml
    sed -i -e "s#pruning = \".*\"#pruning = \"default\"#g" $CHAIN_DIR/config/app.toml
    sed -i -e 's/enable-unsafe-cors = false/enable-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
    sed -i -e 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $CHAIN_DIR/config/app.toml
    sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
    sed -i -e 's/swagger = false/swagger = true/g' $CHAIN_DIR/config/app.toml
    sed -i -e 's/enable = false/enable = true/g' $CHAIN_DIR/config/app.toml
    sed -i -e 's/enabled = false/enabled = true/g' $CHAIN_DIR/config/app.toml
    
    
    function get_next_line_number() {
      local txt=$1
      local file=$2
      local line_number=$(grep -n "$txt" $file | cut -d: -f1 | head -1)
      echo $((line_number + 1))
    }
    
    line_number=$(get_next_line_number "Address defines the API server to listen on." $CHAIN_DIR/config/app.toml)
    sed -i -e "${line_number}s#address = \".*\"#address = \"tcp://0.0.0.0:1317\"#g" $CHAIN_DIR/config/app.toml
    
    line_number=$(get_next_line_number "Address defines the gRPC server address to bind to." $CHAIN_DIR/config/app.toml)
    sed -i -e "${line_number}s#address = \".*\"#address = \"0.0.0.0:9090\"#g" $CHAIN_DIR/config/app.toml
    
    line_number=$(get_next_line_number "Address defines the gRPC-web server address to bind to." $CHAIN_DIR/config/app.toml)
    sed -i -e "${line_number}s#address = \".*\"#address = \"0.0.0.0:9091\"#g" $CHAIN_DIR/config/app.toml
    
    if [ "$METRICS" == "true" ]; then
      sed -i -e "s/prometheus = false/prometheus = true/g" $CHAIN_DIR/config/config.toml
    
      line_number=$(get_next_line_number "PrometheusRetentionTime, when positive, enables a Prometheus metrics sink." $CHAIN_DIR/config/app.toml)
      sed -i -e "${line_number}s/prometheus-retention-time = 0/prometheus-retention-time = 3600/g" $CHAIN_DIR/config/app.toml
    fi
    
    echo "Update consensus params in config.toml"
    sed -i -e "s#timeout_propose = \".*\"#timeout_propose = \"$TIMEOUT_PROPOSE\"#g" $CHAIN_DIR/config/config.toml
    sed -i -e "s#timeout_propose_delta = \".*\"#timeout_propose_delta = \"$TIMEOUT_PROPOSE_DELTA\"#g" $CHAIN_DIR/config/config.toml
    sed -i -e "s#timeout_prevote = \".*\"#timeout_prevote = \"$TIMEOUT_PREVOTE\"#g" $CHAIN_DIR/config/config.toml
    sed -i -e "s#timeout_prevote_delta = \".*\"#timeout_prevote_delta = \"$TIMEOUT_PREVOTE_DELTA\"#g" $CHAIN_DIR/config/config.toml
    sed -i -e "s#timeout_precommit = \".*\"#timeout_precommit = \"$TIMEOUT_PRECOMMIT\"#g" $CHAIN_DIR/config/config.toml
    sed -i -e "s#timeout_precommit_delta = \".*\"#timeout_precommit_delta = \"$TIMEOUT_PRECOMMIT_DELTA\"#g" $CHAIN_DIR/config/config.toml
    sed -i -e "s#timeout_commit = \".*\"#timeout_commit = \"$TIMEOUT_COMMIT\"#g" $CHAIN_DIR/config/config.toml
    
  update-genesis.sh: |-
    #!/bin/bash
    
    DENOM="${DENOM:=uosmo}"
    CHAIN_BIN="${CHAIN_BIN:=osmosisd}"
    CHAIN_DIR="${CHAIN_DIR:=$HOME/.osmosisd}"
    
    set -eux
    
    ls $CHAIN_DIR/config
    
    echo "Update genesis.json file with updated local params"
    sed -i -e "s/\"stake\"/\"$DENOM\"/g" $CHAIN_DIR/config/genesis.json
    sed -i "s/\"time_iota_ms\": \".*\"/\"time_iota_ms\": \"$TIME_IOTA_MS\"/" $CHAIN_DIR/config/genesis.json
    
    echo "Update max gas param"
    jq -r '.consensus_params.block.max_gas |= "100000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
    
    echo "Update staking unbonding time and slashing jail time"
    jq -r '.app_state.staking.params.unbonding_time |= "300s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
    jq -r '.app_state.slashing.params.downtime_jail_duration |= "60s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
    
    # overrides for older sdk versions, before 0.47
    function gov_overrides_sdk_v46() {
      jq -r '.app_state.gov.deposit_params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.gov.voting_params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.gov.tally_params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.gov.tally_params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.gov.tally_params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
    }
    
    # overrides for newer sdk versions, post 0.47
    function gov_overrides_sdk_v47() {
      jq -r '.app_state.gov.params.max_deposit_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.gov.params.min_deposit[0].amount |= "10"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.gov.params.voting_period |= "30s"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.gov.params.quorum |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.gov.params.threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.gov.params.veto_threshold |= "0.000000000000000000"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
    }
    
    if [ "$(jq -r '.app_state.feemarket.params' $CHAIN_DIR/config/genesis.json)" != "null" ]; then
      jq -r '.app_state.feemarket.params.min_base_gas_price |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.feemarket.params.beta |= "0"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
      jq -r '.app_state.feemarket.state.base_gas_price |= "0.0025"' $CHAIN_DIR/config/genesis.json > /tmp/genesis.json; mv /tmp/genesis.json $CHAIN_DIR/config/genesis.json
    fi
    
    if [ "$(jq -r '.app_state.gov.params' $CHAIN_DIR/config/genesis.json)" == "null" ]; then
      gov_overrides_sdk_v46
    else
      gov_overrides_sdk_v47
    fi
    
    $CHAIN_BIN tendermint show-node-id
---
# Source: devnet/templates/chains/cosmos/configmap.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keys
data:
  keys.json: |-
    {
      "genesis": [
        {
          "name": "genesis",
          "type": "local",
          "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
        }
      ],
      "validators": [
        {
          "name": "validator",
          "type": "local",
          "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
        }
      ],
      "faucet": [
        {
          "name": "faucet",
          "type": "local",
          "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
        }
      ],
      "keys": [
        {
          "name": "test1",
          "type": "local",
          "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
        },
        {
          "name": "test2",
          "type": "local",
          "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
        },
        {
          "name": "test3",
          "type": "local",
          "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
        }
      ],
      "relayers": [
        {
          "name": "relayer1",
          "type": "local",
          "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
        },
        {
          "name": "relayer2",
          "type": "local",
          "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
        },
        {
          "name": "relayer3",
          "type": "local",
          "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
        },
        {
          "name": "relayer4",
          "type": "local",
          "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
        },
        {
          "name": "relayer5",
          "type": "local",
          "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
        }
      ],
      "relayers_cli": [
        {
          "name": "relayer-cli-1",
          "type": "local",
          "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
        },
        {
          "name": "relayer-cli-2",
          "type": "local",
          "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
        },
        {
          "name": "relayer-cli-3",
          "type": "local",
          "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
        },
        {
          "name": "relayer-cli-4",
          "type": "local",
          "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
        },
        {
          "name": "relayer-cli-5",
          "type": "local",
          "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
        }
      ]
    }
---
# Source: devnet/templates/chains/cosmos/configmap.yaml
# Configmap with setup-scripts that are not chain specific
apiVersion: v1
kind: ConfigMap
metadata:
  name: setup-scripts
data:
  transfer-tokens.sh: |-
    #!/bin/bash
    
    ADDRESS="$1"
    DENOM="$2"
    FAUCET_URL="$3"
    FAUCET_ENABLED="$4"
    
    set -eux
    
    function transfer_token() {
      status_code=$(curl --header "Content-Type: application/json" \
        --request POST --write-out %{http_code} --silent --output /dev/null \
        --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \
        $FAUCET_URL)
      echo $status_code
    }
    
    if [[ $FAUCET_ENABLED == "false" ]];
    then
      echo "Faucet not enabled... skipping transfer token from faucet"
      exit 0
    fi
    
    echo "Try to send tokens, if failed, wait for 5 seconds and try again"
    max_tries=5
    while [[ max_tries -gt 0 ]]
    do
      status_code=$(transfer_token)
      if [[ "$status_code" -eq 200 ]]; then
        echo "Successfully sent tokens"
        exit 0
      fi
      echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
      ((max_tries--))
      sleep 2
    done
    
  ibc-connection.sh: |-
    #!/bin/bash
    
    REGISTRY_URL="$1"
    CHAIN_1="$2"
    CHAIN_2="$3"
    
    set -eux
    
    function connection_id() {
      CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
      echo $CONNECTION_ID
    }
    
    echo "Try to get connection id, if failed, wait for 2 seconds and try again"
    max_tries=20
    while [[ max_tries -gt 0 ]]
    do
      id=$(connection_id)
      if [[ -n "$id" ]]; then
        echo "Found connection id: $id"
        exit 0
      fi
      echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
      ((max_tries--))
      sleep 10
    done
    
  create-ics.sh: |-
    #!/bin/bash
    
    set -euxo pipefail
    
    DENOM="${DENOM:=uatom}"
    CHAIN_ID="${CHAIN_ID:=cosmoshub-1}"
    CHAIN_BIN="${CHAIN_BIN:=gaiad}"
    NODE_URL="${NODE_URL:=http://0.0.0.0:26657}"
    KEYS_CONFIG="${KEYS_CONFIG:=configs/keys.json}"
    
    PROPOSAL_FILE="${PROPOSAL_FILE}"
    KEY_NAME="ics-setup"
    MAX_RETRIES=3
    RETRY_INTERVAL=30
    SUBMIT_PROPOSAL_CMD=""
    
    add_key() {
      # Add test keys to the keyring and self delegate initial coins
      echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
      jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
      echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
    }
    
    get_validator_address() {
      echo "Getting validator address..."
      VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
      echo "Selected validator address: $VALIDATOR_ADDRESS"
    }
    
    stake_tokens() {
      COINS="10000000$DENOM"
      echo "Staking tokens..."
      $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes
      sleep 5
    }
    
    determine_proposal_command() {
      echo "Determining the correct command to submit proposals..."
      HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
      if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
        SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
      else
        SUBMIT_PROPOSAL_CMD="submit-proposal"
      fi
      echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
    }
    
    submit_proposal() {
      echo "Get all proposals"
      PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
      if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
        echo "No existing proposals found. Proceeding to submit a new proposal."
      else
        echo "Existing proposals: $PROPOSALS_OUTPUT"
      fi
    
      echo "Submit gov proposal on chain"
      PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes)
      echo $PROPOSAL_TX
    
      # Extract JSON part from the output
      TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
      if [ -n "$TX_HASH" ]; then
        echo "Transaction hash: $TX_HASH"
      else
        echo "Failed to submit proposal. Output was not as expected."
        exit 1
      fi
    
      sleep 5
    }
    
    get_proposal_id() {
      echo "Getting proposal ID"
      PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
      LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
      if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
        PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
        if [ -n "$PROPOSAL_ID" ]; then
          echo "Proposal ID: $PROPOSAL_ID"
          return 0
        fi
      fi
      echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
      exit 1
    }
    
    vote_proposal() {
      echo "Voting on proposal"
      $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes
      sleep 5
    }
    
    wait_for_proposal_to_pass() {
      echo "Waiting for proposal to pass"
      for ((i=1; i<=$MAX_RETRIES; i++)); do
        STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
        if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
          echo "Proposal has passed!"
          return 0
        else
          echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
          sleep $RETRY_INTERVAL
        fi
      done
      echo "Proposal did not pass after $MAX_RETRIES attempts."
      exit 1
    }
    
    main() {
      add_key
      get_validator_address
      stake_tokens
      determine_proposal_command
      submit_proposal
      get_proposal_id
      vote_proposal
      wait_for_proposal_to_pass
    }
    
    main
---
# Source: devnet/templates/registry.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-simapp
data:
  assetlist.json: |-
    {
      "$schema": "../assetlist.schema.json",
      "chain_name": "simapp",
      "assets": [
      {
        "description": "The denom for token stake",
        "base": "stake",
        "name": "stake",
        "display": "stake",
        "symbol": "STAKE",
        "denom_units": [
          {
            "denom": "stake",
            "exponent": 0
          },
          {
            "denom": "stake",
            "exponent": 6
          }
        ],
        "coingecko_id": "simapp"
      }
      ]
    }
  chain.json: |-
    {
      "$schema": "../chain.schema.json",
      "chain_name": "simapp",
      "status": "live",
      "network_type": "devnet",
      "chain_id": "simapp",
      "pretty_name": "Sim App Devnet",
      "bech32_prefix": "cosmos",
      "daemon_name": "simd",
      "node_home": "/root/.simapp",
      "key_algos": [
        "secp256k1"
      ],
      "slip44": "118",
      "fees": {
        "fee_tokens": [
          {
            "denom": "stake",
            "fixed_min_gas_price": 0,
            "low_gas_price": 0,
            "average_gas_price": 0.025,
            "high_gas_price": 0.04
          }
        ]
      },
      "staking": {
        "staking_tokens": [
          {
            "denom": "stake"
          }
        ],
        "lock_duration": {
          "time": "1209600s"
        }
      },
      "codebase": {
        "git_repo": "https://github.com/cosmos/cosmos-sdk/tree/main/simapp",
        "compatible_versions": [],
        "binaries": {},
        "ics_enabled": [],
        "versions": [],
        "consensus": {
          "type": "tendermint"
        }
      },
      "peers": {
        "seeds": [],
        "persistent_peers": []
      }
    }
---
# Source: devnet/templates/chains/cosmos/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: simapp-genesis
  labels:
    app.kubernetes.io/name: simapp-genesis
spec:
  clusterIP: None
  ports:
    - name: address
      port: 26658
      protocol: TCP
      targetPort: 26658
    - name: grpc
      port: 9090
      protocol: TCP
      targetPort: 9090
    - name: grpc-web
      port: 9091
      protocol: TCP
      targetPort: 9091
    - name: p2p
      port: 26656
      protocol: TCP
      targetPort: 26656
    - name: rest
      port: 1317
      protocol: TCP
      targetPort: 1317
    - name: rpc
      port: 26657
      protocol: TCP
      targetPort: 26657
    - name: exposer
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: faucet
      port: 8000
      protocol: TCP
      targetPort: 8000
  selector:
    app.kubernetes.io/name: simapp-genesis
---
# Source: devnet/templates/chains/cosmos/service.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: simapp-validator
  labels:
    app.kubernetes.io/name: simapp-validator
spec:
  clusterIP: None
  ports:
    - name: address
      port: 26658
      protocol: TCP
      targetPort: 26658
    - name: grpc
      port: 9090
      protocol: TCP
      targetPort: 9090
    - name: grpc-web
      port: 9091
      protocol: TCP
      targetPort: 9091
    - name: p2p
      port: 26656
      protocol: TCP
      targetPort: 26656
    - name: rest
      port: 1317
      protocol: TCP
      targetPort: 1317
    - name: rpc
      port: 26657
      protocol: TCP
      targetPort: 26657
    - name: exposer
      port: 8081
      protocol: TCP
      targetPort: 8081
  selector:
    app.kubernetes.io/name: simapp-validator
---
# Source: devnet/templates/registry.yaml
apiVersion: v1
kind: Service
metadata:
  name: registry
  labels:
    app.kubernetes.io/name: registry
spec:
  clusterIP: None
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: grpc
      port: 9090
      protocol: TCP
      targetPort: 9090
  selector:
    app.kubernetes.io/name: registry
---
# Source: devnet/templates/registry.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: registry
      app.kubernetes.io/name: registry
  template:
    metadata:
      annotations:
        quality: release
        role: api-gateway
        sla: high
        tier: gateway
      labels:
        app.kubernetes.io/instance: registry
        app.kubernetes.io/type: registry
        app.kubernetes.io/name: registry
        app.kubernetes.io/rawname: registry
        app.kubernetes.io/version: 0.1.1
    spec:      
      initContainers:        
        - name: "wait-for-chains"
          image: "curlimages/curl"
          imagePullPolicy: Always
          env:
            - name: GENESIS_PORT
              value: "8081"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - /bin/sh
            - "-c"
            - |
              while [ $(curl -sw '%{http_code}' http://simapp-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
                echo "Genesis validator does not seem to be ready for: simapp. Waiting for it to start..."
                echo "Checking: http://simapp-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
                sleep 10;
              done
              echo "Ready to start"
              exit 0
          resources:    
            limits:
              cpu: 0.1
              memory: 100M
            requests:
              cpu: 0.1
              memory: 100M
      containers:
        - name: registry
          image: ghcr.io/hyperweb-io/starship/registry:20250205-544757d
          imagePullPolicy: Always
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: REGISTRY_CHAIN_CLIENT_IDS
              value: "simapp"
            - name: REGISTRY_CHAIN_CLIENT_NAMES
              value: "simapp"
            - name: REGISTRY_CHAIN_CLIENT_RPCS
              value: "http://simapp-genesis.$(NAMESPACE).svc.cluster.local:26657"
            - name: REGISTRY_CHAIN_API_RPCS
              value: "http://localhost:26657"
            - name: REGISTRY_CHAIN_API_GRPCS
              value: "http://localhost:9091"
            - name: REGISTRY_CHAIN_API_RESTS
              value: "http://localhost:1317"
            - name: REGISTRY_CHAIN_REGISTRY
              value: "/configs"
            - name: REGISTRY_CHAIN_CLIENT_EXPOSERS
              value: "http://simapp-genesis.$(NAMESPACE).svc.cluster.local:8081"
          command: [ "registry" ]
          resources:            
            limits:
              cpu: 0.1
              memory: 100M
            requests:
              cpu: 0.1
              memory: 100M
          volumeMounts:
            - mountPath: /configs/simapp
              name: registry-configs-simapp
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
      volumes:
        - name: registry-configs-simapp
          configMap:
            name: registry-simapp
---
# Source: devnet/templates/chains/cosmos/genesis.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: simapp-genesis
spec:
  serviceName: simapp-genesis
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: simapp
      app.kubernetes.io/name: simapp-genesis
  template:
    metadata:
      annotations:
        quality: release
        role: api-gateway
        sla: high
        tier: gateway
      labels:
        app.kubernetes.io/instance: simapp
        app.kubernetes.io/type: simapp
        app.kubernetes.io/name: simapp-genesis
        app.kubernetes.io/rawname: simapp
        app.kubernetes.io/version: 0.1.1
    spec:      
      initContainers:
        - name: init-genesis
          image: ghcr.io/cosmology-tech/starship/simapp:v0.47.3
          imagePullPolicy: Always
          env:            
            - name: DENOM
              value: stake
            - name: COINS
              value: 100000000000000stake
            - name: CHAIN_BIN
              value: simd
            - name: CHAIN_DIR
              value: /root/.simapp
            - name: CODE_REPO
              value: https://github.com/cosmos/cosmos-sdk/tree/main/simapp
            - name: DAEMON_HOME
              value: /root/.simapp
            - name: DAEMON_NAME
              value: simd            
            - name: CHAIN_ID
              value: simapp            
            - name: TIME_IOTA_MS
              value: "10"
            - name: TIMEOUT_COMMIT
              value: "800ms"
            - name: TIMEOUT_PRECOMMIT
              value: "400ms"
            - name: TIMEOUT_PRECOMMIT_DELTA
              value: "400ms"
            - name: TIMEOUT_PREVOTE
              value: "400ms"
            - name: TIMEOUT_PREVOTE_DELTA
              value: "400ms"
            - name: TIMEOUT_PROPOSE
              value: "400ms"
            - name: TIMEOUT_PROPOSE_DELTA
              value: "400ms"
            - name: KEYS_CONFIG
              value: /configs/keys.json
            - name: FAUCET_ENABLED
              value: "true"
            - name: NUM_VALIDATORS
              value: "2"
            - name: NUM_RELAYERS
              value: "0"
          command:
            - bash
            - "-c"
            - |
              VAL_INDEX=${HOSTNAME##*-}
              echo "Validator Index: $VAL_INDEX"

              if [ -f $CHAIN_DIR/config/genesis.json ]; then
                echo "Genesis file exists, exiting init container"
                exit 0
              fi

              echo "Running setup genesis script..."
              bash -e /scripts/create-genesis.sh
              bash -e /scripts/update-genesis.sh

              echo "Create node id json file"
              NODE_ID=$($CHAIN_BIN tendermint show-node-id)
              echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json

              echo "Create consensus key json file"
              $CHAIN_BIN tendermint show-validator > $CHAIN_DIR/config/consensus_key.json
              cat $CHAIN_DIR/config/consensus_key.json

              echo "Add custom accounts and balances"
              CHAIN_GENESIS_CMD=$($CHAIN_BIN 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")
          resources:
            limits:
              cpu: 0.2
              memory: 400M
            requests:
              cpu: 0.2
              memory: 400M
          volumeMounts:
            - mountPath: /root/.simapp
              name: node
            - mountPath: /configs
              name: addresses
            - mountPath: /scripts
              name: scripts
        - name: init-config
          image: ghcr.io/cosmology-tech/starship/simapp:v0.47.3
          imagePullPolicy: Always
          env:            
            - name: DENOM
              value: stake
            - name: COINS
              value: 100000000000000stake
            - name: CHAIN_BIN
              value: simd
            - name: CHAIN_DIR
              value: /root/.simapp
            - name: CODE_REPO
              value: https://github.com/cosmos/cosmos-sdk/tree/main/simapp
            - name: DAEMON_HOME
              value: /root/.simapp
            - name: DAEMON_NAME
              value: simd            
            - name: CHAIN_ID
              value: simapp            
            - name: TIME_IOTA_MS
              value: "10"
            - name: TIMEOUT_COMMIT
              value: "800ms"
            - name: TIMEOUT_PRECOMMIT
              value: "400ms"
            - name: TIMEOUT_PRECOMMIT_DELTA
              value: "400ms"
            - name: TIMEOUT_PREVOTE
              value: "400ms"
            - name: TIMEOUT_PREVOTE_DELTA
              value: "400ms"
            - name: TIMEOUT_PROPOSE
              value: "400ms"
            - name: TIMEOUT_PROPOSE_DELTA
              value: "400ms"
            - name: KEYS_CONFIG
              value: /configs/keys.json
            - name: METRICS
              value: ""
          command:
            - bash
            - "-c"
            - |
              VAL_INDEX=${HOSTNAME##*-}
              echo "Validator Index: $VAL_INDEX"

              echo "Running setup config script..."
              bash -e /scripts/update-config.sh
          resources:
            limits:
              cpu: 0.2
              memory: 400M
            requests:
              cpu: 0.2
              memory: 400M
          volumeMounts:
            - mountPath: /root/.simapp
              name: node
            - mountPath: /configs
              name: addresses
            - mountPath: /scripts
              name: scripts
        
        - name: init-faucet
          image: ghcr.io/hyperweb-io/starship/faucet:20250325-2207109
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - "-c"
            - |
              # Install faucet binary from the image
              cp /bin/faucet /faucet/faucet
              chmod +x /faucet/faucet
          resources:
            limits:
              cpu: 0.2
              memory: 400M
            requests:
              cpu: 0.2
              memory: 400M
          volumeMounts:
            - mountPath: /faucet
              name: faucet
      containers:
        - name: validator
          image: ghcr.io/cosmology-tech/starship/simapp:v0.47.3
          imagePullPolicy: Always
          env:            
            - name: DENOM
              value: stake
            - name: COINS
              value: 100000000000000stake
            - name: CHAIN_BIN
              value: simd
            - name: CHAIN_DIR
              value: /root/.simapp
            - name: CODE_REPO
              value: https://github.com/cosmos/cosmos-sdk/tree/main/simapp
            - name: DAEMON_HOME
              value: /root/.simapp
            - name: DAEMON_NAME
              value: simd            
            - name: CHAIN_ID
              value: simapp
            - name: FAUCET_ENABLED
              value: "true"
            - name: SLOGFILE
              value: "slog.slog"
          command:
            - bash
            - "-c"
            - |
              START_ARGS=""
              $CHAIN_BIN start $START_ARGS
          resources:
            limits:
              cpu: 0.2
              memory: 400M
            requests:
              cpu: 0.2
              memory: 400M
          volumeMounts:
            - mountPath: /root/.simapp
              name: node
            - mountPath: /configs
              name: addresses
            - mountPath: /scripts
              name: scripts
          readinessProbe:
            exec:
              command:
                - bash
                - -e
                - /scripts/chain-rpc-ready.sh
                - http://localhost:26657
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 15
        - name: exposer
          image: ghcr.io/hyperweb-io/starship/exposer:20250205-544757d
          imagePullPolicy: Always
          env:            
            - name: GENESIS_HOST
              value: simapp-genesis
            - name: GENESIS_PORT
              value: "8081"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: EXPOSER_HTTP_PORT
              value: "8081"
            - name: EXPOSER_GRPC_PORT
              value: "9099"
            - name: EXPOSER_GENESIS_FILE
              value: /root/.simapp/config/genesis.json
            - name: EXPOSER_MNEMONIC_FILE
              value: /configs/keys.json
            - name: EXPOSER_PRIV_VAL_FILE
              value: /root/.simapp/config/priv_validator_key.json
            - name: EXPOSER_NODE_KEY_FILE
              value: /root/.simapp/config/node_key.json
            - name: EXPOSER_NODE_ID_FILE
              value: /root/.simapp/config/node_id.json
            - name: EXPOSER_PRIV_VAL_STATE_FILE
              value: /root/.simapp/data/priv_validator_state.json
          command: [ "exposer" ]
          resources:
            limits:
              cpu: 0.1
              memory: 100M
            requests:
              cpu: 0.1
              memory: 100M
          volumeMounts:
            - mountPath: /root/.simapp
              name: node
            - mountPath: /configs
              name: addresses
        - name: faucet
          image: ghcr.io/cosmology-tech/starship/simapp:v0.47.3
          imagePullPolicy: Always
          env:
            - name: FAUCET_CONCURRENCY
              value: "2"
            - name: FAUCET_HTTP_PORT
              value: "8000"
            - name: FAUCET_CHAIN_BINARY
              value: "simd"
            - name: FAUCET_CHAIN_ID
              value: "simapp"
            - name: COINS
              value: "100000000000000stake"
          command:
            - bash
            - "-c"
            - |
              CREDIT_COINS=""
              FEES=""
              for coin in ${COINS//,/ }
              do
                  amt="${coin//[!0-9]/}"
                  denom="${coin//[0-9]/}"

                  # Calculate the order of magnitude
                  if [ ${#amt} -gt 18 ]; then
                    creditAmt=$(echo $amt | sed -e "s/000000$//")
                    feesAmt=$(echo $amt | sed -e "s/0000000000000$//")
                  else
                    creditAmt=$(echo $amt | sed -e "s/0000$//")
                    feesAmt=$(echo $amt | sed -e "s/00000000$//")
                  fi

                  if [[ $CREDIT_COINS == "" ]]
                  then
                    CREDIT_COINS="$creditAmt$denom"
                    FEES="$feesAmt$denom"
                  else
                    CREDIT_COINS="${CREDIT_COINS},$creditAmt$denom"
                  fi
              done

              export FAUCET_MNEMONIC=$(jq -r ".faucet[0].mnemonic" /configs/keys.json)

              export | grep "FAUCET"

              until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
                sleep 10
              done

              /faucet/faucet --credit-coins="$CREDIT_COINS" --chain-fees="$FEES"
          volumeMounts:
            - mountPath: /configs
              name: addresses
            - mountPath: /faucet
              name: faucet
            - mountPath: /scripts
              name: scripts
          resources:
            limits:
              cpu: 0.1
              memory: 200M
            requests:
              cpu: 0.1
              memory: 200M
          readinessProbe:
            httpGet:
              path: /status
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: node
          emptyDir: { }
        - name: addresses
          configMap:
            name: keys
        - name: scripts
          configMap:
            name: setup-scripts-simapp
        - name: faucet
          emptyDir: { }
---
# Source: devnet/templates/chains/cosmos/validator.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: simapp-validator
spec:
  serviceName: simapp-validator
  podManagementPolicy: Parallel
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: simapp
      app.kubernetes.io/name: simapp-validator
  template:
    metadata:
      annotations:
        quality: release
        role: api-gateway
        sla: high
        tier: gateway
      labels:
        app.kubernetes.io/instance: simapp
        app.kubernetes.io/type: simapp
        app.kubernetes.io/name: simapp-validator
        app.kubernetes.io/version: 0.1.1
    spec:      
      initContainers:        
        - name: "wait-for-chains"
          image: "curlimages/curl"
          imagePullPolicy: Always
          env:
            - name: GENESIS_PORT
              value: "8081"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - /bin/sh
            - "-c"
            - |
              while [ $(curl -sw '%{http_code}' http://simapp-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
                echo "Genesis validator does not seem to be ready for: simapp. Waiting for it to start..."
                echo "Checking: http://simapp-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id"
                sleep 10;
              done
              echo "Ready to start"
              exit 0
          resources:    
            limits:
              cpu: 0.1
              memory: 100M
            requests:
              cpu: 0.1
              memory: 100M
        - name: init-validator
          image: ghcr.io/cosmology-tech/starship/simapp:v0.47.3
          imagePullPolicy: Always
          env:            
            - name: DENOM
              value: stake
            - name: COINS
              value: 100000000000000stake
            - name: CHAIN_BIN
              value: simd
            - name: CHAIN_DIR
              value: /root/.simapp
            - name: CODE_REPO
              value: https://github.com/cosmos/cosmos-sdk/tree/main/simapp
            - name: DAEMON_HOME
              value: /root/.simapp
            - name: DAEMON_NAME
              value: simd            
            - name: CHAIN_ID
              value: simapp            
            - name: TIME_IOTA_MS
              value: "10"
            - name: TIMEOUT_COMMIT
              value: "800ms"
            - name: TIMEOUT_PRECOMMIT
              value: "400ms"
            - name: TIMEOUT_PRECOMMIT_DELTA
              value: "400ms"
            - name: TIMEOUT_PREVOTE
              value: "400ms"
            - name: TIMEOUT_PREVOTE_DELTA
              value: "400ms"
            - name: TIMEOUT_PROPOSE
              value: "400ms"
            - name: TIMEOUT_PROPOSE_DELTA
              value: "400ms"            
            - name: GENESIS_HOST
              value: simapp-genesis
            - name: GENESIS_PORT
              value: "8081"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KEYS_CONFIG
              value: /configs/keys.json
            - name: FAUCET_ENABLED
              value: "true"
            - name: METRICS
              value: ""
          command:
            - bash
            - "-c"
            - |
              VAL_INDEX=${HOSTNAME##*-}
              echo "Validator Index: $VAL_INDEX"

              if [ -f $CHAIN_DIR/config/genesis.json ]; then
                echo "Genesis file exists, exiting early"
                exit 0
              fi

              VAL_NAME=$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX
              echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

              echo "Recover validator $VAL_NAME"
              $CHAIN_BIN init $VAL_NAME --chain-id $CHAIN_ID
              jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_NAME --index $VAL_INDEX --recover --keyring-backend="test"

              curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o $CHAIN_DIR/config/genesis.json
              echo "Genesis file that we got....."
              cat $CHAIN_DIR/config/genesis.json

              echo "Create node id json file"
              NODE_ID=$($CHAIN_BIN tendermint show-node-id)
              echo '{"node_id":"'$NODE_ID'"}' > $CHAIN_DIR/config/node_id.json
          resources:
            limits:
              cpu: 0.2
              memory: 400M
            requests:
              cpu: 0.2
              memory: 400M
          volumeMounts:
            - mountPath: /root/.simapp
              name: node
            - mountPath: /configs
              name: addresses
            - mountPath: /scripts
              name: scripts
        - name: init-config
          image: ghcr.io/cosmology-tech/starship/simapp:v0.47.3
          imagePullPolicy: Always
          env:            
            - name: DENOM
              value: stake
            - name: COINS
              value: 100000000000000stake
            - name: CHAIN_BIN
              value: simd
            - name: CHAIN_DIR
              value: /root/.simapp
            - name: CODE_REPO
              value: https://github.com/cosmos/cosmos-sdk/tree/main/simapp
            - name: DAEMON_HOME
              value: /root/.simapp
            - name: DAEMON_NAME
              value: simd            
            - name: CHAIN_ID
              value: simapp            
            - name: TIME_IOTA_MS
              value: "10"
            - name: TIMEOUT_COMMIT
              value: "800ms"
            - name: TIMEOUT_PRECOMMIT
              value: "400ms"
            - name: TIMEOUT_PRECOMMIT_DELTA
              value: "400ms"
            - name: TIMEOUT_PREVOTE
              value: "400ms"
            - name: TIMEOUT_PREVOTE_DELTA
              value: "400ms"
            - name: TIMEOUT_PROPOSE
              value: "400ms"
            - name: TIMEOUT_PROPOSE_DELTA
              value: "400ms"            
            - name: GENESIS_HOST
              value: simapp-genesis
            - name: GENESIS_PORT
              value: "8081"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KEYS_CONFIG
              value: /configs/keys.json
            - name: METRICS
              value: ""
          command:
            - bash
            - "-c"
            - |
              VAL_INDEX=${HOSTNAME##*-}
              echo "Validator Index: $VAL_INDEX"

              echo "Running setup config script..."
              bash -e /scripts/update-config.sh
              
              curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id
              NODE_ID=$(curl -s http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_id | jq -r ".node_id")
              if [[ $NODE_ID == "" ]]; then
                echo "Node ID is null, exiting early"
                exit 1
              fi
              
              GENESIS_NODE_P2P=$NODE_ID@$GENESIS_HOST.$NAMESPACE.svc.cluster.local:26656
              echo "Node P2P: $GENESIS_NODE_P2P"
              sed -i "s/persistent_peers = \"\"/persistent_peers = \"$GENESIS_NODE_P2P\"/g" $CHAIN_DIR/config/config.toml

              echo "Printing the whole config.toml file"
              cat $CHAIN_DIR/config/config.toml
          resources:
            limits:
              cpu: 0.2
              memory: 400M
            requests:
              cpu: 0.2
              memory: 400M
          volumeMounts:
            - mountPath: /root/.simapp
              name: node
            - mountPath: /configs
              name: addresses
            - mountPath: /scripts
              name: scripts
      containers:
        - name: validator
          image: ghcr.io/cosmology-tech/starship/simapp:v0.47.3
          imagePullPolicy: Always
          env:            
            - name: DENOM
              value: stake
            - name: COINS
              value: 100000000000000stake
            - name: CHAIN_BIN
              value: simd
            - name: CHAIN_DIR
              value: /root/.simapp
            - name: CODE_REPO
              value: https://github.com/cosmos/cosmos-sdk/tree/main/simapp
            - name: DAEMON_HOME
              value: /root/.simapp
            - name: DAEMON_NAME
              value: simd            
            - name: CHAIN_ID
              value: simapp            
            - name: GENESIS_HOST
              value: simapp-genesis
            - name: GENESIS_PORT
              value: "8081"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KEYS_CONFIG
              value: /configs/keys.json
            - name: SLOGFILE
              value: "slog.slog"
          command:
            - bash
            - "-c"
            - |
              set -eux
              START_ARGS=""

              # Starting the chain
              $CHAIN_BIN start $START_ARGS
          
          lifecycle:
            postStart:
              exec:
                command:
                  - bash
                  - "-c"
                  - "-e"
                  - |
                    until bash -e /scripts/chain-rpc-ready.sh http://localhost:26657; do
                      sleep 10
                    done

                    set -eux
                    export
                    VAL_INDEX=${HOSTNAME##*-}
                    VAL_NAME="$(jq -r ".validators[0].name" $KEYS_CONFIG)-$VAL_INDEX"
                    echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME. Chain bin $CHAIN_BIN"

                    VAL_ADDR=$($CHAIN_BIN keys show $VAL_NAME -a --keyring-backend="test")
                    echo "Transfer tokens to address $VAL_ADDR before trying to create validator. Best effort"
                    bash -e /scripts/transfer-tokens.sh \
                      $VAL_ADDR \
                      $DENOM \
                      http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:8000/credit \
                      "true" || true

                    $CHAIN_BIN keys list --keyring-backend test | jq
                    VAL_NAME=$VAL_NAME bash -e /scripts/create-validator.sh
          resources:
            limits:
              cpu: 0.2
              memory: 400M
            requests:
              cpu: 0.2
              memory: 400M
          volumeMounts:
            - mountPath: /root/.simapp
              name: node
            - mountPath: /configs
              name: addresses
            - mountPath: /scripts
              name: scripts
          readinessProbe:
            exec:
              command:
                - bash
                - -e
                - /scripts/chain-rpc-ready.sh
                - http://localhost:26657
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 15
        - name: exposer
          image: ghcr.io/hyperweb-io/starship/exposer:20250205-544757d
          imagePullPolicy: Always
          env:            
            - name: DENOM
              value: stake
            - name: COINS
              value: 100000000000000stake
            - name: CHAIN_BIN
              value: simd
            - name: CHAIN_DIR
              value: /root/.simapp
            - name: CODE_REPO
              value: https://github.com/cosmos/cosmos-sdk/tree/main/simapp
            - name: DAEMON_HOME
              value: /root/.simapp
            - name: DAEMON_NAME
              value: simd            
            - name: CHAIN_ID
              value: simapp            
            - name: GENESIS_HOST
              value: simapp-genesis
            - name: GENESIS_PORT
              value: "8081"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: EXPOSER_HTTP_PORT
              value: "8081"
            - name: EXPOSER_GRPC_PORT
              value: "9099"
            - name: EXPOSER_GENESIS_FILE
              value: /root/.simapp/config/genesis.json
            - name: EXPOSER_MNEMONIC_FILE
              value: /configs/keys.json
            - name: EXPOSER_PRIV_VAL_FILE
              value: /root/.simapp/config/priv_validator_key.json
            - name: EXPOSER_NODE_KEY_FILE
              value: /root/.simapp/config/node_key.json
            - name: EXPOSER_PRIV_VAL_STATE_FILE
              value: /root/.simapp/data/priv_validator_state.json
          command: [ "exposer" ]
          resources:
            limits:
              cpu: 0.1
              memory: 100M
            requests:
              cpu: 0.1
              memory: 100M
          volumeMounts:
            - mountPath: /root/.simapp
              name: node
            - mountPath: /configs
              name: addresses
      volumes:
        - name: node
          emptyDir: { }
        - name: addresses
          configMap:
            name: keys
        - name: scripts
          configMap:
            name: setup-scripts-simapp

