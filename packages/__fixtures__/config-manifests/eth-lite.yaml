---
# Source: devnet/templates/chains/cosmos/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: keys
data:
  keys.json: |-
    {
      "genesis": [
        {
          "name": "genesis",
          "type": "local",
          "mnemonic": "razor dog gown public private couple ecology paper flee connect local robot diamond stay rude join sound win ribbon soup kidney glass robot vehicle"
        }
      ],
      "validators": [
        {
          "name": "validator",
          "type": "local",
          "mnemonic": "issue have volume expire shoe year finish poem alien urban license undo rural endless food host opera fix forum crack wide example firm learn"
        }
      ],
      "faucet": [
        {
          "name": "faucet",
          "type": "local",
          "mnemonic": "chimney become stuff spoil resource supply picture divorce casual curve check web valid survey zebra various pet sphere timber friend faint blame mansion film"
        }
      ],
      "keys": [
        {
          "name": "test1",
          "type": "local",
          "mnemonic": "opinion knife other balcony surge more bamboo canoe romance ask argue teach anxiety adjust spike mystery wolf alone torch tail six decide wash alley"
        },
        {
          "name": "test2",
          "type": "local",
          "mnemonic": "logic help only text door wealth hurt always remove glory viable income agent olive trial female couch old offer crash menu zero pencil thrive"
        },
        {
          "name": "test3",
          "type": "local",
          "mnemonic": "middle weather hip ghost quick oxygen awful library broken chicken tackle animal crunch appear fee indoor fitness enough orphan trend tackle faint eyebrow all"
        }
      ],
      "relayers": [
        {
          "name": "relayer1",
          "type": "local",
          "mnemonic": "pen quit web pill hunt hobby tonight base wine black era cereal veteran trouble december method diet orbit copper nephew into badge olympic repair"
        },
        {
          "name": "relayer2",
          "type": "local",
          "mnemonic": "spatial major zebra crew space file thunder fatigue wool viable cry kiss wedding dumb eager dream soon north coral suffer salt mutual kitten surface"
        },
        {
          "name": "relayer3",
          "type": "local",
          "mnemonic": "cruise topic shrug relax update slot marble valid chat upset offer cruise list frog machine fossil help dentist hard thunder dial wink light long"
        },
        {
          "name": "relayer4",
          "type": "local",
          "mnemonic": "carpet maid isolate side tonight crash doctor awkward balcony lift brand can affair address cube box print senior organ city ride argue board depth"
        },
        {
          "name": "relayer5",
          "type": "local",
          "mnemonic": "dad rural bridge own habit menu balance loan height rotate suit gym antenna convince traffic carry orphan service tower fatigue lady van prepare glide"
        }
      ],
      "relayers_cli": [
        {
          "name": "relayer-cli-1",
          "type": "local",
          "mnemonic": "marine suspect wood vague vast pet cargo tenant oyster tuna news river follow chicken shoulder ceiling guess never help dismiss grape scheme oyster produce"
        },
        {
          "name": "relayer-cli-2",
          "type": "local",
          "mnemonic": "resemble pear bulb portion refuse off hundred kit flame hurry evidence fringe fetch kite strike actual naive stamp burden oak punch fault approve message"
        },
        {
          "name": "relayer-cli-3",
          "type": "local",
          "mnemonic": "cycle opinion segment gas season exclude artist cliff believe seminar salute bicycle math puzzle wreck minor country rough choose escape access warm expect february"
        },
        {
          "name": "relayer-cli-4",
          "type": "local",
          "mnemonic": "essay lobster image grain faculty vocal glass merry fish resist hub game suffer rose fence vocal network absurd demise demise repair museum envelope abstract"
        },
        {
          "name": "relayer-cli-5",
          "type": "local",
          "mnemonic": "adjust stove name refuse vehicle hip alpha steel dynamic alley ride segment exhibit pony abuse figure type close direct animal bomb food glass seed"
        }
      ]
    }
---
# Source: devnet/templates/chains/cosmos/configmap.yaml
# Configmap with setup-scripts that are not chain specific
apiVersion: v1
kind: ConfigMap
metadata:
  name: setup-scripts
data:
  transfer-tokens.sh: |-
    #!/bin/bash
    
    ADDRESS="$1"
    DENOM="$2"
    FAUCET_URL="$3"
    FAUCET_ENABLED="$4"
    
    set -eux
    
    function transfer_token() {
      status_code=$(curl --header "Content-Type: application/json" \
        --request POST --write-out %{http_code} --silent --output /dev/null \
        --data '{"denom":"'"$DENOM"'","address":"'"$ADDRESS"'"}' \
        $FAUCET_URL)
      echo $status_code
    }
    
    if [[ $FAUCET_ENABLED == "false" ]];
    then
      echo "Faucet not enabled... skipping transfer token from faucet"
      exit 0
    fi
    
    echo "Try to send tokens, if failed, wait for 5 seconds and try again"
    max_tries=5
    while [[ max_tries -gt 0 ]]
    do
      status_code=$(transfer_token)
      if [[ "$status_code" -eq 200 ]]; then
        echo "Successfully sent tokens"
        exit 0
      fi
      echo "Failed to send tokens. Sleeping for 2 secs. Tries left $max_tries"
      ((max_tries--))
      sleep 2
    done
    
  ibc-connection.sh: |-
    #!/bin/bash
    
    REGISTRY_URL="$1"
    CHAIN_1="$2"
    CHAIN_2="$3"
    
    set -eux
    
    function connection_id() {
      CONNECTION_ID=$(curl -s $REGISTRY_URL/ibc/$CHAIN_1/$CHAIN_2 | jq -r ".chain_1.connection_id")
      echo $CONNECTION_ID
    }
    
    echo "Try to get connection id, if failed, wait for 2 seconds and try again"
    max_tries=20
    while [[ max_tries -gt 0 ]]
    do
      id=$(connection_id)
      if [[ -n "$id" ]]; then
        echo "Found connection id: $id"
        exit 0
      fi
      echo "Failed to get connection id. Sleeping for 2 secs. Tries left $max_tries"
      ((max_tries--))
      sleep 10
    done
    
  create-ics.sh: |-
    #!/bin/bash
    
    set -euxo pipefail
    
    DENOM="${DENOM:=uatom}"
    CHAIN_ID="${CHAIN_ID:=cosmoshub-1}"
    CHAIN_BIN="${CHAIN_BIN:=gaiad}"
    NODE_URL="${NODE_URL:=http://0.0.0.0:26657}"
    KEYS_CONFIG="${KEYS_CONFIG:=configs/keys.json}"
    
    PROPOSAL_FILE="${PROPOSAL_FILE}"
    KEY_NAME="ics-setup"
    MAX_RETRIES=3
    RETRY_INTERVAL=30
    SUBMIT_PROPOSAL_CMD=""
    
    add_key() {
      # Add test keys to the keyring and self delegate initial coins
      echo "Adding key...." $(jq -r ".keys[0].name" $KEYS_CONFIG)
      jq -r ".keys[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $KEY_NAME --recover --keyring-backend="test"
      echo $($CHAIN_BIN keys show -a $KEY_NAME --keyring-backend="test")
    }
    
    get_validator_address() {
      echo "Getting validator address..."
      VALIDATOR_ADDRESS=$($CHAIN_BIN q staking validators --node $NODE_URL --output json | jq -r '.validators[0].operator_address')
      echo "Selected validator address: $VALIDATOR_ADDRESS"
    }
    
    stake_tokens() {
      COINS="10000000$DENOM"
      echo "Staking tokens..."
      $CHAIN_BIN tx staking delegate $VALIDATOR_ADDRESS $COINS \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes
      sleep 5
    }
    
    determine_proposal_command() {
      echo "Determining the correct command to submit proposals..."
      HELP_OUTPUT=$($CHAIN_BIN tx gov --help)
      if echo "$HELP_OUTPUT" | grep -q "submit-legacy-proposal"; then
        SUBMIT_PROPOSAL_CMD="submit-legacy-proposal"
      else
        SUBMIT_PROPOSAL_CMD="submit-proposal"
      fi
      echo "Using $SUBMIT_PROPOSAL_CMD for submitting proposals."
    }
    
    submit_proposal() {
      echo "Get all proposals"
      PROPOSALS_OUTPUT=$($CHAIN_BIN query gov proposals --output json --node $NODE_URL 2>&1 || true)
      if echo "$PROPOSALS_OUTPUT" | grep -q "no proposals found"; then
        echo "No existing proposals found. Proceeding to submit a new proposal."
      else
        echo "Existing proposals: $PROPOSALS_OUTPUT"
      fi
    
      echo "Submit gov proposal on chain"
      PROPOSAL_TX=$($CHAIN_BIN tx gov $SUBMIT_PROPOSAL_CMD consumer-addition $PROPOSAL_FILE \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes)
      echo $PROPOSAL_TX
    
      # Extract JSON part from the output
      TX_HASH=$(echo "$PROPOSAL_TX" | grep -o '{.*}' | jq -r '.txhash')
      if [ -n "$TX_HASH" ]; then
        echo "Transaction hash: $TX_HASH"
      else
        echo "Failed to submit proposal. Output was not as expected."
        exit 1
      fi
    
      sleep 5
    }
    
    get_proposal_id() {
      echo "Getting proposal ID"
      PROPOSAL_QUERY=$(gaiad query tx $TX_HASH --node $NODE_URL --output json)
      LOGS=$(echo $PROPOSAL_QUERY | jq -r '.logs')
      if [ "$LOGS" != "null" ] && [ "$LOGS" != "[]" ]; then
        PROPOSAL_ID=$(echo $PROPOSAL_QUERY | jq -r '.logs[0].events[] | select(.type=="submit_proposal").attributes[] | select(.key=="proposal_id").value')
        if [ -n "$PROPOSAL_ID" ]; then
          echo "Proposal ID: $PROPOSAL_ID"
          return 0
        fi
      fi
      echo "Failed to retrieve proposal ID from transaction logs. Logs might be empty."
      exit 1
    }
    
    vote_proposal() {
      echo "Voting on proposal"
      $CHAIN_BIN tx gov vote $PROPOSAL_ID yes \
        --from $KEY_NAME \
        --chain-id $CHAIN_ID \
        --node $NODE_URL \
        --keyring-backend="test" \
        --gas auto --gas-adjustment 2 \
        --output json \
        --yes
      sleep 5
    }
    
    wait_for_proposal_to_pass() {
      echo "Waiting for proposal to pass"
      for ((i=1; i<=$MAX_RETRIES; i++)); do
        STATUS=$($CHAIN_BIN query gov proposal $PROPOSAL_ID --node $NODE_URL --output json | jq -r '.status')
        if [ "$STATUS" == "PROPOSAL_STATUS_PASSED" ]; then
          echo "Proposal has passed!"
          return 0
        else
          echo "Current status: $STATUS. Attempt $i/$MAX_RETRIES. Waiting..."
          sleep $RETRY_INTERVAL
        fi
      done
      echo "Proposal did not pass after $MAX_RETRIES attempts."
      exit 1
    }
    
    main() {
      add_key
      get_validator_address
      stake_tokens
      determine_proposal_command
      submit_proposal
      get_proposal_id
      vote_proposal
      wait_for_proposal_to_pass
    }
    
    main
---
# Source: devnet/templates/chains/eth/statefulsets.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-ethereum
data:
  genesis.json: |-
    {
      "config": {
        "chainId": 1337,
        "homesteadBlock": 0,
        "eip150Block": 0,
        "eip155Block": 0,
        "eip158Block": 0,
        "byzantiumBlock": 0,
        "constantinopleBlock": 0,
        "petersburgBlock": 0,
        "istanbulBlock": 0,
        "londonBlock": 0,
        "berlinBlock": 0,
        "terminalTotalDifficulty": 0,
        "terminalTotalDifficultyPassed": true
      },
      "nonce": "0x0",
      "timestamp": "0x677d172f",
      "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": "0x47b760",
      "difficulty": "0x1",
      "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "coinbase": "0x0000000000000000000000000000000000000000",
      "alloc": {
        "0x0000000000000000000000000000000000000001": {
          "balance": "0x3635c9adc5dea00000"
        },
        "0x0000000000000000000000000000000000000002": {
          "balance": "0x3635c9adc5dea00000"
        },
        "0x4242424242424242424242424242424242424242": {
          "code": "",
          "balance": "0x0"
        }
      },
      "number": "0x0",
      "gasUsed": "0x0",
      "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "baseFeePerGas": "0x7",
      "excessBlobGas": null,
      "blobGasUsed": null
    }
  jwt.hex: |-
    3fe89f53368415a79e065f3c885b7273b41540d5598488ef475cfdc4009850a4
  config.yaml: |-
    CONFIG_NAME: interop
    PRESET_BASE: interop

    # Genesis
    GENESIS_FORK_VERSION: 0x20000089

    # Altair
    ALTAIR_FORK_EPOCH: 0
    ALTAIR_FORK_VERSION: 0x20000090

    # Merge
    BELLATRIX_FORK_EPOCH: 0
    BELLATRIX_FORK_VERSION: 0x20000091
    TERMINAL_TOTAL_DIFFICULTY: 0

    # Capella
    CAPELLA_FORK_EPOCH: 0
    CAPELLA_FORK_VERSION: 0x20000092
    MAX_WITHDRAWALS_PER_PAYLOAD: 16

    # Deneb
    DENEB_FORK_VERSION: 0x20000093

    # Electra
    ELECTRA_FORK_VERSION: 0x20000094

    # Time parameters
    SECONDS_PER_SLOT: 12
    SLOTS_PER_EPOCH: 6

    # Deposit contract
    DEPOSIT_CONTRACT_ADDRESS: 0x4242424242424242424242424242424242424242
---
# Source: devnet/templates/chains/eth/statefulsets.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ethereum-1337
  namespace: default
  labels:
    app: ethereum-1337
spec:
    serviceName: ethereum-1337
    replicas: 
    selector:
        matchLabels:
          app.kubernetes.io/instance: ethereum-1337
          app.kubernetes.io/name: ethereum-1337
    template:
      metadata:
        annotations:
          quality: release
          role: api-gateway
          sla: high
          tier: gateway
        labels:
          app.kubernetes.io/instance: ethereum-1337
          app.kubernetes.io/type: ethereum-1337
          app.kubernetes.io/name: ethereum-1337
          app.kubernetes.io/rawname: "1337"
          app.kubernetes.io/version: 0.1.1
      spec:      
        initContainers:
        - name: init-genesis-beacon
          image: ghcr.io/hyperweb-io/starship/prysm/cmd/prysmctl:v5.2.0
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - "-c"
            - |
              mkdir -p /ethereum/consensus /ethereum/execution
              cp /config/genesis.json /ethereum/execution/genesis.json
              cp /config/config.yaml /ethereum/consensus/config.yaml

              echo "Initializing genesis"
              prysmctl testnet generate-genesis \
                --fork=capella \
                --num-validators=1 \
                --genesis-time-delay=15 \
                --output-ssz=/ethereum/consensus/genesis.ssz \
                --chain-config-file=/ethereum/consensus/config.yaml \
                --geth-genesis-json-in=/ethereum/execution/genesis.json \
                --geth-genesis-json-out=/ethereum/execution/genesis.json

              echo "Copy secrets over"
              cp /config/jwt.hex /etc/secrets/jwt.hex
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 200m
              memory: 200Mi
          volumeMounts:
            - name: secrets
              mountPath: /etc/secrets
            - name: config
              mountPath: /config
            - name: ethereum
              mountPath: /ethereum
        - name: init-genesis-execution
          image: ghcr.io/hyperweb-io/starship/ethereum/client-go:v1.14.12
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - "-c"
            - |
              echo "Initializing genesis geth"
              geth --datadir /ethereum/execution init /ethereum/execution/genesis.json
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 200m
              memory: 200Mi
          volumeMounts:
            - name: secrets
              mountPath: /etc/secrets
            - name: config
              mountPath: /config
            - name: ethereum
              mountPath: /ethereum
        containers:
        - name: geth
          image: ghcr.io/hyperweb-io/starship/ethereum/client-go:v1.14.12
          imagePullPolicy: IfNotPresent
          env:
          - name: HTTP_PORT
            value: "8545"
          - name: WS_PORT
            value: "8546"
          - name: RPC_PORT
            value: "8551"
          command:
            - bash
            - "-c"
            - |
              echo "Setting UDP buffer size"
              sysctl -w net.core.rmem_max=16777216
              sysctl -w net.core.wmem_max=16777216

              echo "Starting execution chain"
              geth --datadir /ethereum/execution --http \
                --http.addr=0.0.0.0 \
                --http.port=$HTTP_PORT \
                --http.api=eth,net,web3,debug \
                --ws --ws.addr=0.0.0.0 \
                --ws.port=$WS_PORT \
                --authrpc.addr=0.0.0.0 \
                --authrpc.port=$RPC_PORT \
                --nodiscover \
                --http.corsdomain=* \
                --ws.api=eth,net,web3 \
                --ws.origins=* \
                --http.vhosts=* \
                --authrpc.vhosts=* \
                --authrpc.jwtsecret=/etc/secrets/jwt.hex \
                --unlock=0x123463a4B065722E99115D6c222f267d9cABb524 \
                --password=/dev/null \
                --syncmode=snap \
                --snapshot=false \
                --networkid=1337 \
                --verbosity=4 \
                --maxpeers=50 \
                --nat=none \
                --log.vmodule=engine=6
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 200m
              memory: 200Mi
          volumeMounts:
            - name: ethereum
              mountPath: /ethereum
            - name: secrets
              mountPath: /etc/secrets
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - |
                  curl -s --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' -H "Content-Type: application/json" -X POST http://localhost:8545 | grep -q '"result":false'
            initialDelaySeconds: 15
            periodSeconds: 10
        - name: beacon-chain
          image: ghcr.io/hyperweb-io/starship/prysm/beacon-chain:v5.2.0
          imagePullPolicy: Always
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - bash
            - "-c"
            - |
              echo "Waiting 30 seconds for execution client to be ready..."
              sleep 30

              echo "Starting consensus chain"
              beacon-chain \
                --execution-endpoint=http://0.0.0.0:8551 \
                --jwt-secret=/etc/secrets/jwt.hex \
                --accept-terms-of-use \
                --http-host 0.0.0.0 \
                --rpc-host 0.0.0.0 \
                --chain-id 1337 \
                --contract-deployment-block=0 \
                --datadir /ethereum/consensus \
                --genesis-state /ethereum/consensus/genesis.ssz \
                --min-sync-peers=0 \
                --chain-config-file=/ethereum/consensus/config.yaml \
                --network-id 1337 \
                --suggested-fee-recipient=0x123463a4B065722E99115D6c222f267d9cABb524 \
                --minimum-peers-per-subnet=0 \
                --force-clear-db
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 200m
              memory: 200Mi
          volumeMounts:
            - name: ethereum
              mountPath: /ethereum
            - name: secrets
              mountPath: /etc/secrets
          readinessProbe:
            httpGet:
              path: /eth/v1/node/health
              port: 3500
            initialDelaySeconds: 15
            periodSeconds: 20
        - name: validator
          image: ghcr.io/hyperweb-io/starship/prysm/validator:v5.2.0
          imagePullPolicy: Always
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - bash
            - "-c"
            - |
              echo "Waiting 15 seconds for execution client to be ready..."
              sleep 20
              mkdir -p /ethereum/consensus/validator
              echo "Starting validator node"
              validator \
                --accept-terms-of-use \
                --beacon-rpc-provider=0.0.0.0:4000 \
                --datadir=/ethereum/consensus/validator \
                --interop-num-validators=1 \
                --interop-start-index=0 \
                --force-clear-db \
                --grpc-gateway-host=0.0.0.0 \
                --chain-config-file=/ethereum/consensus/config.yaml \
                --monitoring-host=0.0.0.0 \
                --monitoring-port=8081 \
                --suggested-fee-recipient=0x0C46c2cAFE097b4f7e1BB868B89e5697eE65f934
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 200m
              memory: 200Mi
          volumeMounts:
            - name: ethereum
              mountPath: /ethereum
            - name: secrets
              mountPath: /etc/secrets
          readinessProbe:
            httpGet:
              path: /metrics
              port: 8081
            initialDelaySeconds: 20
            periodSeconds: 30
        volumes:
          - name: config
            configMap:
              name: config-ethereum
          - name: ethereum
            emptyDir: { }
          - name: secrets
            emptyDir: { }

